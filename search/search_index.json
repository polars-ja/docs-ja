{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Polars \u65e5\u672c\u8a9e\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9","text":"<p>\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f Polars \u516c\u5f0f\u306e\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u3092\u6709\u5fd7\u304c\u65e5\u672c\u8a9e\u306b\u7ffb\u8a33\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u306e\u5185\u5bb9\u306f\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53cd\u6620\u3057\u3066\u3044\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u6700\u65b0\u306e\u60c5\u5831\u306f\u516c\u5f0f\u306e\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u672c\u30da\u30fc\u30b8\u306e\u4ee5\u964d\u306e\u8a18\u8f09\u306f\u3001\u516c\u5f0f\u306e\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u306e\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u306e\u4e00\u90e8\u3092\u629c\u7c8b\u3057\u65e5\u672c\u8a9e\u5316\u3057\u305f\u3082\u306e\u3067\u3059\u3002</p> <p>Polars \u306f\u3001\u69cb\u9020\u5316\u30c7\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u975e\u5e38\u306b\u9ad8\u901f\u306a DataFrame \u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u6838\u3068\u306a\u308b\u90e8\u5206\u306f Rust \u3067\u66f8\u304b\u308c\u3066\u304a\u308a\u3001Python\u3001R\u3001NodeJS \u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"#_1","title":"\u4e3b\u306a\u7279\u5fb4","text":"<ul> <li>\u9ad8\u901f\uff1aRust \u3067\u30bc\u30ed\u304b\u3089\u66f8\u304b\u308c\u3001\u30de\u30b7\u30f3\u306b\u8fd1\u3044\u8a2d\u8a08\u3067\u5916\u90e8\u4f9d\u5b58\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002</li> <li>I/O\uff1a\u30ed\u30fc\u30ab\u30eb\u3001\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306a\u3069\u3001\u3059\u3079\u3066\u306e\u4e00\u822c\u7684\u306a\u30c7\u30fc\u30bf\u30b9\u30c8\u30ec\u30fc\u30b8\u30ec\u30a4\u30e4\u30fc\u306b\u5bfe\u3057\u3066\u4e00\u7d1a\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u3057\u307e\u3059\u3002</li> <li>\u76f4\u611f\u7684\u306a API\uff1a\u610f\u56f3\u3057\u305f\u65b9\u6cd5\u3067\u30af\u30a8\u30ea\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Polars \u306f\u5185\u90e8\u7684\u306b\u6700\u3082\u52b9\u7387\u7684\u306a\u5b9f\u884c\u65b9\u6cd5\u3092\u30af\u30a8\u30ea\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u4f7f\u7528\u3057\u3066\u6c7a\u5b9a\u3057\u307e\u3059\u3002</li> <li>Out of Core\uff1a\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0 API \u3092\u4f7f\u7528\u3057\u3066\u3001\u4e00\u5ea6\u306b\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u306b\u7f6e\u304f\u3053\u3068\u306a\u304f\u7d50\u679c\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li>\u4e26\u5217\u6027\uff1a\u8ffd\u52a0\u306e\u8a2d\u5b9a\u306a\u3057\u3067\u3001\u5229\u7528\u53ef\u80fd\u306a CPU \u30b3\u30a2\u9593\u3067\u30ef\u30fc\u30af\u30ed\u30fc\u30c9\u3092\u5206\u5272\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u30de\u30b7\u30f3\u306e\u529b\u3092\u6d3b\u7528\u3057\u307e\u3059\u3002</li> <li>\u30d9\u30af\u30c8\u30eb\u5316\u30af\u30a8\u30ea\u30a8\u30f3\u30b8\u30f3\uff1aApache Arrow \u3092\u4f7f\u7528\u3057\u3066\u3001\u5217\u6307\u5411\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u3067\u30af\u30a8\u30ea\u3092\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066\u51e6\u7406\u3057\u3001SIMD \u3092\u4f7f\u7528\u3057\u3066 CPU \u4f7f\u7528\u7387\u3092\u6700\u9069\u5316\u3057\u307e\u3059\u3002</li> </ul> <p>DataFrame \u3092\u77e5\u3089\u306a\u3044\u30e6\u30fc\u30b6\u30fc\u3078</p> <p>DataFrame \u306f\u3001\u30c7\u30fc\u30bf\u64cd\u4f5c\u304a\u3088\u3073\u5206\u6790\u306b\u4fbf\u5229\u306a2\u6b21\u5143\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\u884c\u3068\u5217\u306b\u30e9\u30d9\u30eb\u4ed8\u304d\u306e\u8ef8\u304c\u3042\u308a\u3001\u5404\u30ab\u30e9\u30e0\u306f\u7570\u306a\u308b\u30c7\u30fc\u30bf\u578b\u3092\u542b\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u30de\u30fc\u30b8\u3084\u96c6\u7d04\u306a\u3069\u306e\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u64cd\u4f5c\u304c\u305a\u3063\u3068\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u67d4\u8edf\u6027\u3068\u30c7\u30fc\u30bf\u306e\u4fdd\u7ba1\u304a\u3088\u3073\u53d6\u308a\u6271\u3044\u65b9\u6cd5\u304c\u76f4\u611f\u7684\u3067\u3042\u308b\u305f\u3081\u3001DataFrame \u306f\u73fe\u4ee3\u306e\u30c7\u30fc\u30bf\u5206\u6790\u3068\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3067\u307e\u3059\u307e\u3059\u4eba\u6c17\u304c\u9ad8\u307e\u3063\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"#_2","title":"\u54f2\u5b66","text":"<p>Polars \u306e\u76ee\u6a19\u306f\u3001\u4ee5\u4e0b\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p> <ul> <li>\u30de\u30b7\u30f3\u4e0a\u3067\u5229\u7528\u53ef\u80fd\u306a\u3059\u3079\u3066\u306e\u30b3\u30a2\u3092\u6d3b\u7528\u3057\u307e\u3059\u3002</li> <li>\u4e0d\u8981\u306a\u51e6\u7406/\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u30af\u30a8\u30ea\u3092\u6700\u9069\u5316\u3057\u307e\u3059\u3002</li> <li>\u5229\u7528\u53ef\u80fd\u306a RAM \u3088\u308a\u3082\u306f\u308b\u304b\u306b\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li>\u4e00\u8cab\u6027\u304c\u3042\u308a\u4e88\u6e2c\u53ef\u80fd\u306a API \u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</li> <li>\u53b3\u683c\u306a\u30b9\u30ad\u30fc\u30de\u306b\u6e96\u62e0\u3057\u3066\u3044\u307e\u3059\uff08\u30af\u30a8\u30ea\u5b9f\u884c\u524d\u306b\u30c7\u30fc\u30bf\u578b\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\u3002</li> </ul> <p>Polars \u306f Rust \u3067\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u306b\u3088\u308a C/C++ \u4e26\u307f\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5f97\u3089\u308c\u3001\u30af\u30a8\u30ea\u30a8\u30f3\u30b8\u30f3\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u91cd\u8981\u306a\u90e8\u5206\u3092\u5b8c\u5168\u306b\u5236\u5fa1\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"#_3","title":"\u4f8b","text":"Python Rust <p> <code>scan_csv</code> \u00b7 <code>filter</code> \u00b7 <code>group_by</code> \u00b7 <code>collect</code> <pre><code>import polars as pl\n\nq = (\n    pl.scan_csv(\"docs/data/iris.csv\")\n    .filter(pl.col(\"sepal_length\") &gt; 5)\n    .group_by(\"species\")\n    .agg(pl.all().sum())\n)\n\ndf = q.collect()\n</code></pre></p> <p> <code>LazyCsvReader</code> \u00b7 <code>filter</code> \u00b7 <code>group_by</code> \u00b7 <code>collect</code> \u00b7  Available on feature csv \u00b7  Available on feature streaming <pre><code>use polars::prelude::*;\n\nlet q = LazyCsvReader::new(\"docs/data/iris.csv\")\n    .has_header(true)\n    .finish()?\n    .filter(col(\"sepal_length\").gt(lit(5)))\n    .group_by(vec![col(\"species\")])\n    .agg([col(\"*\").sum()]);\n\nlet df = q.collect()?;\n</code></pre></p> <p>\u3088\u308a\u8a73\u7d30\u306a\u7d39\u4ecb\u306f\u6b21\u306e\u7ae0\u304b\u3089\u53c2\u7167\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"people/","title":"People","text":""},{"location":"_build/snippets/under_construction/","title":"Under construction","text":"<p> Under Construction </p> <p>This section is still under development. Want to help out? Consider contributing and making a pull request to our repository. Please read our contributing guide on how to proceed.</p>"},{"location":"api/","title":"API reference","text":"<p>The API reference contains detailed descriptions of all public functions and objects. It's the best place to look if you need information on a specific function.</p>"},{"location":"api/#python","title":"Python","text":"<p>The Python API reference is built using Sphinx. It's available in our docs.</p>"},{"location":"api/#rust","title":"Rust","text":"<p>The Rust API reference is built using Cargo. It's available on docs.rs.</p>"},{"location":"development/versioning/","title":"Versioning","text":""},{"location":"development/versioning/#version-changes","title":"Version changes","text":"<p>Polars adheres to the semantic versioning specification.</p> <p>As Polars has not released its <code>1.0.0</code> version yet, breaking releases lead to a minor version increase (e.g. from <code>0.18.15</code> to <code>0.19.0</code>), while all other releases increment the patch version (e.g. from <code>0.18.15</code> to <code>0.18.16</code>)</p>"},{"location":"development/versioning/#policy-for-breaking-changes","title":"Policy for breaking changes","text":"<p>Polars takes backwards compatibility seriously, but we are not afraid to change things if it leads to a better product.</p>"},{"location":"development/versioning/#philosophy","title":"Philosophy","text":"<p>We don't always get it right on the first try. We learn as we go along and get feedback from our users. Sometimes, we're a little too eager to get out a new feature and didn't ponder all the possible implications.</p> <p>If this happens, we correct our mistakes and introduce a breaking change. Most of the time, this is no big deal. Users get a deprecation warning, they do a quick search-and-replace in their code base, and that's that.</p> <p>At times, we run into an issue requires more effort on our user's part to fix. A change in the query engine can seriously impact the assumptions in a data pipeline. We do not make such changes lightly, but we will make them if we believe it makes Polars better.</p> <p>Freeing ourselves of past indiscretions is important to keep Polars moving forward. We know it takes time and energy for our users to keep up with new releases but, in the end, it benefits everyone for Polars to be the best product possible.</p>"},{"location":"development/versioning/#what-qualifies-as-a-breaking-change","title":"What qualifies as a breaking change","text":"<p>A breaking change occurs when an existing component of the public API is changed or removed.</p> <p>A feature is part of the public API if it is documented in the API reference.</p> <p>Examples of breaking changes:</p> <ul> <li>A deprecated function or method is removed.</li> <li>The default value of a parameter is changed.</li> <li>The outcome of a query has changed due to changes to the query engine.</li> </ul> <p>Examples of changes that are not considered breaking:</p> <ul> <li>An undocumented function is removed.</li> <li>The module path of a public class is changed.</li> <li>An optional parameter is added to an existing method.</li> </ul> <p>Bug fixes are not considered a breaking change, even though it may impact some users' workflows.</p>"},{"location":"development/versioning/#unstable-functionality","title":"Unstable functionality","text":"<p>Some parts of the public API are marked as unstable. You can recognize this functionality from the warning in the API reference, or from the warning issued when the configuration option <code>warn_unstable</code> is active. There are a number of reasons functionality may be marked as unstable:</p> <ul> <li>We are unsure about the exact API. The name, function signature, or implementation are likely to change in the future.</li> <li>The functionality is not tested extensively yet. Bugs may pop up when used in real-world scenarios.</li> <li>The functionality does not integrate well with the full Polars API. You may find it works in one context but not in another.</li> </ul> <p>Releasing functionality as unstable allows us to gather important feedback from users that use Polars in real-world scenarios. This helps us fine-tune things before giving it the final stamp of approval. Users are only interested in solid, well-tested functionality can avoid this part of the API.</p> <p>Functionality marked as unstable may change at any point without it being considered a breaking change.</p>"},{"location":"development/versioning/#deprecation-warnings","title":"Deprecation warnings","text":"<p>If we decide to introduce a breaking change, the existing behavior is deprecated if possible. For example, if we choose to rename a function, the new function is added alongside the old function, and using the old function will result in a deprecation warning.</p> <p>Not all changes can be deprecated nicely. A change to the query engine may have effects across a large part of the API. Such changes will not be warned for, but will be included in the changelog and the migration guide.</p> <p>Warning</p> <p>Breaking changes to the Rust API are not deprecated first, but will be listed in the changelog. Supporting deprecated functionality would slow down development too much at this point in time.</p>"},{"location":"development/versioning/#deprecation-period","title":"Deprecation period","text":"<p>As a rule, deprecated functionality is removed two breaking releases after the deprecation happens. For example:</p> <ul> <li>Before the release of <code>1.0.0</code>: a function deprecated in version <code>0.18.3</code> will be removed in version <code>0.20.0</code></li> <li>After the release of <code>1.0.0</code>: a function deprecated in version <code>1.2.3</code> will be removed in version <code>3.0.0</code></li> </ul> <p>This means that if your program does not raise any deprecation warnings, it should be mostly safe to upgrade to the next breaking release. As breaking releases happen about once every three months, this allows three to six months to adjust to any pending breaking changes.</p> <p>In some cases, we may decide to adjust the deprecation period. If retaining the deprecated functionality blocks other improvements to Polars, we may shorten the deprecation period to a single breaking release. This will be mentioned in the warning message. If the deprecation affects many users, we may extend the deprecation period.</p>"},{"location":"development/contributing/","title":"Overview","text":"<p>Thanks for taking the time to contribute! We appreciate all contributions, from reporting bugs to implementing new features. If you're unclear on how to proceed after reading this guide, please contact us on Discord.</p>"},{"location":"development/contributing/#reporting-bugs","title":"Reporting bugs","text":"<p>We use GitHub issues to track bugs and suggested enhancements. You can report a bug by opening a new issue. Use the appropriate issue type for the language you are using (Rust / Python).</p> <p>Before creating a bug report, please check that your bug has not already been reported, and that your bug exists on the latest version of Polars. If you find a closed issue that seems to report the same bug you're experiencing, open a new issue and include a link to the original issue in your issue description.</p> <p>Please include as many details as possible in your bug report. The information helps the maintainers resolve the issue faster.</p>"},{"location":"development/contributing/#suggesting-enhancements","title":"Suggesting enhancements","text":"<p>We use GitHub issues to track bugs and suggested enhancements. You can suggest an enhancement by opening a new feature request. Before creating an enhancement suggestion, please check that a similar issue does not already exist.</p> <p>Please describe the behavior you want and why, and provide examples of how Polars would be used if your feature were added.</p>"},{"location":"development/contributing/#contributing-to-the-codebase","title":"Contributing to the codebase","text":""},{"location":"development/contributing/#picking-an-issue","title":"Picking an issue","text":"<p>Pick an issue by going through the issue tracker and finding an issue you would like to work on. Feel free to pick any issue with an accepted label that is not already assigned. We use the help wanted label to indicate issues that are high on our wishlist.</p> <p>If you are a first time contributor, you might want to look for issues labeled good first issue. The Polars code base is quite complex, so starting with a small issue will help you find your way around!</p> <p>If you would like to take on an issue, please comment on the issue to let others know. You may use the issue to discuss possible solutions.</p>"},{"location":"development/contributing/#setting-up-your-local-environment","title":"Setting up your local environment","text":"<p>Polars development flow relies on both Rust and Python, which means setting up your local development environment is not trivial. If you run into problems, please contact us on Discord.</p> <p>Note that if you are a Windows user, the steps below might not work as expected; try developing using WSL. Under native Windows, you may have to manually copy the contents of <code>toolchain.toml</code> to <code>py-polars/toolchain.toml</code>, as Git for Windows may not correctly handle symbolic links.</p> <p>Start by forking the Polars repository, then clone your forked repository using <code>git</code>:</p> <pre><code>git clone https://github.com/&lt;username&gt;/polars.git\ncd polars\n</code></pre> <p>In order to work on Polars effectively, you will need Rust, Python, and dprint.</p> <p>First, install Rust using rustup. After the initial installation, you will also need to install the nightly toolchain:</p> <pre><code>rustup toolchain install nightly --component miri\n</code></pre> <p>Next, install Python, for example using pyenv. We recommend using the latest Python version (<code>3.12</code>). Make sure you deactivate any active virtual environments or conda environments, as the steps below will create a new virtual environment for Polars. You will need Python even if you intend to work on the Rust code only, as we rely on the Python tests to verify all functionality.</p> <p>Finally, install dprint. This is not strictly required, but it is recommended as we use it to autoformat certain file types.</p> <p>You can now check that everything works correctly by going into the <code>py-polars</code> directory and running the test suite (warning: this may be slow the first time you run it):</p> <pre><code>cd py-polars\nmake test\n</code></pre> <p>This will do a number of things:</p> <ul> <li>Use Python to create a virtual environment in the <code>.venv</code> folder.</li> <li>Use pip to install all Python dependencies for development, linting, and building documentation.</li> <li>Use Rust to compile and install Polars in your virtual environment. At least 8GB of RAM is recommended for this step to run smoothly.</li> <li>Use pytest to run the Python unittests in your virtual environment</li> </ul> <p>Check if linting also works correctly by running:</p> <pre><code>make pre-commit\n</code></pre> <p>Note that we do not actually use the pre-commit tool. We use the Makefile to conveniently run the following formatting and linting tools:</p> <ul> <li>ruff</li> <li>mypy</li> <li>rustfmt</li> <li>clippy</li> <li>dprint</li> </ul> <p>If this all runs correctly, you're ready to start contributing to the Polars codebase!</p>"},{"location":"development/contributing/#working-on-your-issue","title":"Working on your issue","text":"<p>Create a new git branch from the <code>main</code> branch in your local repository, and start coding!</p> <p>The Rust code is located in the <code>crates</code> directory, while the Python codebase is located in the <code>py-polars</code> directory. Both directories contain a <code>Makefile</code> with helpful commands. Most notably:</p> <ul> <li><code>make test</code> to run the test suite (see the test suite docs for more info)</li> <li><code>make pre-commit</code> to run autoformatting and linting</li> </ul> <p>Note that your work cannot be merged if these checks fail! Run <code>make help</code> to get a list of other helpful commands.</p> <p>Two other things to keep in mind:</p> <ul> <li>If you add code that should be tested, add tests.</li> <li>If you change the public API, update the documentation.</li> </ul>"},{"location":"development/contributing/#pull-requests","title":"Pull requests","text":"<p>When you have resolved your issue, open a pull request in the Polars repository. Please adhere to the following guidelines:</p> <ul> <li>Start your pull request title with a conventional commit tag. This helps us add your contribution to the right section of the changelog. We use the Angular convention. Scope can be <code>rust</code> and/or <code>python</code>, depending on your contribution.</li> <li>Use a descriptive title starting with an uppercase letter. This text will end up in the changelog.</li> <li>In the pull request description, link to the issue you were working on.</li> <li>Add any relevant information to the description that you think may help the maintainers review your code.</li> <li>Make sure your branch is rebased against the latest version of the <code>main</code> branch.</li> <li>Make sure all GitHub Actions checks pass.</li> </ul> <p>After you have opened your pull request, a maintainer will review it and possibly leave some comments. Once all issues are resolved, the maintainer will merge your pull request, and your work will be part of the next Polars release!</p> <p>Keep in mind that your work does not have to be perfect right away! If you are stuck or unsure about your solution, feel free to open a draft pull request and ask for help.</p>"},{"location":"development/contributing/#contributing-to-documentation","title":"Contributing to documentation","text":"<p>The most important components of Polars documentation are the user guide, the API references, and the database of questions on StackOverflow.</p>"},{"location":"development/contributing/#user-guide","title":"User guide","text":"<p>The user guide is maintained in the <code>docs/user-guide</code> folder. Before creating a PR first raise an issue to discuss what you feel is missing or could be improved.</p>"},{"location":"development/contributing/#building-and-serving-the-user-guide","title":"Building and serving the user guide","text":"<p>The user guide is built using MkDocs. You install the dependencies for building the user guide by running <code>make build</code> in the root of the repo.</p> <p>Activate the virtual environment and run <code>mkdocs serve</code> to build and serve the user guide, so you can view it locally and see updates as you make changes.</p>"},{"location":"development/contributing/#creating-a-new-user-guide-page","title":"Creating a new user guide page","text":"<p>Each user guide page is based on a <code>.md</code> markdown file. This file must be listed in <code>mkdocs.yml</code>.</p>"},{"location":"development/contributing/#adding-a-shell-code-block","title":"Adding a shell code block","text":"<p>To add a code block with code to be run in a shell with tabs for Python and Rust, use the following format:</p> <pre><code>=== \":fontawesome-brands-python: Python\"\n\n    ```shell\n    $ pip install fsspec\n    ```\n\n=== \":fontawesome-brands-rust: Rust\"\n\n    ```shell\n    $ cargo add aws_sdk_s3\n    ```\n</code></pre>"},{"location":"development/contributing/#adding-a-code-block","title":"Adding a code block","text":"<p>The snippets for Python and Rust code blocks are in the <code>docs/src/python/</code> and <code>docs/src/rust/</code> directories, respectively. To add a code snippet with Python or Rust code to a <code>.md</code> page, use the following format:</p> <pre><code>{{code_block('user-guide/io/cloud-storage','read_parquet',['read_parquet','read_csv'])}}\n</code></pre> <ul> <li>The first argument is a path to either or both files called <code>docs/src/python/user-guide/io/cloud-storage.py</code> and <code>docs/src/rust/user-guide/io/cloud-storage.rs</code>.</li> <li>The second argument is the name given at the start and end of each snippet in the <code>.py</code> or <code>.rs</code> file</li> <li>The third argument is a list of links to functions in the API docs. For each element of the list there must be a corresponding entry in <code>docs/_build/API_REFERENCE_LINKS.yml</code></li> </ul> <p>If the corresponding <code>.py</code> and <code>.rs</code> snippet files both exist then each snippet named in the second argument to <code>code_block</code> above must exist or the build will fail. An empty snippet should be added to the <code>.py</code> or <code>.rs</code> file if the snippet is not needed.</p> <p>Each snippet is formatted as follows:</p> <pre><code># --8&lt;-- [start:read_parquet]\nimport polars as pl\n\ndf = pl.read_parquet(\"file.parquet\")\n# --8&lt;-- [end:read_parquet]\n</code></pre> <p>The snippet is delimited by <code>--8&lt;-- [start:&lt;snippet_name&gt;]</code> and <code>--8&lt;-- [end:&lt;snippet_name&gt;]</code>. The snippet name must match the name given in the second argument to <code>code_block</code> above.</p>"},{"location":"development/contributing/#linting","title":"Linting","text":"<p>Before committing, install <code>dprint</code> (see above) and run <code>dprint fmt</code> from the <code>docs</code> directory to lint the markdown files.</p>"},{"location":"development/contributing/#api-reference","title":"API reference","text":"<p>Polars has separate API references for Rust and Python. These are generated directly from the codebase, so in order to contribute, you will have to follow the steps outlined in this section above.</p>"},{"location":"development/contributing/#rust","title":"Rust","text":"<p>Rust Polars uses <code>cargo doc</code> to build its documentation. Contributions to improve or clarify the API reference are welcome.</p>"},{"location":"development/contributing/#python","title":"Python","text":"<p>For the Python API reference, we always welcome good docstring examples. There are still parts of the API that do not have any code examples. This is a great way to start contributing to Polars!</p> <p>Note that we follow the numpydoc convention. Docstring examples should also follow the Black codestyle. From the <code>py-polars</code> directory, run <code>make fmt</code> to make sure your additions pass the linter, and run <code>make doctest</code> to make sure your docstring examples are valid.</p> <p>Polars uses Sphinx to build the API reference. This means docstrings in general should follow the reST format. If you want to build the API reference locally, go to the <code>py-polars/docs</code> directory and run <code>make html</code>. The resulting HTML files will be in <code>py-polars/docs/build/html</code>.</p> <p>New additions to the API should be added manually to the API reference by adding an entry to the correct <code>.rst</code> file in the <code>py-polars/docs/source/reference</code> directory.</p>"},{"location":"development/contributing/#stackoverflow","title":"StackOverflow","text":"<p>We use StackOverflow to create a database of high quality questions and answers that is searchable and remains up-to-date. There is a separate tag for each language:</p> <ul> <li>Python Polars</li> <li>Rust Polars</li> </ul> <p>Contributions in the form of well-formulated questions or answers are always welcome! If you add a new question, please notify us by adding a matching issue to our GitHub issue tracker.</p>"},{"location":"development/contributing/#release-flow","title":"Release flow","text":"<p>This section is intended for Polars maintainers.</p> <p>Polars releases Rust crates to crates.io and Python packages to PyPI.</p> <p>New releases are marked by an official GitHub release and an associated git tag. We utilize Release Drafter to automatically draft GitHub releases with release notes.</p>"},{"location":"development/contributing/#steps","title":"Steps","text":"<p>The steps for releasing a new Rust or Python version are similar. The release process is mostly automated through GitHub Actions, but some manual steps are required. Follow the steps below to release a new version.</p> <p>Start by bumping the version number in the source code:</p> <ol> <li>Check the releases page on GitHub and find the appropriate draft release. Note the version number associated with this release.</li> <li>Make sure your fork is up-to-date with the latest version of the main Polars repository, and create a new branch.</li> <li> <p>Bump the version number.</p> </li> <li> <p>Rust: Update the version number in all <code>Cargo.toml</code> files in the <code>polars</code> directory and subdirectories. You'll probably want to use some search/replace strategy, as there are quite a few crates that need to be updated.</p> </li> <li> <p>Python: Update the version number in <code>py-polars/Cargo.toml</code> to match the version of the draft release.</p> </li> <li> <p>From the <code>py-polars</code> directory, run <code>make build</code> to generate a new <code>Cargo.lock</code> file.</p> </li> <li>Create a new commit with all files added. The name of the commit should follow the format <code>release(&lt;language&gt;): &lt;Language&gt; Polars &lt;version-number&gt;</code>. For example: <code>release(python): Python Polars 0.16.1</code></li> <li>Push your branch and open a new pull request to the <code>main</code> branch of the main Polars repository.</li> <li>Wait for the GitHub Actions checks to pass, then squash and merge your pull request.</li> </ol> <p>Directly after merging your pull request, release the new version:</p> <ol> <li>Go to the release workflow (Python/Rust), click Run workflow in the top right, and click the green button. This will trigger the workflow, which will build all release artifacts and publish them.</li> <li>Wait for the workflow to finish, then check crates.io/PyPI/GitHub to verify that the new Polars release is now available.</li> </ol>"},{"location":"development/contributing/#troubleshooting","title":"Troubleshooting","text":"<p>It may happen that one or multiple release jobs fail. If so, you should first try to simply re-run the failed jobs from the GitHub Actions UI.</p> <p>If that doesn't help, you will have to figure out what's wrong and commit a fix. Once your fix has made it to the <code>main</code> branch, simply re-trigger the release workflow.</p>"},{"location":"development/contributing/#license","title":"License","text":"<p>Any contributions you make to this project will fall under the MIT License that covers the Polars project.</p>"},{"location":"development/contributing/ci/","title":"Continuous integration","text":"<p>Polars uses GitHub Actions as its continuous integration (CI) tool. The setup is reasonably complex, as far as CI setups go. This page explains some of the design choices.</p>"},{"location":"development/contributing/ci/#goal","title":"Goal","text":"<p>Overall, the CI suite aims to achieve the following:</p> <ul> <li>Enforce code correctness by running automated tests.</li> <li>Enforce code quality by running automated linting checks.</li> <li>Enforce code performance by running benchmark tests.</li> <li>Enforce that code is properly documented.</li> <li>Allow maintainers to easily publish new releases.</li> </ul> <p>We rely on a wide range of tools to achieve this for both the Rust and the Python code base, and thus a lot of checks are triggered on each pull request.</p> <p>It's entirely possible that you submit a relatively trivial fix that subsequently fails a bunch of checks. Do not despair - check the logs to see what went wrong and try to fix it. You can run the failing command locally to verify that everything works correctly. If you can't figure it out, ask a maintainer for help!</p>"},{"location":"development/contributing/ci/#design","title":"Design","text":"<p>The CI setup is designed with the following requirements in mind:</p> <ul> <li>Get feedback on each step individually. We want to avoid our test job being cancelled because a linting check failed, only to find out later that we also have a failing test.</li> <li>Get feedback on each check as quickly as possible. We want to be able to iterate quickly if it turns out our code does not pass some of the checks.</li> <li>Only run checks when they need to be run. A change to the Rust code does not warrant a linting check of the Python code, for example.</li> </ul> <p>This results in a modular setup with many separate workflows and jobs that rely heavily on caching.</p>"},{"location":"development/contributing/ci/#modular-setup","title":"Modular setup","text":"<p>The repository consists of two main parts: the Rust code base and the Python code base. Both code bases are interdependent: Rust code is tested through Python tests, and the Python code relies on the Rust implementation for most functionality.</p> <p>To make sure CI jobs are only run when they need to be run, each workflow is triggered only when relevant files are modified.</p>"},{"location":"development/contributing/ci/#caching","title":"Caching","text":"<p>The main challenge is that the Rust code base for Polars is quite large, and consequently, compiling the project from scratch is slow. This is addressed by caching the Rust build artifacts.</p> <p>However, since GitHub Actions does not allow sharing caches between feature branches, we need to run the workflows on the main branch as well - at least the part that builds the Rust cache. This leads to many workflows that trigger both on pull request AND on push to the main branch, with individual steps of jobs enabled or disabled based on the branch it runs on.</p> <p>Care must also be taken not to exceed the maximum cache space of 10Gb allotted to open source GitHub repositories. Hence we do not do any caching on feature branches - we always use the cache available from the main branch. This also avoids any extra time that would be required to store the cache.</p>"},{"location":"development/contributing/ci/#releases","title":"Releases","text":"<p>The release jobs for Rust and Python are triggered manually. Refer to the contributing guide for the full release process.</p>"},{"location":"development/contributing/code-style/","title":"Code style","text":"<p>This page contains some guidance on code style.</p> <p>Info</p> <p>Additional information will be added to this page later.</p>"},{"location":"development/contributing/code-style/#rust","title":"Rust","text":""},{"location":"development/contributing/code-style/#naming-conventions","title":"Naming conventions","text":"<p>Naming conventions for variables:</p> <pre><code>let s: Series = ...\nlet ca: ChunkedArray = ...\nlet arr: ArrayRef = ...\nlet arr: PrimitiveArray = ...\nlet dtype: DataType = ...\nlet data_type: ArrowDataType = ...\n</code></pre>"},{"location":"development/contributing/code-style/#code-example","title":"Code example","text":"<pre><code>use std::ops::Add;\n\nuse polars::export::arrow::array::*;\nuse polars::export::arrow::compute::arity::binary;\nuse polars::export::arrow::types::NativeType;\nuse polars::prelude::*;\nuse polars_core::utils::{align_chunks_binary, combine_validities_or};\nuse polars_core::with_match_physical_numeric_polars_type;\n\n// Prefer to do the compute closest to the arrow arrays.\n// this will tend to be faster as iterators can work directly on slices and don't have\n// to go through boxed traits\nfn compute_kernel&lt;T&gt;(arr_1: &amp;PrimitiveArray&lt;T&gt;, arr_2: &amp;PrimitiveArray&lt;T&gt;) -&gt; PrimitiveArray&lt;T&gt;\nwhere\n    T: Add&lt;Output = T&gt; + NativeType,\n{\n    // process the null data separately\n    // this saves an expensive branch and bitoperation when iterating\n    let validity_1 = arr_1.validity();\n    let validity_2 = arr_2.validity();\n\n    let validity = combine_validities_or(validity_1, validity_2);\n\n    // process the numerical data as if there were no validities\n    let values_1: &amp;[T] = arr_1.values().as_slice();\n    let values_2: &amp;[T] = arr_2.values().as_slice();\n\n    let values = values_1\n        .iter()\n        .zip(values_2)\n        .map(|(a, b)| *a + *b)\n        .collect::&lt;Vec&lt;_&gt;&gt;();\n\n    PrimitiveArray::from_data_default(values.into(), validity)\n}\n\n// Same kernel as above, but uses the `binary` abstraction. Prefer this,\n#[allow(dead_code)]\nfn compute_kernel2&lt;T&gt;(arr_1: &amp;PrimitiveArray&lt;T&gt;, arr_2: &amp;PrimitiveArray&lt;T&gt;) -&gt; PrimitiveArray&lt;T&gt;\nwhere\n    T: Add&lt;Output = T&gt; + NativeType,\n{\n    binary(arr_1, arr_2, arr_1.data_type().clone(), |a, b| a + b)\n}\n\nfn compute_chunked_array_2_args&lt;T: PolarsNumericType&gt;(\n    ca_1: &amp;ChunkedArray&lt;T&gt;,\n    ca_2: &amp;ChunkedArray&lt;T&gt;,\n) -&gt; ChunkedArray&lt;T&gt; {\n    // This ensures both ChunkedArrays have the same number of chunks with the\n    // same offset and the same length.\n    let (ca_1, ca_2) = align_chunks_binary(ca_1, ca_2);\n    let chunks = ca_1\n        .downcast_iter()\n        .zip(ca_2.downcast_iter())\n        .map(|(arr_1, arr_2)| compute_kernel(arr_1, arr_2));\n    ChunkedArray::from_chunk_iter(ca_1.name(), chunks)\n}\n\npub fn compute_expr_2_args(arg_1: &amp;Series, arg_2: &amp;Series) -&gt; Series {\n    // Dispatch the numerical series to `compute_chunked_array_2_args`.\n    with_match_physical_numeric_polars_type!(arg_1.dtype(), |$T| {\n        let ca_1: &amp;ChunkedArray&lt;$T&gt; = arg_1.as_ref().as_ref().as_ref();\n        let ca_2: &amp;ChunkedArray&lt;$T&gt; = arg_2.as_ref().as_ref().as_ref();\n        compute_chunked_array_2_args(ca_1, ca_2).into_series()\n    })\n}\n</code></pre>"},{"location":"development/contributing/ide/","title":"IDE configuration","text":"<p>Using an integrated development environments (IDE) and configuring it properly will help you work on Polars more effectively. This page contains some recommendations for configuring popular IDEs.</p>"},{"location":"development/contributing/ide/#visual-studio-code","title":"Visual Studio Code","text":"<p>Make sure to configure VSCode to use the virtual environment created by the Makefile.</p>"},{"location":"development/contributing/ide/#extensions","title":"Extensions","text":"<p>The extensions below are recommended.</p>"},{"location":"development/contributing/ide/#rust-analyzer","title":"rust-analyzer","text":"<p>If you work on the Rust code at all, you will need the rust-analyzer extension. This extension provides code completion for the Rust code.</p> <p>For it to work well for the Polars code base, add the following settings to your <code>.vscode/settings.json</code>:</p> <pre><code>{\n    \"rust-analyzer.cargo.features\": \"all\",\n}\n</code></pre>"},{"location":"development/contributing/ide/#ruff","title":"Ruff","text":"<p>The Ruff extension will help you conform to the formatting requirements of the Python code. We use both the Ruff linter and formatter. It is recommended to configure the extension to use the Ruff installed in your environment. This will make it use the correct Ruff version and configuration.</p> <pre><code>{\n    \"ruff.importStrategy\": \"fromEnvironment\",\n}\n</code></pre>"},{"location":"development/contributing/ide/#codelldb","title":"CodeLLDB","text":"<p>The CodeLLDB extension is useful for debugging Rust code. You can also debug Rust code called from Python (see section below).</p>"},{"location":"development/contributing/ide/#debugging","title":"Debugging","text":"<p>Due to the way that Python and Rust interoperate, debugging the Rust side of development from Python calls can be difficult. This guide shows how to set up a debugging environment that makes debugging Rust code called from a Python script painless.</p>"},{"location":"development/contributing/ide/#preparation","title":"Preparation","text":"<p>Start by installing the CodeLLDB extension (see above). Then add the following two configurations to your <code>launch.json</code> file. This file is usually found in the <code>.vscode</code> folder of your project root. See the official VSCode documentation for more information about the <code>launch.json</code> file.</p> <code>launch.json</code> <pre><code>{\n    \"configurations\": [\n        {\n            \"name\": \"Debug Rust/Python\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceFolder}/py-polars/debug/launch.py\",\n            \"args\": [\n                \"${file}\"\n            ],\n            \"console\": \"internalConsole\",\n            \"justMyCode\": true,\n            \"serverReadyAction\": {\n                \"pattern\": \"pID = ([0-9]+)\",\n                \"action\": \"startDebugging\",\n                \"name\": \"Rust LLDB\"\n            }\n        },\n        {\n            \"name\": \"Rust LLDB\",\n            \"pid\": \"0\",\n            \"type\": \"lldb\",\n            \"request\": \"attach\",\n            \"program\": \"${workspaceFolder}/py-polars/.venv/bin/python\",\n            \"stopOnEntry\": false,\n            \"sourceLanguages\": [\n                \"rust\"\n            ],\n            \"presentation\": {\n                \"hidden\": true\n            }\n        }\n    ]\n}\n</code></pre> <p>Info</p> <p>On some systems, the LLDB debugger will not attach unless ptrace protection is disabled. To disable, run the following command:</p> <pre><code>echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope\n</code></pre>"},{"location":"development/contributing/ide/#running-the-debugger","title":"Running the debugger","text":"<ol> <li> <p>Create a Python script containing Polars code. Ensure that your virtual environment is activated.</p> </li> <li> <p>Set breakpoints in any <code>.rs</code> or <code>.py</code> file.</p> </li> <li> <p>In the <code>Run and Debug</code> panel on the left, select <code>Debug Rust/Python</code> from the drop-down menu on top and click the <code>Start Debugging</code> button.</p> </li> </ol> <p>At this point, your debugger should stop on breakpoints in any <code>.rs</code> file located within the codebase.</p>"},{"location":"development/contributing/ide/#details","title":"Details","text":"<p>The debugging feature runs via the specially-designed VSCode launch configuration shown above. The initial Python debugger is launched using a special launch script located at <code>py-polars/debug/launch.py</code> and passes the name of the script to be debugged (the target script) as an input argument. The launch script determines the process ID, writes this value into the <code>launch.json</code> configuration file, compiles the target script and runs it in the current environment. At this point, a second (Rust) debugger is attached to the Python debugger. The result is two simultaneous debuggers operating on the same running instance. Breakpoints in the Python code will stop on the Python debugger and breakpoints in the Rust code will stop on the Rust debugger.</p>"},{"location":"development/contributing/ide/#pycharm-rustrover-clion","title":"PyCharm / RustRover / CLion","text":"<p>Info</p> <p>More information needed.</p>"},{"location":"development/contributing/test/","title":"Test suite","text":"<p>Info</p> <p>Additional information on the Rust test suite will be added to this page later.</p> <p>The <code>py-polars/tests</code> folder contains the main Polars test suite. This page contains some information on the various components of the test suite, as well as guidelines for writing new tests.</p> <p>The test suite contains four main components, each confined to their own folder: unit tests, parametric tests, benchmark tests, and doctests.</p> <p>Note that this test suite is indirectly responsible for testing Rust Polars as well. The Rust test suite is kept small to reduce compilation times. A lot of the Rust functionality is tested here instead.</p>"},{"location":"development/contributing/test/#unit-tests","title":"Unit tests","text":"<p>The <code>unit</code> folder contains all regular unit tests. These tests are intended to make sure all Polars functionality works as intended.</p>"},{"location":"development/contributing/test/#running-unit-tests","title":"Running unit tests","text":"<p>Run unit tests by running <code>make test</code> from the <code>py-polars</code> folder. This will compile the Rust bindings and then run the unit tests.</p> <p>If you're working in the Python code only, you can avoid recompiling every time by simply running <code>pytest</code> instead from your virtual environment.</p> <p>By default, slow tests are skipped. Slow tests are marked as such using a custom pytest marker. If you wish to run slow tests, run <code>pytest -m slow</code>. Or run <code>pytest -m \"\"</code> to run all tests, regardless of marker.</p> <p>Tests can be run in parallel by running <code>pytest -n auto</code>. The parallelization is handled by <code>pytest-xdist</code>.</p>"},{"location":"development/contributing/test/#writing-unit-tests","title":"Writing unit tests","text":"<p>Whenever you add new functionality, you should also add matching unit tests. Add your tests to appropriate test module in the <code>unit</code> folder. Some guidelines to keep in mind:</p> <ul> <li>Try to fully cover all possible inputs and edge cases you can think of.</li> <li>Utilize pytest tools like <code>fixture</code> and <code>parametrize</code> where appropriate.</li> <li>Since many tests will require some data to be defined first, it can be efficient to run multiple checks in a single test. This can also be addressed using pytest fixtures.</li> <li>Unit tests should not depend on external factors, otherwise test parallelization will break.</li> </ul>"},{"location":"development/contributing/test/#parametric-tests","title":"Parametric tests","text":"<p>The <code>parametric</code> folder contains parametric tests written using the Hypothesis framework. These tests are intended to find and test edge cases by generating many random datapoints.</p>"},{"location":"development/contributing/test/#running-parametric-tests","title":"Running parametric tests","text":"<p>Run parametric tests by running <code>pytest -m hypothesis</code>.</p> <p>Note that parametric tests are excluded by default when running <code>pytest</code>. You must explicitly specify <code>-m hypothesis</code> to run them.</p> <p>These tests will be included when calculating test coverage, and will also be run as part of the <code>make test-all</code> make command.</p>"},{"location":"development/contributing/test/#doctests","title":"Doctests","text":"<p>The <code>docs</code> folder contains a script for running <code>doctest</code>. This folder does not contain any actual tests - rather, the script checks all docstrings in the Polars package for <code>Examples</code> sections, runs the code examples, and verifies the output.</p> <p>The aim of running <code>doctest</code> is to make sure the <code>Examples</code> sections in our docstrings are valid and remain up-to-date with code changes.</p>"},{"location":"development/contributing/test/#running-doctest","title":"Running <code>doctest</code>","text":"<p>To run the <code>doctest</code> module, run <code>make doctest</code> from the <code>py-polars</code> folder. You can also run the script directly from your virtual environment.</p> <p>Note that doctests are not run using pytest. While pytest does have the capability to run doc examples, configuration options are too limited for our purposes.</p> <p>Doctests will not count towards test coverage. They are not a substitute for unit tests, but rather intended to convey the intended use of the Polars API to the user.</p>"},{"location":"development/contributing/test/#writing-doc-examples","title":"Writing doc examples","text":"<p>Almost all classes/methods/functions that are part of Polars' public API should include code examples in their docstring. These examples help users understand basic usage and allow us to illustrate more advanced concepts as well. Some guidelines for writing a good docstring <code>Examples</code> section:</p> <ul> <li>Start with a minimal example that showcases the default functionality.</li> <li>Showcase the effect of its parameters.</li> <li>Showcase any special interactions when combined with other code.</li> <li>Keep it succinct and avoid multiple examples showcasing the same thing.</li> </ul> <p>There are many great docstring examples already, just check other code if you need inspiration!</p> <p>In addition to the regular options available when writing doctests, the script configuration allows for a new <code>IGNORE_RESULT</code> directive. Use this directive if you want to ensure the code runs, but the output may be random by design or not interesting to check.</p> <pre><code>&gt;&gt;&gt; df.sample(n=2)  # doctest: +IGNORE_RESULT\n</code></pre>"},{"location":"development/contributing/test/#benchmark-tests","title":"Benchmark tests","text":"<p>The <code>benchmark</code> folder contains code for running various benchmark tests. The aim of this part of the test suite is to spot performance regressions in the code, and to verify that Polars functionality works as expected when run on a release build or at a larger scale.</p> <p>Polars uses CodSpeed for tracking the performance of the benchmark tests.</p>"},{"location":"development/contributing/test/#generating-data","title":"Generating data","text":"<p>For most tests, a relatively large dataset must be generated first. This is done as part of the <code>pytest</code> setup process.</p> <p>The data generation logic was taken from the H2O.ai database benchmark, which is the foundation for many of the benchmark tests.</p>"},{"location":"development/contributing/test/#running-the-benchmark-tests","title":"Running the benchmark tests","text":"<p>The benchmark tests can be run using pytest. Run <code>pytest -m benchmark --durations 0 -v</code> to run these tests and report run duration.</p> <p>Note that benchmark tests are excluded by default when running <code>pytest</code>. You must explicitly specify <code>-m benchmark</code> to run them. They will also be excluded when calculating test coverage.</p> <p>These tests will be run as part of the <code>make test-all</code> make command.</p>"},{"location":"releases/changelog/","title":"Changelog","text":"<p>Polars uses GitHub to manage both Python and Rust releases.</p> <p>Refer to our GitHub releases page for the changelog associated with each new release.</p>"},{"location":"releases/upgrade/","title":"About","text":"<p>Polars releases an upgrade guide alongside each breaking release. This guide is intended to help you upgrade from an older Polars version to the new version.</p> <p>Each guide contains all breaking changes that were not previously deprecated, as well as any significant new deprecations.</p> <p>A full list of all changes is available in the changelog.</p> <p>Tip</p> <p>It can be useful to upgrade to the latest non-breaking version before upgrading to a new breaking version. This way, you can run your code and address any deprecation warnings. The upgrade to the new breaking version should then go much more smoothly!</p> <p>Tip</p> <p>One of our maintainers has created a tool for automatically upgrading your Polars code to a later version. It's based on the well-known pyupgrade tool. Try out polars-upgrade and let us know what you think!</p> <p>Note</p> <p>There are no upgrade guides yet for Rust releases. These will be added once the rate of breaking changes to the Rust API slows down and a deprecation policy is added.</p>"},{"location":"releases/upgrade/0.19/","title":"Version 0.19","text":""},{"location":"releases/upgrade/0.19/#breaking-changes","title":"Breaking changes","text":""},{"location":"releases/upgrade/0.19/#aggregation-functions-no-longer-support-horizontal-computation","title":"Aggregation functions no longer support horizontal computation","text":"<p>This impacts aggregation functions like <code>sum</code>, <code>min</code>, and <code>max</code>. These functions were overloaded to support both vertical and horizontal computation. Recently, new dedicated functionality for horizontal computation was released, and horizontal computation was deprecated.</p> <p>Restore the old behavior by using the horizontal variant, e.g. <code>sum_horizontal</code>.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; df = pl.DataFrame({'a': [1, 2], 'b': [11, 12]})\n&gt;&gt;&gt; df.select(pl.sum('a', 'b'))  # horizontal computation\nshape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 sum \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 12  \u2502\n\u2502 14  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; df = pl.DataFrame({'a': [1, 2], 'b': [11, 12]})\n&gt;&gt;&gt; df.select(pl.sum('a', 'b'))  # vertical computation\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3   \u2506 23  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"releases/upgrade/0.19/#update-to-all-any","title":"Update to <code>all</code> / <code>any</code>","text":"<p><code>all</code> will now ignore null values by default, rather than treat them as <code>False</code>.</p> <p>For both <code>any</code> and <code>all</code>, the <code>drop_nulls</code> parameter has been renamed to <code>ignore_nulls</code> and is now keyword-only. Also fixed an issue when setting this parameter to <code>False</code> would erroneously result in <code>None</code> output in some cases.</p> <p>To restore the old behavior, set <code>ignore_nulls</code> to <code>False</code> and check for <code>None</code> output.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; pl.Series([True, None]).all()\nFalse\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; pl.Series([True, None]).all()\nTrue\n</code></pre>"},{"location":"releases/upgrade/0.19/#improved-error-types-for-many-methods","title":"Improved error types for many methods","text":"<p>Improving our error messages is an ongoing effort. We did a sweep of our Python code base and made many improvements to error messages and error types. Most notably, many <code>ValueError</code>s were changed to <code>TypeError</code>s.</p> <p>If your code relies on handling Polars exceptions, you may have to make some adjustments.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; pl.Series(values=15)\n...\nValueError: Series constructor called with unsupported type; got 'int'\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; pl.Series(values=15)\n...\nTypeError: Series constructor called with unsupported type 'int' for the `values` parameter\n</code></pre>"},{"location":"releases/upgrade/0.19/#updates-to-expression-input-parsing","title":"Updates to expression input parsing","text":"<p>Methods like <code>select</code> and <code>with_columns</code> accept one or more expressions. But they also accept strings, integers, lists, and other inputs that we try to interpret as expressions. We updated our internal logic to parse inputs more consistently.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; pl.DataFrame({'a': [1, 2]}).with_columns(None)\nshape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2502\n\u2502 2   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; pl.DataFrame({'a': [1, 2]}).with_columns(None)\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 literal \u2502\n\u2502 --- \u2506 ---     \u2502\n\u2502 i64 \u2506 null    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 null    \u2502\n\u2502 2   \u2506 null    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"releases/upgrade/0.19/#shuffle-sample-now-use-an-internal-polars-seed","title":"<code>shuffle</code> / <code>sample</code> now use an internal Polars seed","text":"<p>If you used the built-in Python <code>random.seed</code> function to control the randomness of Polars expressions, this will no longer work. Instead, use the new <code>set_random_seed</code> function.</p> <p>Example</p> <p>Before:</p> <pre><code>import random\n\nrandom.seed(1)\n</code></pre> <p>After:</p> <pre><code>import polars as pl\n\npl.set_random_seed(1)\n</code></pre>"},{"location":"releases/upgrade/0.19/#deprecations","title":"Deprecations","text":"<p>Creating a consistent and intuitive API is hard; finding the right name for each function, method, and parameter might be the hardest part. The new version comes with several naming changes, and you will most likely run into deprecation warnings when upgrading to <code>0.19</code>.</p> <p>If you want to upgrade without worrying about deprecation warnings right now, you can add the following snippet to your code:</p> <pre><code>import warnings\n\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n</code></pre>"},{"location":"releases/upgrade/0.19/#groupby-renamed-to-group_by","title":"<code>groupby</code> renamed to <code>group_by</code>","text":"<p>This is not a change we make lightly, as it will impact almost all our users. But \"group by\" is really two different words, and our naming strategy dictates that these should be separated by an underscore.</p> <p>Most likely, a simple search and replace will be enough to take care of this update:</p> <ul> <li>Search: <code>.groupby(</code></li> <li>Replace: <code>.group_by(</code></li> </ul>"},{"location":"releases/upgrade/0.19/#apply-renamed-to-map_","title":"<code>apply</code> renamed to <code>map_*</code>","text":"<p><code>apply</code> is probably the most misused part of our API. Many Polars users come from pandas, where <code>apply</code> has a completely different meaning.</p> <p>We now consolidate all our functionality for user-defined functions under the name <code>map</code>. This results in the following renaming:</p> Before After <code>Series/Expr.apply</code> <code>map_elements</code> <code>Series/Expr.rolling_apply</code> <code>rolling_map</code> <code>DataFrame.apply</code> <code>map_rows</code> <code>GroupBy.apply</code> <code>map_groups</code> <code>apply</code> <code>map_groups</code> <code>map</code> <code>map_batches</code>"},{"location":"releases/upgrade/0.20/","title":"Version 0.20","text":""},{"location":"releases/upgrade/0.20/#breaking-changes","title":"Breaking changes","text":""},{"location":"releases/upgrade/0.20/#change-default-join-behavior-with-regard-to-null-values","title":"Change default <code>join</code> behavior with regard to null values","text":"<p>Previously, null values in the join key were considered a value like any other value. This meant that null values in the left frame would be joined with null values in the right frame. This is expensive and does not match default behavior in SQL.</p> <p>Default behavior has now been changed to ignore null values in the join key. The previous behavior can be retained by setting <code>join_nulls=True</code>.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; df1 = pl.DataFrame({\"a\": [1, 2, None], \"b\": [4, 4, 4]})\n&gt;&gt;&gt; df2 = pl.DataFrame({\"a\": [None, 2, 3], \"c\": [5, 5, 5]})\n&gt;&gt;&gt; df1.join(df2, on=\"a\", how=\"inner\")\nshape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 c   \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 null \u2506 4   \u2506 5   \u2502\n\u2502 2    \u2506 4   \u2506 5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; df1.join(df2, on=\"a\", how=\"inner\")\nshape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 c   \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2   \u2506 4   \u2506 5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df1.join(df2, on=\"a\", how=\"inner\", join_nulls=True)  # Keeps previous behavior\nshape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 c   \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 null \u2506 4   \u2506 5   \u2502\n\u2502 2    \u2506 4   \u2506 5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"releases/upgrade/0.20/#preserve-left-and-right-join-keys-in-outer-joins","title":"Preserve left and right join keys in outer joins","text":"<p>Previously, the result of an outer join did not contain the join keys of the left and right frames. Rather, it contained a coalesced version of the left key and right key. This loses information and does not conform to default SQL behavior.</p> <p>The behavior has been changed to include the original join keys. Name clashes are solved by appending a suffix (<code>_right</code> by default) to the right join key name. The previous behavior can be retained by setting <code>how=\"outer_coalesce\"</code>.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; df1 = pl.DataFrame({\"L1\": [\"a\", \"b\", \"c\"], \"L2\": [1, 2, 3]})\n&gt;&gt;&gt; df2 = pl.DataFrame({\"L1\": [\"a\", \"c\", \"d\"], \"R2\": [7, 8, 9]})\n&gt;&gt;&gt; df1.join(df2, on=\"L1\", how=\"outer\")\nshape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 L1  \u2506 L2   \u2506 R2   \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2506 7    \u2502\n\u2502 c   \u2506 3    \u2506 8    \u2502\n\u2502 d   \u2506 null \u2506 9    \u2502\n\u2502 b   \u2506 2    \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; df1.join(df2, on=\"L1\", how=\"outer\")\nshape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 L1   \u2506 L2   \u2506 L1_right \u2506 R2   \u2502\n\u2502 ---  \u2506 ---  \u2506 ---      \u2506 ---  \u2502\n\u2502 str  \u2506 i64  \u2506 str      \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a    \u2506 1    \u2506 a        \u2506 7    \u2502\n\u2502 b    \u2506 2    \u2506 null     \u2506 null \u2502\n\u2502 c    \u2506 3    \u2506 c        \u2506 8    \u2502\n\u2502 null \u2506 null \u2506 d        \u2506 9    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df1.join(df2, on=\"a\", how=\"outer_coalesce\")  # Keeps previous behavior\nshape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 L1  \u2506 L2   \u2506 R2   \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1    \u2506 7    \u2502\n\u2502 c   \u2506 3    \u2506 8    \u2502\n\u2502 d   \u2506 null \u2506 9    \u2502\n\u2502 b   \u2506 2    \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"releases/upgrade/0.20/#count-now-ignores-null-values","title":"<code>count</code> now ignores null values","text":"<p>The <code>count</code> method for <code>Expr</code> and <code>Series</code> now ignores null values. Use <code>len</code> to get the count with null values included.</p> <p>Note that <code>pl.count()</code> and <code>group_by(...).count()</code> are unchanged. These count the number of rows in the context, so nulls are not applicable in the same way.</p> <p>This brings behavior more in line with the SQL standard, where <code>COUNT(col)</code> ignores null values but <code>COUNT(*)</code> counts rows regardless of null values.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, None]})\n&gt;&gt;&gt; df.select(pl.col(\"a\").count())\nshape: (1, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; df.select(pl.col(\"a\").count())\nshape: (1, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df.select(pl.col(\"a\").len())  # Mirrors previous behavior\nshape: (1, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"releases/upgrade/0.20/#nan-values-are-now-considered-equal","title":"<code>NaN</code> values are now considered equal","text":"<p>Floating point <code>NaN</code> values were treated as unequal across Polars operations. This has been corrected to better match user expectation and existing standards.</p> <p>While this is considered a bug fix, it is included in this guide in order to draw attention to possible impact on user workflows that may contain <code>NaN</code> values.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; s = pl.Series([1.0, float(\"nan\"), float(\"inf\")])\n&gt;&gt;&gt; s == s\nshape: (3,)\nSeries: '' [bool]\n[\n        true\n        false\n        true\n]\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; s == s\nshape: (3,)\nSeries: '' [bool]\n[\n        true\n        true\n        true\n]\n</code></pre>"},{"location":"releases/upgrade/0.20/#assertion-utils-updates-to-exact-checking-and-nan-equality","title":"Assertion utils updates to exact checking and <code>NaN</code> equality","text":"<p>The assertion utility functions <code>assert_frame_equal</code> and <code>assert_series_equal</code> would use the tolerance parameters <code>atol</code> and <code>rtol</code> to do approximate checking, unless <code>check_exact</code> was set to <code>True</code>. This could lead to some surprising behavior, as integers are generally thought of as exact values. Integer values are now always checked exactly. To do inexact checking, convert to float first.</p> <p>Additionally, the <code>nans_compare_equal</code> parameter has been removed and <code>NaN</code> values are now always considered equal, which was the previous default behavior. This parameter had previously been deprecated but has been removed before the end of the standard deprecation period to facilitate the change to <code>NaN</code> equality.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; from polars.testing import assert_frame_equal\n&gt;&gt;&gt; df1 = pl.DataFrame({\"id\": [123456]})\n&gt;&gt;&gt; df2 = pl.DataFrame({\"id\": [123457]})\n&gt;&gt;&gt; assert_frame_equal(df1, df2)  # Passes\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; assert_frame_equal(df1, df2)\n...\nAssertionError: DataFrames are different (value mismatch for column 'id')\n[left]:  [123456]\n[right]: [123457]\n</code></pre>"},{"location":"releases/upgrade/0.20/#allow-all-datatype-objects-to-be-instantiated","title":"Allow all <code>DataType</code> objects to be instantiated","text":"<p>Polars data types are subclasses of the <code>DataType</code> class. We had a 'hack' in place that automatically converted data types instantiated without any arguments to the <code>class</code>, rather than actually instantiating it. The idea was to allow specifying data types as <code>Int64</code> rather than <code>Int64()</code>, which is more succinct. However, this caused some unexpected behavior when working directly with data type objects, especially as there was a discrepancy with data types like <code>Datetime</code> which will be instantiated in many cases.</p> <p>Going forward, instantiating a data type will always return an instance of that class. Both classes an instances are handled by Polars, so the previous short syntax is still available. Methods that return data types like <code>Series.dtype</code> and <code>DataFrame.schema</code> now always return instantiated data types objects.</p> <p>You may have to update some of your data type checks if you were not already using the equality operator (<code>==</code>), as well as update some type hints.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; s = pl.Series([1, 2, 3], dtype=pl.Int8)\n&gt;&gt;&gt; s.dtype == pl.Int8\nTrue\n&gt;&gt;&gt; s.dtype is pl.Int8\nTrue\n&gt;&gt;&gt; isinstance(s.dtype, pl.Int8)\nFalse\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; s.dtype == pl.Int8\nTrue\n&gt;&gt;&gt; s.dtype is pl.Int8\nFalse\n&gt;&gt;&gt; isinstance(s.dtype, pl.Int8)\nTrue\n</code></pre>"},{"location":"releases/upgrade/0.20/#update-constructors-for-decimal-and-array-data-types","title":"Update constructors for <code>Decimal</code> and <code>Array</code> data types","text":"<p>The data types <code>Decimal</code> and <code>Array</code> have had their parameters switched around. The new constructors should more closely match user expectations.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; pl.Array(2, pl.Int16)\nArray(Int16, 2)\n&gt;&gt;&gt; pl.Decimal(5, 10)\nDecimal(precision=10, scale=5)\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; pl.Array(pl.Int16, 2)\nArray(Int16, width=2)\n&gt;&gt;&gt; pl.Decimal(10, 5)\nDecimal(precision=10, scale=5)\n</code></pre>"},{"location":"releases/upgrade/0.20/#datatypeis_nested-changed-from-a-property-to-a-class-method","title":"<code>DataType.is_nested</code> changed from a property to a class method","text":"<p>This is a minor change, but a very important one to properly update. Failure to update accordingly may result in faulty logic, as Python will evaluate the method to <code>True</code>. For example, <code>if dtype.is_nested</code> will now evaluate to <code>True</code> regardless of the data type, because it returns the method, which Python considers truthy.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; pl.List(pl.Int8).is_nested\nTrue\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; pl.List(pl.Int8).is_nested()\nTrue\n</code></pre>"},{"location":"releases/upgrade/0.20/#smaller-integer-data-types-for-datetime-components-dtmonth-dtweek","title":"Smaller integer data types for datetime components <code>dt.month</code>, <code>dt.week</code>","text":"<p>Most datetime components such as <code>month</code> and <code>week</code> would previously return a <code>UInt32</code> type. This has been updated to the smallest appropriate signed integer type. This should reduce memory consumption.</p> Method Dtype old Dtype new year i32 i32 iso_year i32 i32 quarter u32 i8 month u32 i8 week u32 i8 day u32 i8 weekday u32 i8 ordinal_day u32 i16 hour u32 i8 minute u32 i8 second u32 i8 millisecond u32 i32* microsecond u32 i32 nanosecond u32 i32 <p>*Technically, <code>millisecond</code> can be an <code>i16</code>. This may be updated in the future.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; from datetime import date\n&gt;&gt;&gt; s = pl.Series([date(2023, 12, 31), date(2024, 1, 1)])\n&gt;&gt;&gt; s.dt.month()\nshape: (2,)\nSeries: '' [u32]\n[\n        12\n        1\n]\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; s.dt.month()\nshape: (2,)\nSeries: '' [u8]\n[\n        12\n        1\n]\n</code></pre>"},{"location":"releases/upgrade/0.20/#series-now-defaults-to-null-data-type-when-no-data-is-present","title":"Series now defaults to <code>Null</code> data type when no data is present","text":"<p>This replaces the previous behavior of initializing as a <code>Float32</code> type.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; pl.Series(\"a\", [None])\nshape: (1,)\nSeries: 'a' [f32]\n[\n        null\n]\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; pl.Series(\"a\", [None])\nshape: (1,)\nSeries: 'a' [null]\n[\n        null\n]\n</code></pre>"},{"location":"releases/upgrade/0.20/#replace-reimplemented-with-slightly-different-behavior","title":"<code>replace</code> reimplemented with slightly different behavior","text":"<p>The new implementation is mostly backwards compatible. Please do note the following:</p> <ol> <li>The logic for determining the return data type has changed. You may want to specify <code>return_dtype</code> to override the inferred data type, or take advantage of the new function signature (separate <code>old</code> and <code>new</code> parameters) to influence the return type.</li> <li>The previous workaround for referencing other columns as default by using a struct column no longer works. It now simply works as expected, no workaround needed.</li> </ol> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; df = pl.DataFrame({\"a\": [1, 2, 2, 3], \"b\": [1.5, 2.5, 5.0, 1.0]}, schema={\"a\": pl.Int8, \"b\": pl.Float64})\n&gt;&gt;&gt; df.select(pl.col(\"a\").replace({2: 100}))\nshape: (4, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 i8  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2502\n\u2502 100 \u2502\n\u2502 100 \u2502\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df.select(pl.struct(\"a\", \"b\").replace({2: 100}, default=pl.col(\"b\")))\nshape: (4, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a     \u2502\n\u2502 ---   \u2502\n\u2502 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.5   \u2502\n\u2502 100.0 \u2502\n\u2502 100.0 \u2502\n\u2502 1.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; df.select(pl.col(\"a\").replace({2: 100}))\nshape: (4, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2502\n\u2502 100 \u2502\n\u2502 100 \u2502\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df.select(pl.col(\"a\").replace({2: 100}, default=pl.col(\"b\")))  # No struct needed\nshape: (4, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a     \u2502\n\u2502 ---   \u2502\n\u2502 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.5   \u2502\n\u2502 100.0 \u2502\n\u2502 100.0 \u2502\n\u2502 1.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"releases/upgrade/0.20/#value_counts-resulting-column-renamed-from-counts-to-count","title":"<code>value_counts</code> resulting column renamed from <code>counts</code> to <code>count</code>","text":"<p>The resulting struct field for the <code>value_counts</code> method has been renamed from <code>counts</code> to <code>count</code>.</p> <p>Example</p> <p>Before:</p> <pre><code>&gt;&gt;&gt; s = pl.Series(\"a\", [\"x\", \"x\", \"y\"])\n&gt;&gt;&gt; s.value_counts()\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 counts \u2502\n\u2502 --- \u2506 ---    \u2502\n\u2502 str \u2506 u32    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 x   \u2506 2      \u2502\n\u2502 y   \u2506 1      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>After:</p> <pre><code>&gt;&gt;&gt; s.value_counts()\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 count \u2502\n\u2502 --- \u2506 ---   \u2502\n\u2502 str \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 x   \u2506 2     \u2502\n\u2502 y   \u2506 1     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"releases/upgrade/0.20/#update-read_parquet-to-use-object-store-rather-than-fsspec","title":"Update <code>read_parquet</code> to use Object Store rather than fsspec","text":"<p>If you were using <code>read_parquet</code>, installing <code>fsspec</code> as an optional dependency is no longer required. The new Object Store implementation was already in use for <code>scan_parquet</code>. It may have slightly different behavior in certain cases, such as how credentials are detected and how downloads are performed.</p> <p>The resulting <code>DataFrame</code> should be identical between versions.</p>"},{"location":"releases/upgrade/0.20/#deprecations","title":"Deprecations","text":""},{"location":"releases/upgrade/0.20/#cumulative-functions-renamed-from-cum-to-cum_","title":"Cumulative functions renamed from <code>cum*</code> to <code>cum_*</code>","text":"<p>Technically, this deprecation was introduced in version <code>0.19.14</code>, but many users will first encounter it when upgrading to <code>0.20</code>. It's a relatively impactful change, which is why we mention it here.</p> Old name New name <code>cumfold</code> <code>cum_fold</code> <code>cumreduce</code> <code>cum_reduce</code> <code>cumsum</code> <code>cum_sum</code> <code>cumprod</code> <code>cum_prod</code> <code>cummin</code> <code>cum_min</code> <code>cummax</code> <code>cum_max</code> <code>cumcount</code> <code>cum_count</code>"},{"location":"user-guide/ecosystem/","title":"\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0","text":""},{"location":"user-guide/ecosystem/#_2","title":"\u306f\u3058\u3081\u306b","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Polars \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c4\u30fc\u30eb\u306e\u975e\u7db2\u7f85\u7684\u306a\u30ea\u30b9\u30c8\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u306f\u6025\u901f\u306b\u9032\u5316\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u4eca\u5f8c\u3055\u3089\u306b Polars \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u767b\u5834\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4e3b\u306a\u8981\u56e0\u306e 1 \u3064\u306f\u3001Polars \u304c\u81ea\u8eab\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3067 <code>Apache Arrow</code> \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002</p>"},{"location":"user-guide/ecosystem/#_3","title":"\u76ee\u6b21\uff1a","text":"<ul> <li>Apache Arrow</li> <li>\u30c7\u30fc\u30bf\u53ef\u8996\u5316</li> <li>IO</li> <li>\u6a5f\u68b0\u5b66\u7fd2</li> <li>\u305d\u306e\u4ed6</li> </ul>"},{"location":"user-guide/ecosystem/#apache-arrow","title":"Apache Arrow","text":"<p>Apache Arrow \u306f\u3001\u540c\u4e00\u30d7\u30ed\u30bb\u30b9\u5185\u3067\u30c7\u30fc\u30bf\u306e zero-copy \u8aad\u307f\u53d6\u308a\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u30b3\u30d4\u30fc\u3084\u30b7\u30ea\u30a2\u30eb\u5316\u306e\u5fc5\u8981\u306a\u304f\u3001\u30e1\u30e2\u30ea\u5185\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u30c7\u30fc\u30bf\u306b\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001Apache Arrow \u3092\u4f7f\u7528\u3059\u308b\u3055\u307e\u3056\u307e\u306a\u30c4\u30fc\u30eb\u3068\u306e\u7d71\u5408\u6642\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002Polars \u306f\u3001Pandas \u3084 DuckDB \u306a\u3069\u3001Apache Arrow \u3092\u6d3b\u7528\u3059\u308b\u5e45\u5e83\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/ecosystem/#_4","title":"\u30c7\u30fc\u30bf\u53ef\u8996\u5316","text":""},{"location":"user-guide/ecosystem/#hvplot","title":"hvPlot","text":"<p>hvPlot \u306f\u3001Polars \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d7\u30ed\u30c3\u30c8\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u3067\u3001\u5bfe\u8a71\u578b\u304a\u3088\u3073\u9759\u7684\u306a\u53ef\u8996\u5316\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6642\u306b <code>plot</code> \u6a5f\u80fd\u30d5\u30e9\u30b0\u3092\u4f7f\u7528\u3057\u3066 hvPlot \u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <pre><code>pip install 'polars[plot]'\n</code></pre>"},{"location":"user-guide/ecosystem/#matplotlib","title":"Matplotlib","text":"<p>Matplotlib \u306f\u3001Python \u3067\u9759\u7684\u3001\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3001\u5bfe\u8a71\u578b\u306e\u53ef\u8996\u5316\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u5305\u62ec\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Matplotlib \u306f\u7c21\u5358\u306a\u3053\u3068\u3092\u7c21\u5358\u306b\u3001\u96e3\u3057\u3044\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/ecosystem/#plotly","title":"Plotly","text":"<p>Plotly \u306f\u3001Python \u7528\u306e\u5bfe\u8a71\u578b\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3001\u30d6\u30e9\u30a6\u30b6\u30d9\u30fc\u30b9\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002plotly.js \u4e0a\u306b\u69cb\u7bc9\u3055\u308c\u3066\u304a\u308a\u3001\u79d1\u5b66\u7684\u306a\u30c1\u30e3\u30fc\u30c8\u30013D \u30b0\u30e9\u30d5\u3001\u7d71\u8a08\u30c1\u30e3\u30fc\u30c8\u3001SVG \u30de\u30c3\u30d7\u3001\u91d1\u878d\u30c1\u30e3\u30fc\u30c8\u306a\u3069\u300130 \u7a2e\u985e\u4ee5\u4e0a\u306e\u30c1\u30e3\u30fc\u30c8\u30bf\u30a4\u30d7\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/ecosystem/#seaborn","title":"Seaborn","text":"<p>Seaborn \u306f\u3001Matplotlib \u30d9\u30fc\u30b9\u306e Python \u30c7\u30fc\u30bf\u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u9b45\u529b\u7684\u3067\u60c5\u5831\u8c4a\u5bcc\u306a\u7d71\u8a08\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u63cf\u304f\u305f\u3081\u306e\u9ad8\u30ec\u30d9\u30eb\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/ecosystem/#io","title":"IO","text":""},{"location":"user-guide/ecosystem/#delta-lake","title":"Delta Lake","text":"<p>Delta Lake \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306f\u3001\u958b\u767a\u8005\u3084\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30bf\u30fc\u3092\u5bfe\u8c61\u3068\u3057\u305f\u4f4e\u30ec\u30d9\u30eb\u306e API \u3068\u3001Delta Lake \u3092\u7c21\u5358\u306b\u53c2\u7167\u3001\u691c\u67fb\u3001\u64cd\u4f5c\u3067\u304d\u308b\u9ad8\u30ec\u30d9\u30eb\u306e\u64cd\u4f5c API \u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3001Deltalake \u306e\u529b\u3092\u591a\u304f\u306e\u30e6\u30fc\u30b6\u30fc\u3084\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u89e3\u653e\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>Polars \u3067\u306e Delta Lake \u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001Delta Lake \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/ecosystem/#_5","title":"\u6a5f\u68b0\u5b66\u7fd2","text":""},{"location":"user-guide/ecosystem/#scikit-learn","title":"Scikit Learn","text":"<p>Scikit Learn 1.4 \u4ee5\u964d\u3001\u3059\u3079\u3066\u306e\u5909\u63db\u5668\u304c Polars \u306e\u51fa\u529b\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306f[\u5909\u66f4\u5c65\u6b74] \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/ecosystem/#_6","title":"\u305d\u306e\u4ed6","text":""},{"location":"user-guide/ecosystem/#duckdb","title":"DuckDB","text":"<p>DuckDB \u306f\u3001\u9ad8\u6027\u80fd\u306a\u5206\u6790\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30b7\u30b9\u30c6\u30e0\u3067\u3059\u3002\u9ad8\u901f\u3001\u4fe1\u983c\u6027\u3001\u30dd\u30fc\u30bf\u30d3\u30ea\u30c6\u30a3\u3001\u4f7f\u3044\u3084\u3059\u3055\u3092\u76ee\u6307\u3057\u3066\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002DuckDB \u306f\u3001\u57fa\u672c\u7684\u306a SQL \u3092\u9065\u304b\u306b\u8d85\u3048\u305f\u8c4a\u5bcc\u306a SQL \u8a00\u8a9e\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u4efb\u610f\u306e\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u76f8\u95a2\u30b5\u30d6\u30af\u30a8\u30ea\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u3001\u7167\u5408\u9806\u5e8f\u3001\u8907\u96d1\u306a\u578b(\u914d\u5217\u3001\u69cb\u9020\u4f53)\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002Polars \u3068\u306e\u7d71\u5408\u306b\u3064\u3044\u3066\u306f\u3001DuckDB \u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/ecosystem/#great-tables","title":"Great Tables","text":"<p>Great Tables \u3092\u4f7f\u3048\u3070\u3001\u8ab0\u3067\u3082\u7d20\u6674\u3089\u3057\u3044\u898b\u305f\u76ee\u306e\u30c6\u30fc\u30d6\u30eb\u3092 Python \u3067\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002Polars \u3068\u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f\u3001\u30d6\u30ed\u30b0\u8a18\u4e8b \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/ecosystem/#lancedb","title":"LanceDB","text":"<p>LanceDB \u306f\u3001AI \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5411\u3051\u306e\u958b\u767a\u8005\u306b\u512a\u3057\u3044\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30d9\u30af\u30c8\u30eb\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u3059\u3002Polars \u3068\u306e\u76f4\u63a5\u7684\u306a\u7d71\u5408\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002LanceDB \u306f Polars DataFrame \u3092\u30a4\u30f3\u30b8\u30a7\u30b9\u30c8\u3057\u3001\u7d50\u679c\u3092 Polars DataFrame \u3067\u8fd4\u3057\u3001\u30c6\u30fc\u30d6\u30eb\u5168\u4f53\u3092 Polars lazyframe \u3068\u3057\u3066\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002\u7aef\u7684\u306a\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u3001LanceDB + Polars \u306e\u30d6\u30ed\u30b0\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/ecosystem/#mage","title":"Mage","text":"<p>Mage \u306f\u3001\u30c7\u30fc\u30bf\u306e\u5909\u63db\u3068\u7d71\u5408\u3092\u884c\u3046\u305f\u3081\u306e\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3067\u3059\u3002Polars \u3068\u306e\u7d71\u5408\u306b\u3064\u3044\u3066\u306f\u3001docs.mage.ai \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/getting-started/","title":"\u306f\u3058\u3081\u65b9","text":"<p>\u3053\u306e\u7ae0\u3067\u306f Polars \u306e\u306f\u3058\u3081\u65b9\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u57fa\u672c\u7684\u306a\u7279\u5fb4\u3084\u6a5f\u80fd\u3092\u7d39\u4ecb\u3057\u3001\u65b0\u3057\u3044\u30e6\u30fc\u30b6\u30fc\u304c\u6700\u521d\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304b\u3089\u30b3\u30a2\u306a\u6a5f\u80fd\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067\u306e\u57fa\u790e\u3092\u7fd2\u5f97\u3057\u3084\u3059\u304f\u3057\u307e\u3059\u3002\u3082\u3057\u3042\u306a\u305f\u304c\u719f\u7df4\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u3067\u3042\u3063\u305f\u308a\u3001DataFrame \u306b\u99b4\u67d3\u307f\u304c\u3042\u308b\u306a\u3089\u3070\u3001\u6b21\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u7ae0\u306b\u30b9\u30ad\u30c3\u30d7\u3057\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002</p>"},{"location":"user-guide/getting-started/#polars","title":"Polars \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"Python Rust <pre><code>pip install polars\n</code></pre> <pre><code>cargo add polars -F lazy\n\n# Or Cargo.toml\n[dependencies]\npolars = { version = \"x\", features = [\"lazy\", ...]}\n</code></pre>"},{"location":"user-guide/getting-started/#_2","title":"\u8aad\u307f\u8fbc\u307f\u3068\u66f8\u304d\u8fbc\u307f","text":"<p>Polars \u306f\u4e00\u822c\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\uff08\u4f8b\uff1acsv, json, parquet\uff09\u3001\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\uff08\u4f8b\uff1aS3\u3001Azure Blob\u3001BigQuery\uff09\u304a\u3088\u3073\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff08\u4f8b\uff1apostgres, mysql\uff09\u306e\u8aad\u307f\u66f8\u304d\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u30c7\u30a3\u30b9\u30af\u3078\u306e\u8aad\u307f\u66f8\u304d\u306e\u8003\u3048\u65b9\u3092\u793a\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>import polars as pl\nfrom datetime import datetime\n\ndf = pl.DataFrame(\n    {\n        \"integer\": [1, 2, 3],\n        \"date\": [\n            datetime(2025, 1, 1),\n            datetime(2025, 1, 2),\n            datetime(2025, 1, 3),\n        ],\n        \"float\": [4.0, 5.0, 6.0],\n        \"string\": [\"a\", \"b\", \"c\"],\n    }\n)\n\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>use std::fs::File;\n\nuse chrono::prelude::*;\nuse polars::prelude::*;\n\nlet mut df: DataFrame = df!(\n    \"integer\" =&gt; &amp;[1, 2, 3],\n    \"date\" =&gt; &amp;[\n            NaiveDate::from_ymd_opt(2025, 1, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),\n            NaiveDate::from_ymd_opt(2025, 1, 2).unwrap().and_hms_opt(0, 0, 0).unwrap(),\n            NaiveDate::from_ymd_opt(2025, 1, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(),\n    ],\n    \"float\" =&gt; &amp;[4.0, 5.0, 6.0],\n    \"string\" =&gt; &amp;[\"a\", \"b\", \"c\"],\n)\n.unwrap();\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (3, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integer \u2506 date                \u2506 float \u2506 string \u2502\n\u2502 ---     \u2506 ---                 \u2506 ---   \u2506 ---    \u2502\n\u2502 i64     \u2506 datetime[\u03bcs]        \u2506 f64   \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1       \u2506 2025-01-01 00:00:00 \u2506 4.0   \u2506 a      \u2502\n\u2502 2       \u2506 2025-01-02 00:00:00 \u2506 5.0   \u2506 b      \u2502\n\u2502 3       \u2506 2025-01-03 00:00:00 \u2506 6.0   \u2506 c      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u6b21\u306e\u4f8b\u3067\u306f DataFrame \u3092 <code>output.csv</code> \u3068\u3044\u3046\u540d\u524d\u306e csv \u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u306b <code>read_csv</code> \u3092\u7528\u3044\u3066\u518d\u5ea6\u305d\u308c\u3092\u8aad\u307f\u8fbc\u307f\u3001\u78ba\u8a8d\u306e\u305f\u3081\u306b <code>print</code> \u3067\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3001</p>  Python Rust <p> <code>read_csv</code> \u00b7 <code>write_csv</code> <pre><code>df.write_csv(\"docs/data/output.csv\")\ndf_csv = pl.read_csv(\"docs/data/output.csv\")\nprint(df_csv)\n</code></pre></p> <p> <code>CsvReader</code> \u00b7 <code>CsvWriter</code> \u00b7  Available on feature csv <pre><code>let mut file = File::create(\"docs/data/output.csv\").expect(\"could not create file\");\nCsvWriter::new(&amp;mut file)\n    .include_header(true)\n    .with_separator(b',')\n    .finish(&amp;mut df)?;\nlet df_csv = CsvReader::from_path(\"docs/data/output.csv\")?\n    .infer_schema(None)\n    .has_header(true)\n    .finish()?;\nprintln!(\"{}\", df_csv);\n</code></pre></p> <pre><code>shape: (3, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integer \u2506 date                       \u2506 float \u2506 string \u2502\n\u2502 ---     \u2506 ---                        \u2506 ---   \u2506 ---    \u2502\n\u2502 i64     \u2506 str                        \u2506 f64   \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1       \u2506 2025-01-01T00:00:00.000000 \u2506 4.0   \u2506 a      \u2502\n\u2502 2       \u2506 2025-01-02T00:00:00.000000 \u2506 5.0   \u2506 b      \u2502\n\u2502 3       \u2506 2025-01-03T00:00:00.000000 \u2506 6.0   \u2506 c      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>CSV \u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3084\u4ed6\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u4f8b\u3092\u3082\u3063\u3068\u78ba\u8a8d\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u306e IO \u306e\u7ae0\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/getting-started/#_3","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3","text":"<p>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f Polars \u306e\u30b3\u30a2\u306a\u5f37\u307f\u3067\u3059\u3002\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 \u306f\u5358\u7d14\u306a\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u7d44\u5408\u305b\u3066\u8907\u96d1\u306a\u30af\u30a8\u30ea\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u9020\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u5168\u3066\u306e\u30af\u30a8\u30ea\u306e\u69cb\u6210\u8981\u7d20\u3092\u63d0\u4f9b\u3059\u308b\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08Polars \u306e\u7528\u8a9e\u3067\u5f0f\u3068\u547c\u3076\uff09\u3067\u3059\uff1a - <code>select</code> - <code>filter</code> - <code>with_columns</code> - <code>group_by</code></p> <p>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3084\u5f0f\u304c\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3092\u3088\u308a\u8a73\u3057\u304f\u5b66\u3076\u306b\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u306e \u5f0f \u304a\u3088\u3073 Expressions \u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/getting-started/#_4","title":"\u9078\u629e","text":"<p>\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3059\u308b\u305f\u3081\u306b\u306f\uff12\u3064\u306e\u3053\u3068\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ol> <li>\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u5bfe\u8c61\u306e <code>DataFrame</code> \u3092\u5b9a\u7fa9\u3059\u308b</li> <li>\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b</li> </ol> <p>\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f select \u6642\u306b <code>col('*')</code> \u3068\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u30a2\u30b9\u30bf\u30ea\u30b9\u30af\u306f\u5168\u3066\u306e\u30ab\u30e9\u30e0\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>select</code> <pre><code>df.select(pl.col(\"*\"))\n</code></pre></p> <p> <code>select</code> <pre><code>let out = df.clone().lazy().select([col(\"*\")]).collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2506 c                   \u2506 d     \u2502\n\u2502 --- \u2506 ---      \u2506 ---                 \u2506 ---   \u2502\n\u2502 i64 \u2506 f64      \u2506 datetime[\u03bcs]        \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 0.755879 \u2506 2025-12-01 00:00:00 \u2506 1.0   \u2502\n\u2502 1   \u2506 0.070227 \u2506 2025-12-02 00:00:00 \u2506 2.0   \u2502\n\u2502 2   \u2506 0.026443 \u2506 2025-12-03 00:00:00 \u2506 NaN   \u2502\n\u2502 3   \u2506 0.329713 \u2506 2025-12-04 00:00:00 \u2506 -42.0 \u2502\n\u2502 4   \u2506 0.487679 \u2506 2025-12-05 00:00:00 \u2506 null  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u7279\u5b9a\u306e\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u3059\u308b\u306b\u306f\uff12\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\uff11\u3064\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ab\u30e9\u30e0\u306e\u540d\u524d\u3092\u6e21\u3059\u65b9\u6cd5\u3067\u3059\u3002</p>  Python Rust <p> <code>select</code> <pre><code>df.select(pl.col(\"a\", \"b\"))\n</code></pre></p> <p> <code>select</code> <pre><code>let out = df.clone().lazy().select([col(\"a\"), col(\"b\")]).collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2502\n\u2502 --- \u2506 ---      \u2502\n\u2502 i64 \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 0.755879 \u2502\n\u2502 1   \u2506 0.070227 \u2502\n\u2502 2   \u2506 0.026443 \u2502\n\u2502 3   \u2506 0.329713 \u2502\n\u2502 4   \u2506 0.487679 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3088\u308a\u8a73\u3057\u304f\u5b66\u3076\u306b\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u306e\u57fa\u672c\u7684\u306a\u64cd\u4f5c\u3084\u30ab\u30e9\u30e0\u306e\u9078\u629e\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/getting-started/#_5","title":"\u62bd\u51fa","text":"<p><code>filter</code> \u306b\u3088\u308a <code>DataFrame</code> \u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5148\u307b\u3069\u3068\u540c\u3058 <code>DataFrame</code> \u3092\u4f7f\u3063\u3066\u4e8c\u3064\u306e\u7279\u5b9a\u306e\u65e5\u4ed8\u306e\u671f\u9593\u3067\u62bd\u51fa\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>filter</code> <pre><code>df.filter(\n    pl.col(\"c\").is_between(datetime(2025, 12, 2), datetime(2025, 12, 3)),\n)\n</code></pre></p> <p> <code>filter</code> <pre><code>let start_date = NaiveDate::from_ymd_opt(2025, 12, 2)\n    .unwrap()\n    .and_hms_opt(0, 0, 0)\n    .unwrap();\nlet end_date = NaiveDate::from_ymd_opt(2025, 12, 3)\n    .unwrap()\n    .and_hms_opt(0, 0, 0)\n    .unwrap();\nlet out = df\n    .clone()\n    .lazy()\n    .filter(\n        col(\"c\")\n            .gt_eq(lit(start_date))\n            .and(col(\"c\").lt_eq(lit(end_date))),\n    )\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (2, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2506 c                   \u2506 d   \u2502\n\u2502 --- \u2506 ---      \u2506 ---                 \u2506 --- \u2502\n\u2502 i64 \u2506 f64      \u2506 datetime[\u03bcs]        \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 0.070227 \u2506 2025-12-02 00:00:00 \u2506 2.0 \u2502\n\u2502 2   \u2506 0.026443 \u2506 2025-12-03 00:00:00 \u2506 NaN \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>filter</code> \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u542b\u3080\u3088\u308a\u8907\u96d1\u306a\u62bd\u51fa\u3092\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>filter</code> <pre><code>df.filter((pl.col(\"a\") &lt;= 3) &amp; (pl.col(\"d\").is_not_nan()))\n</code></pre></p> <p> <code>filter</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .filter(col(\"a\").lt_eq(3).and(col(\"d\").is_not_null()))\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (3, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2506 c                   \u2506 d     \u2502\n\u2502 --- \u2506 ---      \u2506 ---                 \u2506 ---   \u2502\n\u2502 i64 \u2506 f64      \u2506 datetime[\u03bcs]        \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 0.755879 \u2506 2025-12-01 00:00:00 \u2506 1.0   \u2502\n\u2502 1   \u2506 0.070227 \u2506 2025-12-02 00:00:00 \u2506 2.0   \u2502\n\u2502 3   \u2506 0.329713 \u2506 2025-12-04 00:00:00 \u2506 -42.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/getting-started/#_6","title":"\u30ab\u30e9\u30e0\u306e\u8ffd\u52a0","text":"<p><code>with_columns</code> \u3067\u5206\u6790\u306e\u305f\u3081\u306e\u65b0\u3057\u3044\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4e8c\u3064\u306e\u65b0\u3057\u3044\u30ab\u30e9\u30e0 <code>e</code> \u3068 <code>b+42</code> \u3092\u4f5c\u308a\u307e\u3059\u3002\u307e\u305a\u306f\u30ab\u30e9\u30e0 <code>b</code> \u306e\u5168\u3066\u306e\u5024\u306e\u5408\u8a08\u3092\u8a08\u7b97\u3057\u3001\u305d\u308c\u3092\u30ab\u30e9\u30e0 <code>e</code> \u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\u6b21\u306b <code>b</code> \u306b <code>42</code> \u3092\u8db3\u3057\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u65b0\u3057\u3044\u30ab\u30e9\u30e0 <code>b+42</code> \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 </p>  Python Rust <p> <code>with_columns</code> <pre><code>df.with_columns(pl.col(\"b\").sum().alias(\"e\"), (pl.col(\"b\") + 42).alias(\"b+42\"))\n</code></pre></p> <p> <code>with_columns</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .with_columns([\n        col(\"b\").sum().alias(\"e\"),\n        (col(\"b\") + lit(42)).alias(\"b+42\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (5, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2506 c                   \u2506 d     \u2506 e        \u2506 b+42      \u2502\n\u2502 --- \u2506 ---      \u2506 ---                 \u2506 ---   \u2506 ---      \u2506 ---       \u2502\n\u2502 i64 \u2506 f64      \u2506 datetime[\u03bcs]        \u2506 f64   \u2506 f64      \u2506 f64       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 0.755879 \u2506 2025-12-01 00:00:00 \u2506 1.0   \u2506 1.669941 \u2506 42.755879 \u2502\n\u2502 1   \u2506 0.070227 \u2506 2025-12-02 00:00:00 \u2506 2.0   \u2506 1.669941 \u2506 42.070227 \u2502\n\u2502 2   \u2506 0.026443 \u2506 2025-12-03 00:00:00 \u2506 NaN   \u2506 1.669941 \u2506 42.026443 \u2502\n\u2502 3   \u2506 0.329713 \u2506 2025-12-04 00:00:00 \u2506 -42.0 \u2506 1.669941 \u2506 42.329713 \u2502\n\u2502 4   \u2506 0.487679 \u2506 2025-12-05 00:00:00 \u2506 null  \u2506 1.669941 \u2506 42.487679 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/getting-started/#_7","title":"\u30b0\u30eb\u30fc\u30d7\u5316","text":"<p>\u30b0\u30eb\u30fc\u30d7\u5316\u306e\u6a5f\u80fd\u3067\u65b0\u3057\u3044 <code>DataFrame</code> \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u65b0\u3057\u3044 <code>DataFrame</code> \u306f\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u305f\u3044\u8907\u6570\u306e\u300c\u30b0\u30eb\u30fc\u30d7\u300d\u3092\u6301\u3061\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df2 = pl.DataFrame(\n    {\n        \"x\": range(8),\n        \"y\": [\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"],\n    }\n)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df2: DataFrame = df!(\"x\" =&gt; 0..8,\n    \"y\"=&gt; &amp;[\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"],\n)\n.expect(\"should not fail\");\nprintln!(\"{}\", df2);\n</code></pre></p> <pre><code>shape: (8, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 x   \u2506 y   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 A   \u2502\n\u2502 1   \u2506 A   \u2502\n\u2502 2   \u2506 A   \u2502\n\u2502 3   \u2506 B   \u2502\n\u2502 4   \u2506 B   \u2502\n\u2502 5   \u2506 C   \u2502\n\u2502 6   \u2506 X   \u2502\n\u2502 7   \u2506 X   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>  Python Rust <p> <code>group_by</code> <pre><code>df2.group_by(\"y\", maintain_order=True).len()\n</code></pre></p> <p> <code>group_by</code> <pre><code>let out = df2.clone().lazy().group_by([\"y\"]).agg([len()]).collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (4, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 y   \u2506 len \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A   \u2506 3   \u2502\n\u2502 B   \u2506 2   \u2502\n\u2502 C   \u2506 1   \u2502\n\u2502 X   \u2506 2   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>  Python Rust <p> <code>group_by</code> <pre><code>df2.group_by(\"y\", maintain_order=True).agg(\n    pl.col(\"*\").count().alias(\"count\"),\n    pl.col(\"*\").sum().alias(\"sum\"),\n)\n</code></pre></p> <p> <code>group_by</code> <pre><code>let out = df2\n    .clone()\n    .lazy()\n    .group_by([\"y\"])\n    .agg([col(\"*\").count().alias(\"count\"), col(\"*\").sum().alias(\"sum\")])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 y   \u2506 count \u2506 sum \u2502\n\u2502 --- \u2506 ---   \u2506 --- \u2502\n\u2502 str \u2506 u32   \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A   \u2506 3     \u2506 3   \u2502\n\u2502 B   \u2506 2     \u2506 7   \u2502\n\u2502 C   \u2506 1     \u2506 5   \u2502\n\u2502 X   \u2506 2     \u2506 13  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/getting-started/#_8","title":"\u7d44\u307f\u5408\u308f\u305b","text":"<p>\u4ee5\u4e0b\u306f\u5fc5\u8981\u306a <code>DataFrame</code> \u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u64cd\u4f5c\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u4f8b\u3067\u3059\u3002</p>  Python Rust <p> <code>select</code> \u00b7 <code>with_columns</code> <pre><code>df_x = df.with_columns((pl.col(\"a\") * pl.col(\"b\")).alias(\"a * b\")).select(\n    pl.all().exclude([\"c\", \"d\"])\n)\n\nprint(df_x)\n</code></pre></p> <p> <code>select</code> \u00b7 <code>with_columns</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .with_columns([(col(\"a\") * col(\"b\")).alias(\"a * b\")])\n    .select([col(\"*\").exclude([\"c\", \"d\"])])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2506 a * b    \u2502\n\u2502 --- \u2506 ---      \u2506 ---      \u2502\n\u2502 i64 \u2506 f64      \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 0.755879 \u2506 0.0      \u2502\n\u2502 1   \u2506 0.070227 \u2506 0.070227 \u2502\n\u2502 2   \u2506 0.026443 \u2506 0.052887 \u2502\n\u2502 3   \u2506 0.329713 \u2506 0.989139 \u2502\n\u2502 4   \u2506 0.487679 \u2506 1.950716 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>  Python Rust <p> <code>select</code> \u00b7 <code>with_columns</code> <pre><code>df_y = df.with_columns((pl.col(\"a\") * pl.col(\"b\")).alias(\"a * b\")).select(\n    pl.all().exclude(\"d\")\n)\n\nprint(df_y)\n</code></pre></p> <p> <code>select</code> \u00b7 <code>with_columns</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .with_columns([(col(\"a\") * col(\"b\")).alias(\"a * b\")])\n    .select([col(\"*\").exclude([\"d\"])])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2506 c                   \u2506 a * b    \u2502\n\u2502 --- \u2506 ---      \u2506 ---                 \u2506 ---      \u2502\n\u2502 i64 \u2506 f64      \u2506 datetime[\u03bcs]        \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 0.755879 \u2506 2025-12-01 00:00:00 \u2506 0.0      \u2502\n\u2502 1   \u2506 0.070227 \u2506 2025-12-02 00:00:00 \u2506 0.070227 \u2502\n\u2502 2   \u2506 0.026443 \u2506 2025-12-03 00:00:00 \u2506 0.052887 \u2502\n\u2502 3   \u2506 0.329713 \u2506 2025-12-04 00:00:00 \u2506 0.989139 \u2502\n\u2502 4   \u2506 0.487679 \u2506 2025-12-05 00:00:00 \u2506 1.950716 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/getting-started/#dataframe","title":"DataFrame \u3092\u7d44\u307f\u5408\u308f\u305b\u308b","text":"<p>\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u57fa\u3065\u3044\u3066 <code>DataFrame</code> \u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u65b9\u6cd5\u304c2\u3064\u3042\u308a\u307e\u3059\uff1ajoin \u3068 concat \u3067\u3059\u3002</p>"},{"location":"user-guide/getting-started/#join","title":"Join","text":"<p>Polars \u306f\u3059\u3079\u3066\u306e\u7a2e\u985e\u306e join\uff08\u4f8b\uff1a left, right, inner, outer\uff09\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u30022\u3064\u306e <code>DataFrame</code> \u3092 <code>join</code> \u30671\u3064\u306e <code>DataFrame</code> \u306b\u3059\u308b\u65b9\u6cd5\u3092\u8a73\u3057\u304f\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u30022\u3064\u306e <code>DataFrame</code> \u306f\u3069\u3061\u3089\u3082\u300cid\u300d\u306e\u3088\u3046\u306a\u30ab\u30e9\u30e0\u3092\u6301\u3061\u307e\u3059\uff1a<code>a</code> \u3068 <code>x</code> \u3067\u3059\u3002\u3053\u306e\u4f8b\u3067\u306f\u3053\u308c\u3089\u306e\u30ab\u30e9\u30e0\u3092\u4f7f\u3063\u3066 <code>DataFrame</code> \u3092 <code>join</code> \u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>join</code> <pre><code>df = pl.DataFrame(\n    {\n        \"a\": range(8),\n        \"b\": np.random.rand(8),\n        \"d\": [1, 2.0, float(\"nan\"), float(\"nan\"), 0, -5, -42, None],\n    }\n)\n\ndf2 = pl.DataFrame(\n    {\n        \"x\": range(8),\n        \"y\": [\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"],\n    }\n)\njoined = df.join(df2, left_on=\"a\", right_on=\"x\")\nprint(joined)\n</code></pre></p> <p> <code>join</code> <pre><code>use rand::Rng;\nlet mut rng = rand::thread_rng();\n\nlet df: DataFrame = df!(\n    \"a\" =&gt; 0..8,\n    \"b\"=&gt; (0..8).map(|_| rng.gen::&lt;f64&gt;()).collect::&lt;Vec&lt;f64&gt;&gt;(),\n    \"d\"=&gt; [Some(1.0), Some(2.0), None, None, Some(0.0), Some(-5.0), Some(-42.), None]\n)\n.unwrap();\nlet df2: DataFrame = df!(\n    \"x\" =&gt; 0..8,\n    \"y\"=&gt; &amp;[\"A\", \"A\", \"A\", \"B\", \"B\", \"C\", \"X\", \"X\"],\n)\n.unwrap();\nlet joined = df.join(&amp;df2, [\"a\"], [\"x\"], JoinType::Left.into())?;\nprintln!(\"{}\", joined);\n</code></pre></p> <pre><code>shape: (8, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2506 d     \u2506 y   \u2502\n\u2502 --- \u2506 ---      \u2506 ---   \u2506 --- \u2502\n\u2502 i64 \u2506 f64      \u2506 f64   \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 0.671125 \u2506 1.0   \u2506 A   \u2502\n\u2502 1   \u2506 0.912367 \u2506 2.0   \u2506 A   \u2502\n\u2502 2   \u2506 0.103817 \u2506 NaN   \u2506 A   \u2502\n\u2502 3   \u2506 0.321364 \u2506 NaN   \u2506 B   \u2502\n\u2502 4   \u2506 0.562468 \u2506 0.0   \u2506 B   \u2502\n\u2502 5   \u2506 0.520004 \u2506 -5.0  \u2506 C   \u2502\n\u2502 6   \u2506 0.25765  \u2506 -42.0 \u2506 X   \u2502\n\u2502 7   \u2506 0.834989 \u2506 null  \u2506 X   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u4ed6\u306e\u7a2e\u985e\u306e\u7d50\u5408\u306e\u4f8b\u3092\u898b\u305f\u3044\u5834\u5408\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u306e Transformations section \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/getting-started/#concat","title":"Concat","text":"<p>2\u3064\u306e <code>DataFrame</code> \u3092\u300c\u9023\u7d50\u300d\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u5782\u76f4\u65b9\u5411\u306e\u9023\u7d50\u306f <code>DataFrame</code> \u3092\u9577\u304f\u3057\u307e\u3059\u3002\u6c34\u5e73\u65b9\u5411\u306e\u9023\u7d50\u306f <code>DataFrame</code> \u306e\u5e45\u3092\u5e83\u3052\u307e\u3059\u3002\u4ee5\u4e0b\u306f2\u3064\u306e <code>DataFrame</code> \u3092\u6c34\u5e73\u65b9\u5411\u306b\u9023\u7d50\u3057\u305f\u7d50\u679c\u3067\u3059\u3002</p>  Python Rust <p> <code>hstack</code> <pre><code>stacked = df.hstack(df2)\nprint(stacked)\n</code></pre></p> <p> <code>hstack</code> <pre><code>let stacked = df.hstack(df2.get_columns())?;\nprintln!(\"{}\", stacked);\n</code></pre></p> <pre><code>shape: (8, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b        \u2506 d     \u2506 x   \u2506 y   \u2502\n\u2502 --- \u2506 ---      \u2506 ---   \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 f64      \u2506 f64   \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 0.671125 \u2506 1.0   \u2506 0   \u2506 A   \u2502\n\u2502 1   \u2506 0.912367 \u2506 2.0   \u2506 1   \u2506 A   \u2502\n\u2502 2   \u2506 0.103817 \u2506 NaN   \u2506 2   \u2506 A   \u2502\n\u2502 3   \u2506 0.321364 \u2506 NaN   \u2506 3   \u2506 B   \u2502\n\u2502 4   \u2506 0.562468 \u2506 0.0   \u2506 4   \u2506 B   \u2502\n\u2502 5   \u2506 0.520004 \u2506 -5.0  \u2506 5   \u2506 C   \u2502\n\u2502 6   \u2506 0.25765  \u2506 -42.0 \u2506 6   \u2506 X   \u2502\n\u2502 7   \u2506 0.834989 \u2506 null  \u2506 7   \u2506 X   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/installation/","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>Polars \u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308a\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u7c21\u5358\u3067\u3059\u3002</p>  Python Rust <pre><code>pip install polars\n\n# Or for legacy CPUs without AVX2 support\npip install polars-lts-cpu\n</code></pre> <pre><code>cargo add polars -F lazy\n\n# Or Cargo.toml\n[dependencies]\npolars = { version = \"x\", features = [\"lazy\", ...]}\n</code></pre>"},{"location":"user-guide/installation/#big-index","title":"Big Index","text":"<p>\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001Polars \u306f 2^32 \u884c\uff08~42\u5104\u884c\uff09\u306b\u5236\u9650\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u5236\u9650\u3092 2^64 \u884c\uff08~18\u5343\u5146\u884c\uff09\u307e\u3067\u5897\u3084\u3059\u306b\u306f\u3001big index \u3092\u6709\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059:</p>  Python Rust <pre><code>pip install polars-u64-idx\n</code></pre> <pre><code>cargo add polars -F bigidx\n\n# Or Cargo.toml\n[dependencies]\npolars = { version = \"x\", features = [\"bigidx\", ...] }\n</code></pre>"},{"location":"user-guide/installation/#cpu","title":"\u30ec\u30ac\u30b7\u30fc\u306a CPU","text":"<p>AVX \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u53e4\u3044 CPU \u3067Polars\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306b\u306f:</p>  Python <pre><code>pip install polars-lts-cpu\n</code></pre>"},{"location":"user-guide/installation/#_2","title":"\u30a4\u30f3\u30dd\u30fc\u30c8","text":"<p>\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python Rust <pre><code>import polars as pl\n</code></pre> <pre><code>use polars::prelude::*;\n</code></pre>"},{"location":"user-guide/installation/#feature-flags","title":"Feature Flags","text":"<p>\u4e0a\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001Polars \u306e\u30b3\u30a2\u306a\u6a5f\u80fd\u304c\u30b7\u30b9\u30c6\u30e0\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\u306f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u4f9d\u5b58\u95a2\u4fc2\u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306f\u6700\u5c0f\u9650\u306e\u30d5\u30c3\u30c8\u30d7\u30ea\u30f3\u30c8\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306b\u7701\u7565\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30d5\u30e9\u30b0\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u3092\u901a\u3057\u3066\u3001\u8ffd\u52a0\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u5fc5\u8981\u3068\u3059\u308b\u6a5f\u80fd\u304c\u4f7f\u308f\u308c\u308b\u5834\u5408\u306f\u8a00\u53ca\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/installation/#python","title":"Python","text":"<pre><code># For example\npip install 'polars[numpy,fsspec]'\n</code></pre> Tag Description all \u3059\u3079\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\uff08\u4ee5\u4e0b\u306e\u3059\u3079\u3066\uff09\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 pandas Pandas \u306e DataFrame \u3084 Series \u3068\u306e\u76f8\u4e92\u5909\u63db\u306e\u305f\u3081\u306b Pandas \u3068\u4e00\u7dd2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 numpy numpy \u914d\u5217\u3068\u306e\u76f8\u4e92\u5909\u63db\u306e\u305f\u3081\u306b numpy \u3068\u4e00\u7dd2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059 pyarrow PyArrow \u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u5f62\u5f0f\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059 fsspec \u30ea\u30e2\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059 connectorx SQL \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059 xlsx2csv Excel \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059 deltalake Delta Lake \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059 plot DataFrame \u306e\u30d7\u30ed\u30c3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059 timezone \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002Python 3.9 \u672a\u6e80\u3001\u307e\u305f\u306fWindows\u306e\u5834\u5408\u306b\u306e\u307f\u5fc5\u8981\u3067\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u4f9d\u5b58\u95a2\u4fc2\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u307e\u305b\u3093\u3002"},{"location":"user-guide/installation/#rust","title":"Rust","text":"<pre><code># Cargo.toml\n[dependencies]\npolars = { version = \"0.26.1\", features = [\"lazy\", \"temporal\", \"describe\", \"json\", \"parquet\", \"dtype-datetime\"] }\n</code></pre> <p>\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6a5f\u80fd\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059:</p> <ul> <li>\u8ffd\u52a0\u306e\u30c7\u30fc\u30bf\u578b:<ul> <li><code>dtype-date</code></li> <li><code>dtype-datetime</code></li> <li><code>dtype-time</code></li> <li><code>dtype-duration</code></li> <li><code>dtype-i8</code></li> <li><code>dtype-i16</code></li> <li><code>dtype-u8</code></li> <li><code>dtype-u16</code></li> <li><code>dtype-categorical</code></li> <li><code>dtype-struct</code></li> </ul> </li> <li><code>lazy</code> - Lazy API<ul> <li><code>regex</code> - \u30ab\u30e9\u30e0\u9078\u629e\u3067\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3046\u3002</li> <li><code>dot_diagram</code> - \u9045\u5ef6\u8ad6\u7406\u8a08\u753b\u304b\u3089\u30c9\u30c3\u30c8\u56f3\u3092\u4f5c\u6210\u3002</li> </ul> </li> <li><code>sql</code> - SQL \u30af\u30a8\u30ea\u3092 Polars \u306b\u6e21\u3059\u3002</li> <li><code>streaming</code> - RAM \u3088\u308a\u3082\u5927\u304d\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002</li> <li><code>random</code> - \u5024\u304c\u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3055\u308c\u305f\u914d\u5217\u3092\u751f\u6210\u3002</li> <li><code>ndarray</code>- <code>DataFrame</code> \u3092 <code>ndarray</code> \u306b\u5909\u63db\u3002</li> <li><code>temporal</code> - \u6642\u9593\u30c7\u30fc\u30bf\u578b\u306eChrono\u3068 Polars \u306e\u9593\u306e\u5909\u63db\u3002</li> <li><code>timezones</code> - \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u6709\u52b9\u5316\u3002</li> <li><code>strings</code> - <code>StringChunked</code> \u306e\u305f\u3081\u306e\u8ffd\u52a0\u306e\u6587\u5b57\u5217\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3002<ul> <li><code>string_pad</code> - <code>pad_start</code>, <code>pad_end</code>, <code>zfill</code></li> <li><code>string_to_integer</code> - <code>parse_int</code></li> </ul> </li> <li><code>object</code> - <code>ObjectChunked&lt;T&gt;</code> (<code>T</code> \u306b\u5bfe\u3057\u30b8\u30a7\u30cd\u30ea\u30c3\u30af)\u3068\u547c\u3070\u308c\u308b\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a ChunkedArrays \u306b\u5bfe\u3059\u308b\u30b5\u30dd\u30fc\u30c8   \u3053\u308c\u3089\u306f Any \u30c8\u30ec\u30a4\u30c8\u3092\u901a\u3058\u3066Series \u304b\u3089\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u304c\u53ef\u80fd\u3002</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u95a2\u9023\u3059\u308b\u3082\u306e:<ul> <li><code>nightly</code> - SIMD \u3084 Specialization \u306e\u3088\u3046\u306a\u6700\u65b0\u30d3\u30eb\u30c9\u306e\u307f\u306e\u6a5f\u80fd\u3092\u6709\u52b9\u5316\u3002</li> <li><code>performant</code> - \u3088\u308a\u9ad8\u901f\u306a\u30d1\u30b9\u3092\u884c\u3046\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u304c\u9045\u304f\u306a\u308b\u3002</li> <li><code>bigidx</code> -  2^32\u884c\u3092\u5927\u5e45\u306b\u8d85\u3048\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u308b\u5834\u5408\u306f\u3053\u306e\u6a5f\u80fd\u3092\u6709\u52b9\u5316\u3002 \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b<code>u64</code>\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u306f\u308b\u304b\u306b\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u304c\u53ef\u80fd\u3002 \u3053\u306e\u6a5f\u80fd\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3001\u591a\u304f\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u52b9\u7387\u304c\u4f4e\u4e0b\u3059\u308b\u305f\u3081\u3001 Polars\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5c11\u3057\u4f4e\u4e0b\u3059\u308b\u3002</li> <li><code>cse</code> - \u5171\u901a\u90e8\u5206\u5f0f\u9664\u53bb\u306e\u6700\u9069\u5316\u3092\u6709\u52b9\u5316\u3002</li> </ul> </li> <li> <p>IO \u306b\u95a2\u3059\u308b\u3082\u306e:</p> <ul> <li><code>serde</code> - serde \u306b\u3088\u308b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3068\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u30b5\u30dd\u30fc\u30c8\u3002</li> <li><code>serde-lazy</code> - serde \u306b\u3088\u308b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3068\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u30b5\u30dd\u30fc\u30c8\u3002 JSON \u306a\u3069\u306e serde \u5bfe\u5fdc\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u4f7f\u7528\u53ef\u80fd\u3002</li> <li><code>parquet</code> - Apache Parquet \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f</li> <li><code>json</code> - JSON \u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba</li> <li><code>ipc</code> - Arrow's IPC \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba</li> <li><code>decompress</code> - csv\u306e\u5727\u7e2e\u5f62\u5f0f\u3092\u81ea\u52d5\u7684\u306b\u63a8\u6e2c\u3057\u3001\u89e3\u51cd\u3002</li> </ul> </li> <li> <p>\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u5727\u7e2e\u5f62\u5f0f:</p> <ul> <li>zip</li> <li>gzip</li> </ul> </li> <li> <p><code>DataFrame</code> \u306e\u64cd\u4f5c:</p> <ul> <li><code>dynamic_group_by</code> - \u4e8b\u524d\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30ad\u30fc\u3067\u306f\u306a\u304f\u3001\u6642\u9593\u7a93\u306b\u57fa\u3065\u3044\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3002 \u30ed\u30fc\u30ea\u30f3\u30b0\u7a93\u306e\u30b0\u30eb\u30fc\u30d7\u5316\u64cd\u4f5c\u3082\u6709\u52b9\u5316\u3002</li> <li><code>sort_multiple</code> - \u8907\u6570\u30ab\u30e9\u30e0\u306e <code>DataFrame</code> \u306e\u30bd\u30fc\u30c8\u3092\u8a31\u53ef\u3002</li> <li><code>rows</code> - \u884c\u304b\u3089DataFrame\u3092\u4f5c\u6210\u3057\u3001DataFrame\u304b\u3089\u884c\u3092\u62bd\u51fa\u3002 \u307e\u305f <code>pivot</code> \u3068 <code>transpose</code> \u306e\u64cd\u4f5c\u3082\u6709\u52b9\u5316\u3002</li> <li><code>join_asof</code> - \u5b8c\u5168\u4e00\u81f4\u3067\u306f\u306a\u304f\u3001\u6700\u8fd1\u508d\u306e\u30ad\u30fc\u3067\u7d50\u5408\u3059\u308b Join ASOF \u3092\u63d0\u4f9b\u3002</li> <li><code>cross_join</code> - 2\u3064\u306e DataFrame \u306e\u30c7\u30ab\u30eb\u30c8\u7a4d\u3092\u4f5c\u6210</li> <li><code>semi_anti_join</code> - SEMI JOIN \u3068 ANTI JOIN \u3092\u63d0\u4f9b\u3002</li> <li><code>row_hash</code> - DataFrame \u306e\u884c\u3092 UInt64Chunked \u306b\u30cf\u30c3\u30b7\u30e5\u3059\u308b\u6a5f\u80fd</li> <li><code>diagonal_concat</code> - \u7570\u306a\u308b\u30b9\u30ad\u30fc\u30de\u306e DataFrame \u3092\u5bfe\u89d2\u65b9\u5411\u306b\u7d50\u5408\u3002</li> <li><code>dataframe_arithmetic</code> - (DataFrame \u3068 DataFrame)\u3084(DataFrame\u3000\u3068\u3000Series)\u306e\u6f14\u7b97</li> <li><code>partition_by</code> - \u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b DataFrame \u3092\u8907\u6570\u306b\u5206\u5272</li> </ul> </li> <li><code>Series</code>/\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 \u306e\u64cd\u4f5c:<ul> <li><code>is_in</code> - <code>Series</code> \u306e\u30e1\u30f3\u30d0\u30fc\u30b7\u30c3\u30d7\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059</li> <li><code>zip_with</code> - 2\u3064\u306e Series/ ChunkedArrays \u3092 zip \u5316\u3057\u307e\u3059</li> <li><code>round_series</code> - <code>Series</code> \u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u3092\u4e38\u3081\u308b\u3002</li> <li><code>repeat_by</code> - \u5225\u306e\u914d\u5217\u3067\u6307\u5b9a\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u8981\u7d20\u3092\u7e70\u308a\u8fd4\u3059\u308b\u3002</li> <li><code>is_first_distinct</code> - \u8981\u7d20\u304c\u6700\u521d\u306e\u4e00\u610f\u306e\u5024\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3002</li> <li><code>is_last_distinct</code> - \u8981\u7d20\u304c\u6700\u5f8c\u306e\u4e00\u610f\u306e\u5024\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3002</li> <li><code>checked_arithmetic</code> - \u7121\u52b9\u306a\u6f14\u7b97\u306b <code>None</code> \u3092\u8fd4\u3059\u691c\u67fb\u4ed8\u304d\u6f14\u7b97\u3002</li> <li><code>dot_product</code> - <code>Series</code>\u3068\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u5185\u7a4d\u3002</li> <li><code>concat_str</code> - \u7dda\u5f62\u6642\u9593\u3067\u306e\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u306e\u9023\u7d50\u3002</li> <li><code>reinterpret</code> - \u7b26\u53f7\u4ed8\u304d/\u7b26\u53f7\u306a\u3057\u3078\u306e\u30d3\u30c3\u30c8\u518d\u89e3\u91c8\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3</li> <li><code>take_opt_iter</code> - <code>Series</code> \u304b\u3089 <code>Iterator&lt;Item=Option&lt;usize&gt;&gt;</code> \u3092\u53d6\u5f97\u3059\u308b</li> <li><code>mode</code> - \u6700\u3082\u983b\u51fa\u3059\u308b\u5024\uff08\u307e\u305f\u306f\u8907\u6570\u306e\u5024\uff09\u3092\u8fd4\u3057\u307e\u3059</li> <li><code>cum_agg</code> - cum_sum\u3001cum_min\u3001cum_max \u3068\u3044\u3063\u305f\u96c6\u7d04\u3002</li> <li><code>rolling_window</code> - \u30ed\u30fc\u30ea\u30f3\u30b0\u5e73\u5747\u306a\u3069\u306e\u30ed\u30fc\u30ea\u30f3\u30b0\u7a93\u95a2\u6570</li> <li><code>interpolate</code> <code>None</code>\u5024\u3092\u88dc\u9593\u3057\u307e\u3059</li> <li><code>extract_jsonpath</code> - StringChunked \u3067 JSONPath \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b</li> <li><code>list</code> - \u30ea\u30b9\u30c8\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3002</li> <li><code>list_gather</code> \u8907\u6570\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30b5\u30d6\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3002</li> <li><code>rank</code> - \u30e9\u30f3\u30ad\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002</li> <li><code>moment</code> - \u5c16\u5ea6\u3084\u6b6a\u5ea6\u306e\u7d71\u8a08\u91cf</li> <li><code>ewma</code> - \u6307\u6570\u5e73\u6ed1\u79fb\u52d5\u5e73\u5747\u306e\u7a93\u95a2\u6570</li> <li><code>abs</code> - <code>Series</code>\u306e\u7d76\u5bfe\u5024\u306e\u53d6\u5f97</li> <li><code>arange</code> - <code>Series</code>\u3067\u306e\u7bc4\u56f2\u64cd\u4f5c</li> <li><code>product</code> - <code>Series</code>\u306e\u7a4d\u3092\u8a08\u7b97\u3002</li> <li><code>diff</code> - <code>diff</code> \u64cd\u4f5c\u3002</li> <li><code>pct_change</code> - \u5909\u5316\u7387\u3092\u8a08\u7b97\u3002</li> <li><code>unique_counts</code> - \u5f0f\u306e\u4e00\u610f\u306e\u5024\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3002</li> <li><code>log</code> - <code>Series</code>\u306e\u5bfe\u6570\u3002</li> <li><code>list_to_struct</code> - <code>List</code> \u3092 <code>Struct</code> \u30c7\u30fc\u30bf\u578b\u306b\u5909\u63db\u3059\u308b\u3002</li> <li><code>list_count</code> - \u30ea\u30b9\u30c8\u5185\u306e\u8981\u7d20\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3002</li> <li><code>list_eval</code> - \u30ea\u30b9\u30c8\u8981\u7d20\u306b\u5f0f\u3092\u9069\u7528\u3059\u308b\u3002</li> <li><code>cumulative_eval</code> - \u7d2f\u7a4d\u7684\u306b\u5897\u52a0\u3059\u308b\u7a93\u306b\u5f0f\u3092\u9069\u7528\u3059\u308b\u3002</li> <li><code>arg_where</code> - \u6761\u4ef6\u3092\u6e80\u305f\u3059\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002</li> <li><code>search_sorted</code> - \u9806\u5e8f\u3092\u7dad\u6301\u3059\u308b\u3088\u3046\u306b\u8981\u7d20\u3092\u633f\u5165\u3059\u3079\u304d\u4f4d\u7f6e\u3092\u898b\u3064\u3051\u308b\u3002</li> <li><code>date_offset</code> \u6708\u3084\u958f\u5e74\u3092\u8003\u616e\u3057\u3066\u65e5\u4ed8\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3002</li> <li><code>trigonometry</code> \u4e09\u89d2\u95a2\u6570\u3002</li> <li><code>sign</code> <code>Series</code>\u306e\u8981\u7d20\u3054\u3068\u306e\u7b26\u53f7\u3092\u8a08\u7b97\u3059\u308b\u3002</li> <li><code>propagate_nans</code> NaN\u4f1d\u64ad\u578b\u306emin/max\u96c6\u8a08\u3002</li> </ul> </li> <li><code>DataFrame</code>\u306e\u6574\u5f62\u51fa\u529b<ul> <li><code>fmt</code> - <code>DataFrame</code> \u306e\u66f8\u5f0f\u8a2d\u5b9a\u3092\u6709\u52b9\u5316\u3059\u308b</li> </ul> </li> </ul>"},{"location":"user-guide/concepts/","title":"\u30b3\u30f3\u30bb\u30d7\u30c8","text":"<p>\u30b3\u30f3\u30bb\u30d7\u30c8\u7ae0\u3067\u306f\u3001Polars API \u306e\u4e2d\u6838\u3068\u306a\u308b\u6982\u5ff5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u65e5\u3005\u306e\u30af\u30a8\u30ea\u3092\u6700\u9069\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30c8\u30d4\u30c3\u30af\u3092\u53d6\u308a\u4e0a\u3052\u307e\u3059:</p> <ul> <li>\u30c7\u30fc\u30bf\u578b: \u6982\u8981</li> <li>\u30c7\u30fc\u30bf\u578b: \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb</li> <li>\u30c7\u30fc\u30bf\u69cb\u9020</li> <li>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8</li> <li>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3</li> <li>Lazy vs Eager</li> <li>\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0</li> </ul>"},{"location":"user-guide/concepts/contexts/","title":"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8","text":"<p>Polars\u306f\u3001\u30c7\u30fc\u30bf\u5909\u63db\u306e\u305f\u3081\u306e\u72ec\u81ea\u306e\u30c9\u30e1\u30a4\u30f3\u56fa\u6709\u8a00\u8a9e\uff08DSL\uff09\u3092\u958b\u767a\u3057\u307e\u3057\u305f\u3002\u3053\u306eDSL\u306f\u975e\u5e38\u306b\u4f7f\u3044\u3084\u3059\u304f\u3001\u4eba\u9593\u304c\u8aad\u307f\u3084\u3059\u3044\u4e0a\u306b\u3001\u8907\u96d1\u306a\u30af\u30a8\u30ea\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u3053\u306e\u8a00\u8a9e\u306e2\u3064\u306e\u4e3b\u8981\u306a\u69cb\u6210\u8981\u7d20\u306f\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3068\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5f8c\u8005\u306b\u3064\u3044\u3066\u306f\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8aac\u660e\u3057\u307e\u3059\u3002</p> <p>\u540d\u524d\u304c\u793a\u3059\u3088\u3046\u306b\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306b\u8003\u616e\u3059\u3079\u304d\u6761\u4ef6\u3084\u95a2\u4fc2\u3092\u8868\u3057\u307e\u3059\u3002\u4e3b\u306a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306f\u4ee5\u4e0b\u306e3 \u3064\u3067\u3059<sup>1</sup>\uff1a</p> <ol> <li>\u9078\u629e: <code>df.select(...)</code>, <code>df.with_columns(...)</code></li> <li>\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0: <code>df.filter()</code></li> <li>\u30b0\u30eb\u30fc\u30d7\u5316 / \u96c6\u8a08: <code>df.group_by(...).agg(...)</code></li> </ol> <p>\u4ee5\u4e0b\u306e\u4f8b\u306f\u3001\u6b21\u306e <code>DataFrame</code> \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059:</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df = pl.DataFrame(\n    {\n        \"nrs\": [1, 2, 3, None, 5],\n        \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", None],\n        \"random\": np.random.rand(5),\n        \"groups\": [\"A\", \"A\", \"B\", \"C\", \"B\"],\n    }\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>use rand::{thread_rng, Rng};\n\nlet mut arr = [0f64; 5];\nthread_rng().fill(&amp;mut arr);\n\nlet df = df! (\n    \"nrs\" =&gt; &amp;[Some(1), Some(2), Some(3), None, Some(5)],\n    \"names\" =&gt; &amp;[Some(\"foo\"), Some(\"ham\"), Some(\"spam\"), Some(\"eggs\"), None],\n    \"random\" =&gt; &amp;arr,\n    \"groups\" =&gt; &amp;[\"A\", \"A\", \"B\", \"C\", \"B\"],\n)?;\n\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2502\n\u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n\u2502 i64  \u2506 str   \u2506 f64      \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 foo   \u2506 0.154163 \u2506 A      \u2502\n\u2502 2    \u2506 ham   \u2506 0.74005  \u2506 A      \u2502\n\u2502 3    \u2506 spam  \u2506 0.263315 \u2506 B      \u2502\n\u2502 null \u2506 egg   \u2506 0.533739 \u2506 C      \u2502\n\u2502 5    \u2506 null  \u2506 0.014575 \u2506 B      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/concepts/contexts/#_2","title":"\u9078\u629e","text":"<p>\u9078\u629e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306f\u3001\u30ab\u30e9\u30e0\u306b\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u9069\u7528\u3057\u307e\u3059\u3002<code>select</code>\u306f\u3001\u96c6\u8a08\u3001\u5f0f\u306e\u7d44\u307f\u5408\u308f\u305b\u3001\u307e\u305f\u306f\u65b0\u3057\u3044\u30ea\u30c6\u30e9\u30eb\u306e\u30ab\u30e9\u30e0\u306e\u751f\u6210\u3092\u884c\u3044\u307e\u3059\u3002</p> <p>\u9078\u629e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u3001\u3059\u3079\u3066\u540c\u3058\u9577\u3055\u306e <code>Series</code> \u3092\u751f\u6210\u3059\u308b\u304b\u3001\u9577\u3055\u304c 1 \u306e <code>Series</code> \u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30ea\u30c6\u30e9\u30eb\u306f\u9577\u3055 1 \u306e <code>Series</code> \u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002</p> <p>\u4e00\u90e8\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u304c\u9577\u3055 1 \u306e <code>Series</code> \u3092\u751f\u6210\u3057\u3001\u4ed6\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u304c\u9577\u3055 1 \u3067\u306f\u306a\u3044\u5834\u5408\u3001\u9577\u3055 1 \u306e <code>Series</code> \u306f\u6b8b\u308a\u306e <code>Series</code> \u306e\u9577\u3055\u306b\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u307e\u3059\u3002 \u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306f\u3001\u5f0f\u5185\u90e8\u3067\u3082\u767a\u751f\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4f8b\u3048\u3070\u3001<code>pl.col.value() / pl.col.value.sum()</code> \u3067\u306f\u3001<code>value</code> \u30ab\u30e9\u30e0\u306e\u5404\u8981\u7d20\u304c\u30ab\u30e9\u30e0\u306e\u5408\u8a08\u3067\u9664\u3055\u308c\u307e\u3059\u3002</p>  Python Rust <p> <code>select</code> <pre><code>out = df.select(\n    pl.sum(\"nrs\"),\n    pl.col(\"names\").sort(),\n    pl.col(\"names\").first().alias(\"first name\"),\n    (pl.mean(\"nrs\") * 10).alias(\"10xnrs\"),\n)\nprint(out)\n</code></pre></p> <p> <code>select</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([\n        sum(\"nrs\"),\n        col(\"names\").sort(Default::default()),\n        col(\"names\").first().alias(\"first name\"),\n        (mean(\"nrs\") * lit(10)).alias(\"10xnrs\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2506 first name \u2506 10xnrs \u2502\n\u2502 --- \u2506 ---   \u2506 ---        \u2506 ---    \u2502\n\u2502 i64 \u2506 str   \u2506 str        \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 11  \u2506 null  \u2506 foo        \u2506 27.5   \u2502\n\u2502 11  \u2506 egg   \u2506 foo        \u2506 27.5   \u2502\n\u2502 11  \u2506 foo   \u2506 foo        \u2506 27.5   \u2502\n\u2502 11  \u2506 ham   \u2506 foo        \u2506 27.5   \u2502\n\u2502 11  \u2506 spam  \u2506 foo        \u2506 27.5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u30af\u30a8\u30ea\u304b\u3089\u5206\u304b\u308b\u3088\u3046\u306b\u3001\u9078\u629e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306f\u975e\u5e38\u306b\u5f37\u529b\u3067\u3001\u304a\u4e92\u3044\u306b\u72ec\u7acb\u3057\u3066\uff08\u305d\u3057\u3066\u4e26\u884c\u3057\u3066\uff09\u4efb\u610f\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u8a55\u4fa1\u3067\u304d\u307e\u3059\u3002</p> <p><code>select</code> \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3068\u540c\u69d8\u306b\u3001<code>with_columns</code> \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3082\u9078\u629e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u5165\u308a\u307e\u3059\u3002<code>with_columns</code> \u3068 <code>select</code> \u306e\u4e3b\u306a\u9055\u3044\u306f\u3001<code>with_columns</code> \u306f\u5143\u306e\u30ab\u30e9\u30e0\u3092\u4fdd\u6301\u3057\u65b0\u3057\u3044\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001<code>select</code> \u306f\u5143\u306e\u30ab\u30e9\u30e0\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p>  Python Rust <p> <code>with_columns</code> <pre><code>df = df.with_columns(\n    pl.sum(\"nrs\").alias(\"nrs_sum\"),\n    pl.col(\"random\").count().alias(\"count\"),\n)\nprint(df)\n</code></pre></p> <p> <code>with_columns</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .with_columns([\n        sum(\"nrs\").alias(\"nrs_sum\"),\n        col(\"random\").count().alias(\"count\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (5, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2506 nrs_sum \u2506 count \u2502\n\u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2506 ---     \u2506 ---   \u2502\n\u2502 i64  \u2506 str   \u2506 f64      \u2506 str    \u2506 i64     \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 foo   \u2506 0.154163 \u2506 A      \u2506 11      \u2506 5     \u2502\n\u2502 2    \u2506 ham   \u2506 0.74005  \u2506 A      \u2506 11      \u2506 5     \u2502\n\u2502 3    \u2506 spam  \u2506 0.263315 \u2506 B      \u2506 11      \u2506 5     \u2502\n\u2502 null \u2506 egg   \u2506 0.533739 \u2506 C      \u2506 11      \u2506 5     \u2502\n\u2502 5    \u2506 null  \u2506 0.014575 \u2506 B      \u2506 11      \u2506 5     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/concepts/contexts/#_3","title":"\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306f\u3001<code>Boolean</code> \u30c7\u30fc\u30bf\u578b\u306b\u8a55\u4fa1\u3055\u308c\u308b 1 \u3064\u4ee5\u4e0a\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306b\u57fa\u3065\u3044\u3066 <code>DataFrame</code> \u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>filter</code> <pre><code>out = df.filter(pl.col(\"nrs\") &gt; 2)\nprint(out)\n</code></pre></p> <p> <code>filter</code> <pre><code>let out = df.clone().lazy().filter(col(\"nrs\").gt(lit(2))).collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (2, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2506 random   \u2506 groups \u2506 nrs_sum \u2506 count \u2502\n\u2502 --- \u2506 ---   \u2506 ---      \u2506 ---    \u2506 ---     \u2506 ---   \u2502\n\u2502 i64 \u2506 str   \u2506 f64      \u2506 str    \u2506 i64     \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3   \u2506 spam  \u2506 0.263315 \u2506 B      \u2506 11      \u2506 5     \u2502\n\u2502 5   \u2506 null  \u2506 0.014575 \u2506 B      \u2506 11      \u2506 5     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/concepts/contexts/#_4","title":"\u30b0\u30eb\u30fc\u30d7\u5316 / \u96c6\u8a08","text":"<p><code>group_by</code>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u30b0\u30eb\u30fc\u30d7\u3092\u5358\u4f4d\u3068\u3057\u3066\u6a5f\u80fd\u3059\u308b\u305f\u3081\u3001\u7d50\u679c\u306e\u30c7\u30fc\u30bf\u9577\u306f\u69d8\u3005\u3067\u3059\uff08\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u30e1\u30f3\u30d0\u30fc\u6570\u306b\u4f9d\u5b58\u3057\u307e\u3059\uff09\u3002</p>  Python Rust <p> <code>group_by</code> <pre><code>out = df.group_by(\"groups\").agg(\n    pl.sum(\"nrs\"),  # sum nrs by groups\n    pl.col(\"random\").count().alias(\"count\"),  # count group members\n    # sum random where name != null\n    pl.col(\"random\").filter(pl.col(\"names\").is_not_null()).sum().name.suffix(\"_sum\"),\n    pl.col(\"names\").reverse().alias(\"reversed names\"),\n)\nprint(out)\n</code></pre></p> <p> <code>group_by</code> <pre><code>let out = df\n    .lazy()\n    .group_by([col(\"groups\")])\n    .agg([\n        sum(\"nrs\"),                           // sum nrs by groups\n        col(\"random\").count().alias(\"count\"), // count group members\n        // sum random where name != null\n        col(\"random\")\n            .filter(col(\"names\").is_not_null())\n            .sum()\n            .name()\n            .suffix(\"_sum\"),\n        col(\"names\").reverse().alias(\"reversed names\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (3, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 groups \u2506 nrs \u2506 count \u2506 random_sum \u2506 reversed names \u2502\n\u2502 ---    \u2506 --- \u2506 ---   \u2506 ---        \u2506 ---            \u2502\n\u2502 str    \u2506 i64 \u2506 u32   \u2506 f64        \u2506 list[str]      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A      \u2506 3   \u2506 2     \u2506 0.894213   \u2506 [\"ham\", \"foo\"] \u2502\n\u2502 C      \u2506 0   \u2506 1     \u2506 0.533739   \u2506 [\"egg\"]        \u2502\n\u2502 B      \u2506 8   \u2506 2     \u2506 0.263315   \u2506 [null, \"spam\"] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u7d50\u679c\u304b\u3089\u5206\u304b\u308b\u3088\u3046\u306b\u3001<code>group_by</code> \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30b0\u30eb\u30fc\u30d7\u306b\u5bfe\u3057\u3066\u3059\u3079\u3066\u306e\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002\u6a19\u6e96\u306e <code>group_by</code> \u306e\u4ed6\u306b\u3001<code>group_by_dynamic</code> \u304a\u3088\u3073 <code>group_by_rolling</code> \u3082\u30b0\u30eb\u30fc\u30d7\u5316\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u3059\u3002</p> <ol> <li> <p>\u3053\u306e\u30ac\u30a4\u30c9\u306e\u5f8c\u306e\u90e8\u5206\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b List \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3068 SQL \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u7c21\u5358\u306e\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u5bfe\u8c61\u5916\u3068\u3057\u307e\u3059\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"user-guide/concepts/data-structures/","title":"\u30c7\u30fc\u30bf\u69cb\u9020","text":"<p>Polars \u304c\u63d0\u4f9b\u3059\u308b\u30b3\u30a2\u3068\u306a\u308b\u57fa\u672c\u30c7\u30fc\u30bf\u69cb\u9020\u306f <code>Series</code> \u3068 <code>DataFrame</code> \u3067\u3059\u3002</p>"},{"location":"user-guide/concepts/data-structures/#series","title":"Series","text":"<p>Series \u306f 1 \u6b21\u5143\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002Series \u5185\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u306f\u540c\u3058 \u30c7\u30fc\u30bf\u578b \u3092\u6301\u3061\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u306f\u3001\u7c21\u5358\u306a\u540d\u524d\u4ed8\u304d <code>Series</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>  Python Rust <p> <code>Series</code> <pre><code>import polars as pl\n\ns = pl.Series(\"a\", [1, 2, 3, 4, 5])\nprint(s)\n</code></pre></p> <p> <code>Series</code> <pre><code>use polars::prelude::*;\n\nlet s = Series::new(\"a\", &amp;[1, 2, 3, 4, 5]);\n\nprintln!(\"{}\", s);\n</code></pre></p> <pre><code>shape: (5,)\nSeries: 'a' [i64]\n[\n    1\n    2\n    3\n    4\n    5\n]\n</code></pre>"},{"location":"user-guide/concepts/data-structures/#dataframe","title":"DataFrame","text":"<p><code>DataFrame</code> \u306f 2 \u6b21\u5143\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3042\u308a\u3001 <code>Series</code> \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08\u30ea\u30b9\u30c8\u306a\u3069\uff09\u306e\u62bd\u8c61\u5316\u3068\u898b\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002<code>DataFrame</code> \u3067\u5b9f\u884c\u3067\u304d\u308b\u64cd\u4f5c\u306f <code>SQL</code> \u30af\u30a8\u30ea\u3068\u975e\u5e38\u306b\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\u3002<code>GROUP BY</code>\u3001<code>JOIN</code>\u3001<code>PIVOT</code> \u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u3001\u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>from datetime import datetime\n\ndf = pl.DataFrame(\n    {\n        \"integer\": [1, 2, 3, 4, 5],\n        \"date\": [\n            datetime(2022, 1, 1),\n            datetime(2022, 1, 2),\n            datetime(2022, 1, 3),\n            datetime(2022, 1, 4),\n            datetime(2022, 1, 5),\n        ],\n        \"float\": [4.0, 5.0, 6.0, 7.0, 8.0],\n    }\n)\n\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>use chrono::NaiveDate;\n\nlet df: DataFrame = df!(\n    \"integer\" =&gt; &amp;[1, 2, 3, 4, 5],\n    \"date\" =&gt; &amp;[\n        NaiveDate::from_ymd_opt(2025, 1, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(),\n        NaiveDate::from_ymd_opt(2025, 1, 2).unwrap().and_hms_opt(0, 0, 0).unwrap(),\n        NaiveDate::from_ymd_opt(2025, 1, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(),\n        NaiveDate::from_ymd_opt(2025, 1, 4).unwrap().and_hms_opt(0, 0, 0).unwrap(),\n        NaiveDate::from_ymd_opt(2025, 1, 5).unwrap().and_hms_opt(0, 0, 0).unwrap(),\n    ],\n    \"float\" =&gt; &amp;[4.0, 5.0, 6.0, 7.0, 8.0]\n)\n.unwrap();\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integer \u2506 date                \u2506 float \u2502\n\u2502 ---     \u2506 ---                 \u2506 ---   \u2502\n\u2502 i64     \u2506 datetime[\u03bcs]        \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1       \u2506 2022-01-01 00:00:00 \u2506 4.0   \u2502\n\u2502 2       \u2506 2022-01-02 00:00:00 \u2506 5.0   \u2502\n\u2502 3       \u2506 2022-01-03 00:00:00 \u2506 6.0   \u2502\n\u2502 4       \u2506 2022-01-04 00:00:00 \u2506 7.0   \u2502\n\u2502 5       \u2506 2022-01-05 00:00:00 \u2506 8.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/concepts/data-structures/#_2","title":"\u30c7\u30fc\u30bf\u306e\u8868\u793a","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001<code>DataFrame</code> \u5185\u306e\u30c7\u30fc\u30bf\u306e\u8868\u793a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u524d\u306e\u4f8b\u3067\u4f7f\u7528\u3057\u305f <code>DataFrame</code> \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/concepts/data-structures/#head","title":"Head","text":"<p><code>head</code> \u95a2\u6570\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 <code>DataFrame</code> \u306e\u6700\u521d\u306e 5 \u884c\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u8868\u793a\u3059\u308b\u884c\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff08\u4f8b: <code>df.head(10)</code>\uff09\u3002</p>  Python Rust <p> <code>head</code> <pre><code>print(df.head(3))\n</code></pre></p> <p> <code>head</code> <pre><code>let df_head = df.head(Some(3));\n\nprintln!(\"{}\", df_head);\n</code></pre></p> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integer \u2506 date                \u2506 float \u2502\n\u2502 ---     \u2506 ---                 \u2506 ---   \u2502\n\u2502 i64     \u2506 datetime[\u03bcs]        \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1       \u2506 2022-01-01 00:00:00 \u2506 4.0   \u2502\n\u2502 2       \u2506 2022-01-02 00:00:00 \u2506 5.0   \u2502\n\u2502 3       \u2506 2022-01-03 00:00:00 \u2506 6.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/concepts/data-structures/#tail","title":"Tail","text":"<p><code>tail</code> \u95a2\u6570\u306f\u3001<code>DataFrame</code> \u306e\u6700\u5f8c\u306e 5 \u884c\u3092\u8868\u793a\u3057\u307e\u3059\u3002<code>head</code> \u3068\u540c\u69d8\u306b\u3001\u8868\u793a\u3059\u308b\u884c\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>tail</code> <pre><code>print(df.tail(3))\n</code></pre></p> <p> <code>tail</code> <pre><code>let df_tail = df.tail(Some(3));\n\nprintln!(\"{}\", df_tail);\n</code></pre></p> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integer \u2506 date                \u2506 float \u2502\n\u2502 ---     \u2506 ---                 \u2506 ---   \u2502\n\u2502 i64     \u2506 datetime[\u03bcs]        \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3       \u2506 2022-01-03 00:00:00 \u2506 6.0   \u2502\n\u2502 4       \u2506 2022-01-04 00:00:00 \u2506 7.0   \u2502\n\u2502 5       \u2506 2022-01-05 00:00:00 \u2506 8.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/concepts/data-structures/#sample","title":"Sample","text":"<p><code>DataFrame</code> \u306e\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u628a\u63e1\u3057\u305f\u3044\u5834\u5408\u306f\u3001<code>sample</code> \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002<code>sample</code> \u3092\u4f7f\u3046\u3068\u3001<code>DataFrame</code> \u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b n \u884c\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>sample</code> <pre><code>print(df.sample(2))\n</code></pre></p> <p> <code>sample_n</code> <pre><code>let n = Series::new(\"\", &amp;[2]);\nlet sampled_df = df.sample_n(&amp;n, false, false, None).unwrap();\n\nprintln!(\"{}\", sampled_df);\n</code></pre></p> <pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integer \u2506 date                \u2506 float \u2502\n\u2502 ---     \u2506 ---                 \u2506 ---   \u2502\n\u2502 i64     \u2506 datetime[\u03bcs]        \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 4       \u2506 2022-01-04 00:00:00 \u2506 7.0   \u2502\n\u2502 3       \u2506 2022-01-03 00:00:00 \u2506 6.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/concepts/data-structures/#describe","title":"Describe","text":"<p><code>Describe</code> \u306f\u3001<code>DataFrame</code> \u306e\u8981\u7d04\u7d71\u8a08\u91cf\u3092\u8fd4\u3057\u307e\u3059\u3002\u53ef\u80fd\u306a\u5834\u5408\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u57fa\u672c\u7684\u306a\u7d71\u8a08\u91cf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>describe</code> <pre><code>print(df.describe())\n</code></pre></p> <p> <code>describe</code> \u00b7  Available on feature describe <pre><code>// Not available in Rust\n</code></pre></p> <pre><code>shape: (9, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 statistic  \u2506 integer  \u2506 date                \u2506 float    \u2502\n\u2502 ---        \u2506 ---      \u2506 ---                 \u2506 ---      \u2502\n\u2502 str        \u2506 f64      \u2506 str                 \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 count      \u2506 5.0      \u2506 5                   \u2506 5.0      \u2502\n\u2502 null_count \u2506 0.0      \u2506 0                   \u2506 0.0      \u2502\n\u2502 mean       \u2506 3.0      \u2506 2022-01-03 00:00:00 \u2506 6.0      \u2502\n\u2502 std        \u2506 1.581139 \u2506 null                \u2506 1.581139 \u2502\n\u2502 min        \u2506 1.0      \u2506 2022-01-01 00:00:00 \u2506 4.0      \u2502\n\u2502 25%        \u2506 2.0      \u2506 2022-01-02 00:00:00 \u2506 5.0      \u2502\n\u2502 50%        \u2506 3.0      \u2506 2022-01-03 00:00:00 \u2506 6.0      \u2502\n\u2502 75%        \u2506 4.0      \u2506 2022-01-04 00:00:00 \u2506 7.0      \u2502\n\u2502 max        \u2506 5.0      \u2506 2022-01-05 00:00:00 \u2506 8.0      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/concepts/expressions/","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3","text":"<p>Polars \u306b\u306f\u3001\u975e\u5e38\u306b\u9ad8\u901f\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u4e2d\u5fc3\u3068\u306a\u308b\u5f37\u529b\u306a\u6982\u5ff5\u3067\u3042\u308b\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u3001\u591a\u304f\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u306e\u4e2d\u6838\u3092\u306a\u3057\u3066\u3044\u307e\u3059:</p> <ul> <li>\u30ab\u30e9\u30e0\u304b\u3089\u306e\u884c\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0</li> <li>\u30ab\u30e9\u30e0\u5185\u306e\u5024\u306e\u4e57\u7b97</li> <li>\u65e5\u4ed8\u304b\u3089\u306e\u5e74\u306e\u30ab\u30e9\u30e0\u306e\u62bd\u51fa</li> <li>\u6587\u5b57\u5217\u30ab\u30e9\u30e0\u3092\u5c0f\u6587\u5b57\u306b\u5909\u63db</li> <li>\u306a\u3069\u306a\u3069!</li> </ul> <p>\u307e\u305f\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u4ed6\u306e\u64cd\u4f5c\u3067\u3082\u4f7f\u7528\u3055\u308c\u307e\u3059:</p> <ul> <li><code>group_by</code> \u64cd\u4f5c\u3067\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u5e73\u5747\u306e\u53d6\u5f97</li> <li><code>group_by</code> \u64cd\u4f5c\u3067\u306e\u30b0\u30eb\u30fc\u30d7\u30b5\u30a4\u30ba\u306e\u8a08\u7b97</li> <li>\u5217\u306b\u308f\u305f\u308b\u5408\u8a08\u306e\u53d6\u5f97</li> </ul> <p>Polars \u306f\u3001\u3053\u308c\u3089\u306e\u30b3\u30a2\u30c7\u30fc\u30bf\u5909\u63db\u3092\u4ee5\u4e0b\u306b\u3088\u3063\u3066\u975e\u5e38\u306b\u9ad8\u901f\u306b\u5b9f\u884c\u3057\u307e\u3059:</p> <ul> <li>\u5404\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u81ea\u52d5\u30af\u30a8\u30ea\u6700\u9069\u5316</li> <li>\u591a\u6570\u306e\u30ab\u30e9\u30e0\u3067\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u81ea\u52d5\u4e26\u5217\u5316</li> </ul> <p>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u30011\u3064\u4ee5\u4e0a\u306e Series \u306e\u69cb\u7bc9\u624b\u9806\u3092\u8868\u3059\u3001\u4e00\u9023\u306e\u64cd\u4f5c\u3067\u3059\u3002\u51fa\u529b\u304c Series \u3067\u3042\u308b\u305f\u3081\u3001\u524d\u306e\u30b9\u30c6\u30c3\u30d7\u304b\u3089\u306e\u51fa\u529b\u3092\u5909\u63db\u3059\u308b\u4e00\u9023\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u7c21\u5358\u306b\u9069\u7528\u3067\u304d\u307e\u3059\uff08pandas \u306e\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306b\u4f3c\u3066\u3044\u307e\u3059\uff09\u3002</p> <p>\u3053\u308c\u304c\u62bd\u8c61\u7684\u3067\u5206\u304b\u308a\u306b\u304f\u304f\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3054\u5b89\u5fc3\u304f\u3060\u3055\u3044\uff01\u3044\u304f\u3064\u304b\u306e\u4f8b\u3092\u898b\u3066\u3044\u304f\u3060\u3051\u3067\u3001\u3059\u3050\u306b\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u76f4\u611f\u304c\u8eab\u306b\u3064\u304d\u307e\u3059\u3002\u6b21\u306b\u305d\u308c\u3092\u5b9f\u8df5\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"user-guide/concepts/expressions/#_2","title":"\u4f8b","text":"<p>\u4ee5\u4e0b\u306f\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3067\u3059:</p>  Python Rust <p> <code>col</code> \u00b7 <code>sort</code> \u00b7 <code>head</code> <pre><code>pl.col(\"foo\").sort().head(2)\n</code></pre></p> <p> <code>col</code> \u00b7 <code>sort</code> \u00b7 <code>head</code> <pre><code>let _ = col(\"foo\").sort(Default::default()).head(Some(2));\n</code></pre></p> <p>\u4e0a\u8a18\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059:</p> <ol> <li>\"foo\" \u30ab\u30e9\u30e0\u3092\u9078\u629e\u3059\u308b</li> <li>\u305d\u306e\u5f8c\u3001\u30ab\u30e9\u30e0\u3092\u30bd\u30fc\u30c8\u3059\u308b\uff08\u6607\u9806\uff09</li> <li>\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u51fa\u529b\u306e\u6700\u521d\u306e2\u3064\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b</li> </ol> <p>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u529b\u306f\u3001\u3059\u3079\u3066\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u304c\u65b0\u3057\u3044\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3057\u3001\u305d\u308c\u3089\u3092\u30d1\u30a4\u30d7\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002 Polars \u306e\u5b9f\u884c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e1\u3064\u306b\u6e21\u3057\u3066\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u306f <code>df.select</code> \u3092\u4f7f\u3063\u30662\u3064\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059:</p>  Python Rust <p> <code>select</code> <pre><code>df.select(pl.col(\"foo\").sort().head(2), pl.col(\"bar\").filter(pl.col(\"foo\") == 1).sum())\n</code></pre></p> <p> <code>select</code> <pre><code>df.clone()\n    .lazy()\n    .select([\n        col(\"foo\").sort(Default::default()).head(Some(2)),\n        col(\"bar\").filter(col(\"foo\").eq(lit(1))).sum(),\n    ])\n    .collect()?;\n</code></pre></p> <p>\u3059\u3079\u3066\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u4e26\u5217\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u5404\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u5185\u3067\u3055\u3089\u306a\u308b\u4e26\u5217\u5316\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/concepts/expressions/#_3","title":"\u7d50\u8ad6","text":"<p>\u53ef\u80fd\u306a\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u6c37\u5c71\u306e\u4e00\u89d2\u306b\u3059\u304e\u307e\u305b\u3093\u3002\u3055\u3089\u306b\u591a\u304f\u306e\u3082\u306e\u304c\u3042\u308a\u3001\u3055\u307e\u3056\u307e\u306a\u65b9\u6cd5\u3067\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30da\u30fc\u30b8\u306f\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u6df1\u304f\u6398\u308a\u4e0b\u3052\u3066\u3044\u304f\u524d\u306b\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u6982\u5ff5\u306b\u6163\u308c\u3066\u3044\u305f\u3060\u304f\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/concepts/lazy-vs-eager/","title":"Lazy / eager API","text":"<p>Polars \u306f 2 \u3064\u306e\u52d5\u4f5c\u30e2\u30fc\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059: lazy \u3068 eager \u3067\u3059\u3002eager API \u3067\u306f\u3001\u30af\u30a8\u30ea\u304c\u5373\u5ea7\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u304c\u3001lazy API \u3067\u306f\u3001\u30af\u30a8\u30ea\u304c\u300c\u5fc5\u8981\u300d\u3068\u3055\u308c\u308b\u307e\u3067\u8a55\u4fa1\u3055\u308c\u307e\u305b\u3093\u3002\u6700\u5f8c\u306e\u77ac\u9593\u307e\u3067\u5b9f\u884c\u3092\u9045\u3089\u305b\u308b\u3053\u3068\u3067\u3001\u5927\u5e45\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5411\u4e0a\u304c\u671f\u5f85\u3067\u304d\u308b\u305f\u3081\u3001\u307b\u3068\u3093\u3069\u306e\u5834\u5408 Lazy API \u304c\u597d\u307e\u3057\u3044\u3067\u3059\u3002\u4f8b\u3092\u4f7f\u3063\u3066\u8aac\u660e\u3057\u307e\u3059:</p>  Python Rust <p> <code>read_csv</code> <pre><code>df = pl.read_csv(\"docs/data/iris.csv\")\ndf_small = df.filter(pl.col(\"sepal_length\") &gt; 5)\ndf_agg = df_small.group_by(\"species\").agg(pl.col(\"sepal_width\").mean())\nprint(df_agg)\n</code></pre></p> <p> <code>CsvReader</code> \u00b7  Available on feature csv <pre><code>let df = CsvReader::from_path(\"docs/data/iris.csv\")\n    .unwrap()\n    .finish()\n    .unwrap();\nlet mask = df.column(\"sepal_length\")?.f64()?.gt(5.0);\nlet df_small = df.filter(&amp;mask)?;\n#[allow(deprecated)]\nlet df_agg = df_small\n    .group_by([\"species\"])?\n    .select([\"sepal_width\"])\n    .mean()?;\nprintln!(\"{}\", df_agg);\n</code></pre></p> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001eager API \u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u3092\u884c\u3063\u3066\u3044\u307e\u3059:</p> <ol> <li>iris dataset \u3092\u8aad\u307f\u8fbc\u3080</li> <li>\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092sepal length \u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b</li> <li>\u7a2e\u3054\u3068\u306esepal width \u306e\u5e73\u5747\u3092\u8a08\u7b97\u3059\u308b</li> </ol> <p>\u5404\u30b9\u30c6\u30c3\u30d7\u304c\u5373\u5ea7\u306b\u5b9f\u884c\u3055\u308c\u3001\u4e2d\u9593\u7d50\u679c\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3060\u308a\u3001\u4e0d\u8981\u306a\u51e6\u7406\u3092\u884c\u3063\u305f\u308a\u3059\u308b\u306a\u3069\u3001\u7121\u99c4\u304c\u751f\u3058\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4ee3\u308f\u308a\u306b lazy API \u3092\u4f7f\u3044\u3001\u3059\u3079\u3066\u306e\u30b9\u30c6\u30c3\u30d7\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304b\u3089\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u30ca\u30fc\u304c\u6700\u9069\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p> <ul> <li>Predicate pushdown: \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\u6642\u306b\u53ef\u80fd\u306a\u9650\u308a\u65e9\u304f\u30d5\u30a3\u30eb\u30bf\u3092\u9069\u7528\u3057\u3001sepal length \u304c 5 \u3088\u308a\u5927\u304d\u3044\u884c\u306e\u307f\u8aad\u307f\u8fbc\u3080</li> <li>Projection pushdown: \u5fc5\u8981\u306a\u30ab\u30e9\u30e0\uff08sepal width\uff09\u306e\u307f\u8aad\u307f\u8fbc\u307f\u3001\u4e0d\u8981\u306a\u30ab\u30e9\u30e0\uff08petal length &amp; petal width\uff09\u306f\u8aad\u307f\u8fbc\u307e\u306a\u3044</li> </ul>  Python Rust <p> <code>scan_csv</code> <pre><code>q = (\n    pl.scan_csv(\"docs/data/iris.csv\")\n    .filter(pl.col(\"sepal_length\") &gt; 5)\n    .group_by(\"species\")\n    .agg(pl.col(\"sepal_width\").mean())\n)\n\ndf = q.collect()\n</code></pre></p> <p> <code>LazyCsvReader</code> \u00b7  Available on feature csv <pre><code>let q = LazyCsvReader::new(\"docs/data/iris.csv\")\n    .has_header(true)\n    .finish()?\n    .filter(col(\"sepal_length\").gt(lit(5)))\n    .group_by(vec![col(\"species\")])\n    .agg([col(\"sepal_width\").mean()]);\nlet df = q.collect()?;\nprintln!(\"{}\", df);\n</code></pre></p> <p>\u3053\u308c\u3089\u306e\u6700\u9069\u5316\u306b\u3088\u308a\u3001\u30e1\u30e2\u30ea\u3068 CPU \u306e\u8ca0\u8377\u304c\u5927\u5e45\u306b\u8efd\u6e1b\u3055\u308c\u3001\u3088\u308a\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30e1\u30e2\u30ea\u4e0a\u3067\u51e6\u7406\u3057\u3001\u9ad8\u901f\u306b\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u30af\u30a8\u30ea\u306e\u5b9a\u7fa9\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001<code>collect</code> \u3092\u547c\u3073\u51fa\u3057\u3066\u5b9f\u884c\u3092\u6307\u793a\u3057\u307e\u3059\u3002Lazy API \u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306f\u3001\u5f8c\u306e\u7ae0\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002</p> <p>Eager API</p> <p>\u591a\u304f\u306e\u5834\u5408\u3001eager API \u306f\u5185\u90e8\u3067 lazy API \u3092\u547c\u3073\u51fa\u3057\u3001\u5373\u5ea7\u306b\u7d50\u679c\u3092\u53ce\u96c6\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30af\u30a8\u30ea\u5185\u90e8\u3067\u306e\u6700\u9069\u5316\u3082\u884c\u308f\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/concepts/lazy-vs-eager/#_1","title":"\u4f7f\u3044\u5206\u3051","text":"<p>\u4e00\u822c\u7684\u306b\u3001lazy API \u3092\u4f7f\u3046\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u4e2d\u9593\u7d50\u679c\u306b\u8208\u5473\u304c\u3042\u308b\u5834\u5408\u3084\u3001\u63a2\u7d22\u7684\u306a\u4f5c\u696d\u3092\u884c\u3063\u3066\u3044\u3066\u3001\u30af\u30a8\u30ea\u306e\u5f62\u304c\u78ba\u5b9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001eager API \u3092\u4f7f\u3046\u3053\u3068\u3082\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/concepts/streaming/","title":"\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9","text":"<p>lazy API\u306e\u8ffd\u52a0\u306e\u5229\u70b9\u306e1\u3064\u306f\u3001\u30af\u30a8\u30ea\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u65b9\u5f0f\u3067\u5b9f\u884c\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002Polars\u306f\u4e00\u5ea6\u306b\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30d0\u30c3\u30c1\u51e6\u7406\u3059\u308b\u3053\u3068\u3067\u3001\u30e1\u30e2\u30ea\u4ee5\u4e0a\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u51e6\u7406\u3067\u304d\u307e\u3059\u3002</p> <p>Polars\u306b\u30af\u30a8\u30ea\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u305b\u308b\u306b\u306f\u3001<code>collect</code>\u30e1\u30bd\u30c3\u30c9\u306b<code>streaming=True</code>\u5f15\u6570\u3092\u6e21\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>collect</code> <pre><code>q1 = (\n    pl.scan_csv(\"docs/data/iris.csv\")\n    .filter(pl.col(\"sepal_length\") &gt; 5)\n    .group_by(\"species\")\n    .agg(pl.col(\"sepal_width\").mean())\n)\ndf = q1.collect(streaming=True)\n</code></pre></p> <p> <code>collect</code> \u00b7  Available on feature streaming <pre><code>let q1 = LazyCsvReader::new(\"docs/data/iris.csv\")\n    .has_header(true)\n    .finish()?\n    .filter(col(\"sepal_length\").gt(lit(5)))\n    .group_by(vec![col(\"species\")])\n    .agg([col(\"sepal_width\").mean()]);\n\nlet df = q1.clone().with_streaming(true).collect()?;\nprintln!(\"{}\", df);\n</code></pre></p>"},{"location":"user-guide/concepts/streaming/#_2","title":"\u3044\u3064\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u304c\u5229\u7528\u53ef\u80fd\u304b","text":"<p>\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u306f\u73fe\u5728\u958b\u767a\u4e2d\u3067\u3059\u3002Polars\u306b\u4efb\u610f\u306elazy\u30af\u30a8\u30ea\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u3059\u3079\u3066\u306elazy\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\u5834\u5408\u3001Polars\u306f\u30ce\u30f3\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u30e2\u30fc\u30c9\u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p> <p>\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059:</p> <ul> <li><code>filter</code>,<code>slice</code>,<code>head</code>,<code>tail</code></li> <li><code>with_columns</code>,<code>select</code></li> <li><code>group_by</code></li> <li><code>join</code></li> <li><code>unique</code></li> <li><code>sort</code></li> <li><code>explode</code>,<code>melt</code></li> <li><code>scan_csv</code>,<code>scan_parquet</code>,<code>scan_ipc</code></li> </ul> <p>\u3053\u306e\u4e00\u89a7\u306f\u5b8c\u5168\u306a\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002Polars\u306f\u6d3b\u767a\u306b\u958b\u767a\u304c\u9032\u3081\u3089\u308c\u3066\u304a\u308a\u3001\u660e\u793a\u7684\u306a\u901a\u77e5\u306a\u3057\u306b\u3001\u3088\u308a\u591a\u304f\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u306b\u5bfe\u5fdc\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/concepts/streaming/#_3","title":"\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u4f8b","text":"<p>\u30af\u30a8\u30ea\u306e\u3069\u306e\u90e8\u5206\u304c\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3055\u308c\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\u3001<code>explain</code>\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u306e\u691c\u67fb\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001Lazy API\u306e\u7ae0\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>  Python Rust <p> <code>explain</code> <pre><code>print(q1.explain(streaming=True))\n</code></pre></p> <p> <code>explain</code> <pre><code>let query_plan = q1.with_streaming(true).explain(true)?;\nprintln!(\"{}\", query_plan);\n</code></pre></p> <pre><code>--- STREAMING\nAGGREGATE\n    [col(\"sepal_width\").mean()] BY [col(\"species\")] FROM\n\n    Csv SCAN docs/data/iris.csv\n    PROJECT 3/5 COLUMNS\n    SELECTION: [(col(\"sepal_length\")) &gt; (5.0)]  --- END STREAMING\n\n  DF []; PROJECT */0 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"user-guide/concepts/streaming/#_4","title":"\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u4f8b","text":"Python Rust <p> <code>explain</code> <pre><code>q2 = pl.scan_csv(\"docs/data/iris.csv\").with_columns(\n    pl.col(\"sepal_length\").mean().over(\"species\")\n)\n\nprint(q2.explain(streaming=True))\n</code></pre></p> <p> <code>explain</code> <pre><code>let q2 = LazyCsvReader::new(\"docs/data/iris.csv\")\n    .finish()?\n    .with_columns(vec![col(\"sepal_length\")\n        .mean()\n        .over(vec![col(\"species\")])\n        .alias(\"sepal_length_mean\")]);\n\nlet query_plan = q2.with_streaming(true).explain(true)?;\nprintln!(\"{}\", query_plan);\n</code></pre></p> <pre><code> WITH_COLUMNS:\n [col(\"sepal_length\").mean().over([col(\"species\")])]\n  --- STREAMING\n\n  Csv SCAN docs/data/iris.csv\n  PROJECT */5 COLUMNS  --- END STREAMING\n\n    DF []; PROJECT */0 COLUMNS; SELECTION: \"None\"\n</code></pre>"},{"location":"user-guide/concepts/data-types/categoricals/","title":"\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf","text":"<p>\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u306f\u3001\u30ab\u30e9\u30e0\u306e\u5024\u304c\u6709\u9650\u306e\u30bb\u30c3\u30c8\u306e\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3092\u8868\u3057\u307e\u3059\uff08\u901a\u5e38\u3001\u30ab\u30e9\u30e0\u306e\u9577\u3055\u3088\u308a\u306f\u308b\u304b\u306b\u5c0f\u3055\u3044\uff09\u3002\u6027\u5225\u3001\u56fd\u3001\u901a\u8ca8\u30da\u30a2\u30ea\u30f3\u30b0\u306a\u3069\u306e\u30ab\u30e9\u30e0\u3092\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u5024\u3092\u5358\u7d14\u306a\u6587\u5b57\u5217\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3068\u3001\u540c\u3058\u6587\u5b57\u5217\u3092\u7e70\u308a\u8fd4\u3057\u4fdd\u5b58\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u30e1\u30e2\u30ea\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u7121\u99c4\u306b\u306a\u308a\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u7d50\u5408\u64cd\u4f5c\u306e\u969b\u306b\u3001\u30b3\u30b9\u30c8\u306e\u304b\u304b\u308b\u6587\u5b57\u5217\u6bd4\u8f03\u3092\u884c\u308f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002</p> <p>\u305d\u306e\u305f\u3081\u3001Polars\u306f\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u5f62\u5f0f\u3067\u30b9\u30c8\u30ea\u30f3\u30b0\u5024\u3092\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u3053\u3068\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002Polars\u3067\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u3092\u6271\u3046\u306b\u306f\u3001<code>Enum</code>\u3068<code>Categorical</code>\u306e2\u3064\u306e\u7570\u306a\u308b\u30c7\u30fc\u30bf\u578b\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306b\u56fa\u6709\u306e\u4f7f\u7528\u4f8b\u304c\u3042\u308a\u3001\u3053\u306e\u30da\u30fc\u30b8\u3067\u3055\u3089\u306b\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002 \u307e\u305a\u306f\u3001Polars\u306b\u304a\u3051\u308b\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u306e\u5b9a\u7fa9\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p> <p>Polars\u3067\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u306f\u3001\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u6587\u5b57\u5217\u30ab\u30e9\u30e0\u3068\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u6587\u5b57\u5217\u30ab\u30e9\u30e0\u306f2\u3064\u306e\u8981\u7d20\u306b\u5206\u5272\u3055\u308c\u307e\u3059\uff1a\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u6574\u6570\u5024\u3068\u5b9f\u969b\u306e\u6587\u5b57\u5217\u5024\u3067\u3059\u3002</p> \u6587\u5b57\u5217\u30ab\u30e9\u30e0 \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30ab\u30e9\u30e0 Series Polar Bear Panda Bear Brown Bear Panda Bear Brown Bear Brown Bear Polar Bear \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5024 0 1 2 1 2 2 0 \u30ab\u30c6\u30b4\u30ea Polar Bear Panda Bear Brown Bear <p>\u3053\u306e\u5834\u5408\u3001\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5024\u306e<code>0</code>\u306f'Polar Bear'\u3092\u8868\u3057\u3001\u5024<code>1</code>\u306f'Panda Bear'\u3001\u5024<code>2</code>\u306f'Brown Bear'\u3092\u8868\u3057\u307e\u3059\u3002\u3053\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u3088\u308a\u3001\u6587\u5b57\u5217\u5024\u30921\u56de\u3060\u3051\u4fdd\u5b58\u3059\u308c\u3070\u3088\u304f\u306a\u308a\u307e\u3059\u3002\u3055\u3089\u306b\u3001\u30bd\u30fc\u30c8\u3084\u30ab\u30a6\u30f3\u30c8\u306a\u3069\u306e\u64cd\u4f5c\u3092\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u5024\u306b\u5bfe\u3057\u3066\u76f4\u63a5\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3088\u308a\u3082\u9ad8\u901f\u3067\u3059\u3002</p>"},{"location":"user-guide/concepts/data-types/categoricals/#enum-vs-categorical","title":"<code>Enum</code> vs <code>Categorical</code>","text":"<p>Polars\u306f\u3001\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u3092\u6271\u3046\u305f\u3081\u306b2\u3064\u306e\u7570\u306a\u308b\u30c7\u30fc\u30bf\u578b\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff1a <code>Enum</code>\u3068<code>Categorical</code>\u3067\u3059\u3002\u30ab\u30c6\u30b4\u30ea\u304c\u4e8b\u524d\u306b\u5206\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f<code>Enum</code>\u3092\u3001\u30ab\u30c6\u30b4\u30ea\u304c\u5206\u304b\u3089\u306a\u3044\u304b\u56fa\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f<code>Categorical</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u8981\u4ef6\u304c\u5909\u308f\u3063\u305f\u5834\u5408\u306f\u3001\u3044\u3064\u3067\u3082\u7247\u65b9\u304b\u3089\u4ed6\u65b9\u306b\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002</p>  Python <pre><code>enum_dtype = pl.Enum([\"Polar\", \"Panda\", \"Brown\"])\nenum_series = pl.Series([\"Polar\", \"Panda\", \"Brown\", \"Brown\", \"Polar\"], dtype=enum_dtype)\ncat_series = pl.Series(\n    [\"Polar\", \"Panda\", \"Brown\", \"Brown\", \"Polar\"], dtype=pl.Categorical\n)\n</code></pre> <p>\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u304b\u3089\u3001<code>Enum</code>\u30c7\u30fc\u30bf\u578b\u306f\u4e8b\u524d\u306b\u30ab\u30c6\u30b4\u30ea\u3092\u8981\u6c42\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001<code>Categorical</code>\u30c7\u30fc\u30bf\u578b\u306f\u30ab\u30c6\u30b4\u30ea\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/concepts/data-types/categoricals/#categorical","title":"<code>Categorical</code>\u30c7\u30fc\u30bf\u578b","text":"<p>Categorical\u30c7\u30fc\u30bf\u578b\u306f\u67d4\u8edf\u6027\u304c\u3042\u308a\u307e\u3059\u3002Polars\u306f\u65b0\u3057\u3044\u30ab\u30c6\u30b4\u30ea\u3092\u898b\u3064\u3051\u308b\u305f\u3073\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\u3053\u308c\u306f<code>Enum</code>\u30c7\u30fc\u30bf\u578b\u306b\u6bd4\u3079\u3066\u660e\u3089\u304b\u306b\u512a\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u805e\u3053\u3048\u307e\u3059\u304c\u3001\u63a8\u8ad6\u306b\u306f\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306e\u4e3b\u306a\u30b3\u30b9\u30c8\u306f\u3001\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5236\u5fa1\u3067\u304d\u306a\u3044\u3053\u3068\u3067\u3059\u3002</p> <p>\u6b21\u306e\u30b7\u30ca\u30ea\u30aa\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u30022\u3064\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb<code>Series</code>\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408</p>  Python <pre><code>cat_series = pl.Series(\n    [\"Polar\", \"Panda\", \"Brown\", \"Brown\", \"Polar\"], dtype=pl.Categorical\n)\ncat2_series = pl.Series(\n    [\"Panda\", \"Brown\", \"Brown\", \"Polar\", \"Polar\"], dtype=pl.Categorical\n)\n# Triggers a CategoricalRemappingWarning: Local categoricals have different encodings, expensive re-encoding is done\nprint(cat_series.append(cat2_series))\n</code></pre> <p>Polars\u306f\u6587\u5b57\u5217\u5024\u3092\u51fa\u73fe\u9806\u306b\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001<code>Series</code>\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059:</p> cat_series cat2_series Physical 0 1 2 2 0 Categories Polar Panda Brown Physical 0 1 1 2 2 Categories Panda Brown Polar <p><code>Series</code> \u306e\u7d50\u5408\u306f\u3001\u4e21\u65b9\u306e <code>Series</code> \u306b\u304a\u3051\u308b\u7269\u7406\u7684\u306a\u50240\u304c\u7570\u306a\u308b\u610f\u5473\u3092\u6301\u3064\u305f\u3081\u3001\u975e\u81ea\u660e\u3067\u9ad8\u30b3\u30b9\u30c8\u306a\u30bf\u30b9\u30af\u3068\u306a\u308a\u307e\u3059\u3002Polars\u306f\u5229\u4fbf\u6027\u306e\u305f\u3081\u306b\u3053\u306e\u7a2e\u306e\u64cd\u4f5c\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4e00\u822c\u7684\u306b\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u4f4e\u4e0b\u3059\u308b\u305f\u3081\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u30de\u30fc\u30b8\u64cd\u4f5c\u3092\u884c\u3046\u524d\u306b\u4e21\u65b9\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4e92\u63db\u6027\u306e\u3042\u308b\u3082\u306e\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002</p>"},{"location":"user-guide/concepts/data-types/categoricals/#string-cache","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u306a string cache \u3092\u4f7f\u3046","text":"<p>\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u4e00\u3064\u306e\u65b9\u6cd5\u306f\u3001<code>StringCache</code> \u3092\u6709\u52b9\u306b\u3059\u308b\u3053\u3068\u3067\u3059\u3002<code>StringCache</code> \u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u3001\u6587\u5b57\u5217\u306f\u5217\u3054\u3068\u306b\u51fa\u73fe\u9806\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u5404\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u5358\u4e00\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u304c\u4fdd\u8a3c\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001<code>StringCache</code> \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u6587\u5b57\u5217 <code>Polar</code> \u306f\u5e38\u306b\u540c\u3058\u7269\u7406\u7684\u30a8\u30f3\u30b3\u30fc\u30c9\u306b\u30de\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30de\u30fc\u30b8\u64cd\u4f5c\uff08\u4f8b\uff1a\u8ffd\u52a0\u3001\u7d50\u5408\uff09\u306f\u30a8\u30f3\u30b3\u30fc\u30c9\u306e\u4e92\u63db\u6027\u3092\u4e8b\u524d\u306b\u78ba\u4fdd\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b\u305f\u3081\u3001\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u4e0a\u8a18\u306e\u554f\u984c\u304c\u89e3\u6c7a\u3055\u308c\u307e\u3059\u3002</p>  Python <pre><code>with pl.StringCache():\n    cat_series = pl.Series(\n        [\"Polar\", \"Panda\", \"Brown\", \"Brown\", \"Polar\"], dtype=pl.Categorical\n    )\n    cat2_series = pl.Series(\n        [\"Panda\", \"Brown\", \"Brown\", \"Polar\", \"Polar\"], dtype=pl.Categorical\n    )\n    print(cat_series.append(cat2_series))\n</code></pre> <p>\u3057\u304b\u3057\u3001<code>StringCache</code> \u306f <code>Series</code> \u306e\u69cb\u7bc9\u6642\u306b\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u5185\u3067\u6587\u5b57\u5217\u306e\u691c\u7d22\u3084\u633f\u5165\u3092\u884c\u3046\u305f\u3081\u3001\u82e5\u5e72\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u4f4e\u4e0b\u3092\u62db\u304d\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u4e8b\u524d\u306b\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001Enum\u30c7\u30fc\u30bf\u578b\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/concepts/data-types/categoricals/#enum","title":"<code>Enum</code> \u30c7\u30fc\u30bf\u578b","text":"<p><code>Enum</code> \u30c7\u30fc\u30bf\u578b\u3067\u306f\u3001\u4e8b\u524d\u306b\u30ab\u30c6\u30b4\u30ea\u30fc\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u7570\u306a\u308b\u5217\u3084\u7570\u306a\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u304c\u540c\u3058\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u6301\u3064\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3001\u9ad8\u30b3\u30b9\u30c8\u306a\u518d\u30a8\u30f3\u30b3\u30fc\u30c9\u3084\u30ad\u30e3\u30c3\u30b7\u30e5\u691c\u7d22\u304c\u4e0d\u8981\u306b\u306a\u308a\u307e\u3059\u3002</p>  Python <pre><code>dtype = pl.Enum([\"Polar\", \"Panda\", \"Brown\"])\ncat_series = pl.Series([\"Polar\", \"Panda\", \"Brown\", \"Brown\", \"Polar\"], dtype=dtype)\ncat2_series = pl.Series([\"Panda\", \"Brown\", \"Brown\", \"Polar\", \"Polar\"], dtype=dtype)\nprint(cat_series.append(cat2_series))\n</code></pre> <p>Polars\u306f\u3001<code>Enum</code> \u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5024\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u3001<code>OutOfBounds</code> \u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002</p>  Python <pre><code>dtype = pl.Enum([\"Polar\", \"Panda\", \"Brown\"])\ntry:\n    cat_series = pl.Series([\"Polar\", \"Panda\", \"Brown\", \"Black\"], dtype=dtype)\nexcept Exception as e:\n    print(e)\n</code></pre> <pre><code>conversion from `str` to `enum` failed in column '' for 1 out of 4 values: [\"Black\"]\n\nEnsure that all values in the input column are present in the categories of the enum datatype.\n</code></pre>"},{"location":"user-guide/concepts/data-types/categoricals/#_2","title":"\u6bd4\u8f03","text":"<p>\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u6bd4\u8f03\u6f14\u7b97\u5b50\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <ul> <li>Categorical vs Categorical</li> <li>Categorical vs String</li> </ul>"},{"location":"user-guide/concepts/data-types/categoricals/#categorical_1","title":"<code>Categorical</code> \u578b","text":"<p><code>Categorical</code> \u578b\u306e\u6bd4\u8f03\u306f\u3001\u540c\u3058\u30b0\u30ed\u30fc\u30d0\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u30bb\u30c3\u30c8\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u307e\u305f\u306f\u540c\u3058\u9806\u5e8f\u3067\u540c\u3058\u57fa\u790e\u30ab\u30c6\u30b4\u30ea\u30fc\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u6709\u52b9\u3067\u3059\u3002</p>  Python <pre><code>with pl.StringCache():\n    cat_series = pl.Series([\"Brown\", \"Panda\", \"Polar\"], dtype=pl.Categorical)\n    cat_series2 = pl.Series([\"Polar\", \"Panda\", \"Black\"], dtype=pl.Categorical)\n    print(cat_series == cat_series2)\n</code></pre> <pre><code>shape: (3,)\nSeries: '' [bool]\n[\n    false\n    true\n    false\n]\n</code></pre> <p>Categorical\u3068String\u306e\u6bd4\u8f03\u3067\u306f\u3001Polars\u306f\u8a9e\u5f59\u9806\u3092\u4f7f\u7528\u3057\u3066\u7d50\u679c\u3092\u6c7a\u5b9a\u3057\u307e\u3059\uff1a</p>  Python <pre><code>cat_series = pl.Series([\"Brown\", \"Panda\", \"Polar\"], dtype=pl.Categorical)\nprint(cat_series &lt;= \"Cat\")\n</code></pre> <pre><code>shape: (3,)\nSeries: '' [bool]\n[\n    true\n    false\n    false\n]\n</code></pre>  Python <pre><code>cat_series = pl.Series([\"Brown\", \"Panda\", \"Polar\"], dtype=pl.Categorical)\ncat_series_utf = pl.Series([\"Panda\", \"Panda\", \"Polar\"])\nprint(cat_series &lt;= cat_series_utf)\n</code></pre> <pre><code>shape: (3,)\nSeries: '' [bool]\n[\n    true\n    true\n    true\n]\n</code></pre>"},{"location":"user-guide/concepts/data-types/categoricals/#enum_1","title":"<code>Enum</code> \u578b","text":"<p><code>Enum</code> \u578b\u306e\u6bd4\u8f03\u306f\u3001\u540c\u3058\u30ab\u30c6\u30b4\u30ea\u30fc\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u6709\u52b9\u3067\u3059\u3002</p>  Python <pre><code>dtype = pl.Enum([\"Polar\", \"Panda\", \"Brown\"])\ncat_series = pl.Series([\"Brown\", \"Panda\", \"Polar\"], dtype=dtype)\ncat_series2 = pl.Series([\"Polar\", \"Panda\", \"Brown\"], dtype=dtype)\nprint(cat_series == cat_series2)\n</code></pre> <pre><code>shape: (3,)\nSeries: '' [bool]\n[\n    false\n    true\n    false\n]\n</code></pre> <p><code>Enum</code> \u3068 <code>String</code> \u306e\u6bd4\u8f03\u3067\u306f\u3001\u8a9e\u5f59\u9806\u3067\u306f\u306a\u304f\u30ab\u30c6\u30b4\u30ea\u30fc\u5185\u306e\u9806\u5e8f\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u6bd4\u8f03\u304c\u6709\u52b9\u3067\u3042\u308b\u305f\u3081\u306b\u306f\u3001<code>String</code> \u5217\u306e\u3059\u3079\u3066\u306e\u5024\u304c <code>Enum</code> \u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python <pre><code>try:\n    cat_series = pl.Series(\n        [\"Low\", \"Medium\", \"High\"], dtype=pl.Enum([\"Low\", \"Medium\", \"High\"])\n    )\n    cat_series &lt;= \"Excellent\"\nexcept Exception as e:\n    print(e)\n</code></pre> <pre><code>conversion from `str` to `enum` failed in column '' for 1 out of 1 values: [\"Excellent\"]\n\nEnsure that all values in the input column are present in the categories of the enum datatype.\n</code></pre>  Python <pre><code>dtype = pl.Enum([\"Low\", \"Medium\", \"High\"])\ncat_series = pl.Series([\"Low\", \"Medium\", \"High\"], dtype=dtype)\nprint(cat_series &lt;= \"Medium\")\n</code></pre> <pre><code>shape: (3,)\nSeries: '' [bool]\n[\n    true\n    true\n    false\n]\n</code></pre>  Python <pre><code>dtype = pl.Enum([\"Low\", \"Medium\", \"High\"])\ncat_series = pl.Series([\"Low\", \"Medium\", \"High\"], dtype=dtype)\ncat_series2 = pl.Series([\"High\", \"High\", \"Low\"], dtype=dtype)\nprint(cat_series &lt;= cat_series2)\n</code></pre> <pre><code>shape: (3,)\nSeries: '' [bool]\n[\n    true\n    true\n    false\n]\n</code></pre>"},{"location":"user-guide/concepts/data-types/overview/","title":"\u6982\u8981","text":"<p>Polars \u306f\u5b8c\u5168\u306b Arrow \u30c7\u30fc\u30bf\u578b\u306b\u57fa\u3065\u3044\u3066\u304a\u308a\u3001Arrow \u30e1\u30e2\u30ea\u30fc\u914d\u5217\u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u51e6\u7406\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u52b9\u7387\u7684\u3067\u3001\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306b\u3082\u9069\u3057\u3066\u3044\u307e\u3059\u3002\u307b\u3068\u3093\u3069\u306e\u30c7\u30fc\u30bf\u578b\u306f Arrow \u306e\u6b63\u78ba\u306a\u5b9f\u88c5\u306b\u5f93\u3063\u3066\u3044\u307e\u3059\u304c\u3001<code>String</code>\uff08\u5b9f\u969b\u306b\u306f <code>LargeUtf8</code>\uff09\u3001<code>Categorical</code>\u3001<code>Object</code>\uff08\u30b5\u30dd\u30fc\u30c8\u306f\u9650\u5b9a\u7684\uff09\u306f\u4f8b\u5916\u3067\u3059\u3002\u30c7\u30fc\u30bf\u578b\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059:</p> \u30b0\u30eb\u30fc\u30d7 \u578b \u8a73\u7d30 \u6570\u5024\u578b <code>Int8</code> 8 \u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3002 <code>Int16</code> 16 \u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3002 <code>Int32</code> 32 \u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3002 <code>Int64</code> 64 \u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3002 <code>UInt8</code> 8 \u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\u6574\u6570\u3002 <code>UInt16</code> 16 \u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\u6574\u6570\u3002 <code>UInt32</code> 32 \u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\u6574\u6570\u3002 <code>UInt64</code> 64 \u30d3\u30c3\u30c8\u7b26\u53f7\u306a\u3057\u6574\u6570\u3002 <code>Float32</code> 32 \u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u3002 <code>Float64</code> 64 \u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u3002 \u30cd\u30b9\u30c8\u578b <code>Struct</code> Struct \u914d\u5217\u306f <code>Vec&lt;Series&gt;</code> \u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u3001\u8907\u6570\u306e/\u7570\u7a2e\u306e\u5024\u3092\u5358\u4e00\u306e\u30ab\u30e9\u30e0\u306b\u30d1\u30c3\u30af\u3059\u308b\u306e\u306b\u4fbf\u5229\u3067\u3059\u3002 <code>List</code> List \u914d\u5217\u306b\u306f\u3001List \u5024\u3092\u542b\u3080\u5b50\u914d\u5217\u3068\u3001\u30aa\u30d5\u30bb\u30c3\u30c8\u914d\u5217\u304c\u542b\u307e\u308c\u307e\u3059\uff08\u5185\u90e8\u7684\u306b\u306f\u5b9f\u969b\u306f Arrow \u306e <code>LargeList</code>\uff09\u3002 \u6642\u9593\u578b <code>Date</code> \u65e5\u4ed8\u8868\u73fe\u3002\u5185\u90e8\u7684\u306b\u306f UNIX \u30a8\u30dd\u30c3\u30af\u304b\u3089\u306e\u65e5\u6570\u3092 32 \u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002 <code>Datetime</code> \u65e5\u6642\u8868\u73fe\u3002\u5185\u90e8\u7684\u306b\u306f UNIX \u30a8\u30dd\u30c3\u30af\u304b\u3089\u306e\u30de\u30a4\u30af\u30ed\u79d2\u3092 64 \u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002 <code>Duration</code> \u30bf\u30a4\u30e0\u30c7\u30eb\u30bf\u578b\u3002\u5185\u90e8\u7684\u306b\u306f\u30de\u30a4\u30af\u30ed\u79d2\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002<code>Date/Datetime</code> \u306e\u5dee\u5206\u304b\u3089\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002 <code>Time</code> \u6642\u9593\u8868\u73fe\u3002\u5185\u90e8\u7684\u306b\u306f\u5348\u524d 0 \u6642\u304b\u3089\u306e\u30ca\u30ce\u79d2\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002 \u305d\u306e\u4ed6 <code>Boolean</code> \u52b9\u679c\u7684\u306b\u30d3\u30c3\u30c8\u30d1\u30c3\u30af\u3055\u308c\u305f\u771f\u507d\u5024\u578b\u3002 <code>String</code> \u6587\u5b57\u5217\u30c7\u30fc\u30bf\uff08\u5185\u90e8\u7684\u306b\u306f\u5b9f\u969b\u306f Arrow \u306e <code>LargeUtf8</code>\uff09\u3002 <code>Binary</code> \u30d0\u30a4\u30c8\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002 <code>Object</code> \u4efb\u610f\u306e\u5024\u3092\u683c\u7d0d\u3067\u304d\u308b\u3001\u9650\u5b9a\u7684\u306b\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u578b\u3002 <code>Categorical</code> \u4e00\u9023\u306e\u6587\u5b57\u5217\u306e\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3002 <code>Enum</code> \u4e00\u9023\u306e\u6587\u5b57\u5217\u306e\u56fa\u5b9a\u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3002 <p>\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u578b\u306e\u5185\u90e8\u8868\u73fe\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001Arrow \u5217\u5f62\u5f0f\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/concepts/data-types/overview/#_2","title":"\u6d6e\u52d5\u5c0f\u6570\u70b9","text":"<p>Polars \u306f\u4e00\u822c\u7684\u306b IEEE 754 \u6d6e\u52d5\u5c0f\u6570\u70b9\u898f\u683c\u306b\u5f93\u3044\u307e\u3059\u304c\u3001\u3044\u304f\u3064\u304b\u306e\u4f8b\u5916\u304c\u3042\u308a\u307e\u3059:</p> <ul> <li>NaN\u306f\u4ed6\u306e\u3059\u3079\u3066\u306eNaN\u3068\u7b49\u4fa1\u3067\u3042\u308b\u3068\u307f\u306a\u3055\u308c\u3001\u975eNaN\u5024\u3088\u308a\u3082\u5927\u304d\u3044\u3068\u6bd4\u8f03\u3055\u308c\u307e\u3059\u3002</li> <li>\u6f14\u7b97\u306b\u304a\u3044\u3066\u306f\u3001\u30bc\u30ed\u306e\u7b26\u53f7\u3084NaN\u306e\u6319\u52d5\u3001NaN\u306e\u30da\u30a4\u30ed\u30fc\u30c9\u5024\u306b\u3064\u3044\u3066\u3001\u7279\u5b9a\u306e\u52d5\u4f5c\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u7b97\u8853\u6f14\u7b97\u3060\u3051\u3067\u306a\u304f\u3001\u30bd\u30fc\u30c8\u3084\u30b0\u30eb\u30fc\u30d7\u5316\u306a\u3069\u306e\u64cd\u4f5c\u306b\u3082\u5f53\u3066\u306f\u307e\u308a\u307e\u3059\u3002\u52b9\u7387\u7684\u306a\u7b49\u4fa1\u6027\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u3059\u3079\u3066\u306e\u30bc\u30ed\u306f+0\u306b\u3001\u3059\u3079\u3066\u306eNaN\u306f\u6b63\u306eNaN\u306b\u6b63\u898f\u5316\uff08\u30ad\u30e3\u30ce\u30cb\u30ab\u30eb\u5316\uff09\u3055\u308c\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002</li> </ul> <p>Polars \u306f\u5e38\u306b\u6d6e\u52d5\u5c0f\u6570\u70b9\u8a08\u7b97\u306b\u5bfe\u3057\u3066\u5408\u7406\u7684\u306b\u6b63\u78ba\u306a\u7d50\u679c\u3092\u63d0\u4f9b\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u304c\u3001\u7279\u306b\u8a00\u53ca\u304c\u306a\u3044\u9650\u308a\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u822c\u7684\u306b\u3001100% \u6b63\u78ba\u306a\u7d50\u679c\u3092\u5f97\u308b\u306e\u306f\u975e\u5e38\u306b\u9ad8\u4fa1\u3067\u3042\u308a\uff0864 \u30d3\u30c3\u30c8\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u3088\u308a\u3082\u5927\u304d\u306a\u5185\u90e8\u8868\u73fe\u304c\u5fc5\u8981\uff09\u3001\u5e38\u306b\u3042\u308b\u7a0b\u5ea6\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\uff08Expressions\uff09","text":"<p><code>Contexts</code> \u30bb\u30af\u30b7\u30e7\u30f3\u3067\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\uff08Expressions\uff09\u304c\u4f55\u3067\u3042\u308b\u304b\u3001\u305d\u3057\u3066\u305d\u308c\u3089\u304c\u3044\u304b\u306b\u8cb4\u91cd\u3067\u3042\u308b\u304b\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u81ea\u4f53\u306b\u7126\u70b9\u3092\u5f53\u3066\u307e\u3059\u3002\u5404\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u305d\u308c\u3089\u304c\u4f55\u3092\u3059\u308b\u306e\u304b\u306e\u6982\u8981\u3068\u8ffd\u52a0\u306e\u4f8b\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <ul> <li>\u57fa\u672c\u6f14\u7b97\u5b50\uff08Basic operators\uff09</li> <li>\u30ab\u30e9\u30e0\u9078\u629e\uff08Column selections\uff09</li> <li>\u95a2\u6570\uff08Functions\uff09</li> <li>\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\uff08Casting\uff09</li> <li>\u6587\u5b57\u5217\uff08Strings\uff09</li> <li>\u96c6\u8a08\uff08Aggregation\uff09</li> <li>\u6b20\u640d\u30c7\u30fc\u30bf\uff08Missing data\uff09</li> <li>\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\uff08Window Functions\uff09</li> <li>\u30d5\u30a9\u30fc\u30eb\u30c9\uff08Folds\uff09</li> <li>\u30ea\u30b9\u30c8\u3068\u914d\u5217\uff08Lists and Arrays\uff09</li> <li>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u30d7\u30e9\u30b0\u30a4\u30f3\uff08Expression plugins\uff09</li> <li>\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570\uff08User-defined functions\uff09</li> <li><code>Struct</code> \u30c7\u30fc\u30bf\u578b\uff08The Struct datatype\uff09</li> <li>Numpy</li> </ul>"},{"location":"user-guide/expressions/aggregation/","title":"\u96c6\u8a08\uff08Aggregation\uff09","text":"<p>Polars \u306f\u3001lazy API \u3060\u3051\u3067\u306a\u304f\u3001eager API \u3067\u3082\u5f37\u529b\u306a\u69cb\u6587\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u304c\u3069\u3046\u3044\u3046\u610f\u5473\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p> <p>\u7c73\u56fd\u8b70\u4f1a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff08US congress <code>dataset</code>\uff09\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002</p>  Python Rust <p> <code>DataFrame</code> \u00b7 <code>Categorical</code> <pre><code>url = \"https://theunitedstates.io/congress-legislators/legislators-historical.csv\"\n\ndtypes = {\n    \"first_name\": pl.Categorical,\n    \"gender\": pl.Categorical,\n    \"type\": pl.Categorical,\n    \"state\": pl.Categorical,\n    \"party\": pl.Categorical,\n}\n\ndataset = pl.read_csv(url, dtypes=dtypes).with_columns(\n    pl.col(\"birthday\").str.to_date(strict=False)\n)\n</code></pre></p> <p> <code>DataFrame</code> \u00b7 <code>Categorical</code> \u00b7  Available on feature dtype-categorical <pre><code>use std::io::Cursor;\n\nuse reqwest::blocking::Client;\n\nlet url = \"https://theunitedstates.io/congress-legislators/legislators-historical.csv\";\n\nlet mut schema = Schema::new();\nschema.with_column(\n    \"first_name\".into(),\n    DataType::Categorical(None, Default::default()),\n);\nschema.with_column(\n    \"gender\".into(),\n    DataType::Categorical(None, Default::default()),\n);\nschema.with_column(\n    \"type\".into(),\n    DataType::Categorical(None, Default::default()),\n);\nschema.with_column(\n    \"state\".into(),\n    DataType::Categorical(None, Default::default()),\n);\nschema.with_column(\n    \"party\".into(),\n    DataType::Categorical(None, Default::default()),\n);\nschema.with_column(\"birthday\".into(), DataType::Date);\n\nlet data: Vec&lt;u8&gt; = Client::new().get(url).send()?.text()?.bytes().collect();\n\nlet dataset = CsvReader::new(Cursor::new(data))\n    .has_header(true)\n    .with_dtypes(Some(Arc::new(schema)))\n    .with_try_parse_dates(true)\n    .finish()?;\n\nprintln!(\"{}\", &amp;dataset);\n</code></pre></p>"},{"location":"user-guide/expressions/aggregation/#_1","title":"\u57fa\u672c\u7684\u306a\u96c6\u8a08","text":"<p><code>list</code> \u306b\u8907\u6570\u306e\u5f0f\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u7c21\u5358\u306b\u7570\u306a\u308b\u96c6\u8a08\u3092\u7d44\u307f\u5408\u308f\u305b\u3089\u308c\u307e\u3059\u3002 \u96c6\u8a08\u306e\u6570\u306b\u4e0a\u9650\u306f\u306a\u304f\u3001\u597d\u304d\u306a\u7d44\u307f\u5408\u308f\u305b\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u96c6\u8a08\u3092\u884c\u3063\u3066\u3044\u307e\u3059:</p> <p><code>\"first_name\"</code> \u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b</p> <ul> <li><code>\"party\"</code> \u5217\u306e\u884c\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059:<ul> <li>\u77ed\u7e2e\u5f62: <code>pl.count(\"party\")</code></li> <li>\u5b8c\u5168\u5f62: <code>pl.col(\"party\").count()</code></li> </ul> </li> <li><code>\"gender\"</code> \u5024\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u96c6\u8a08\u3057\u307e\u3059:<ul> <li>\u5b8c\u5168\u5f62: <code>pl.col(\"gender\")</code></li> </ul> </li> <li>\u30b0\u30eb\u30fc\u30d7\u5185\u306e <code>\"last_name\"</code> \u5217\u306e\u6700\u521d\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059:<ul> <li>\u77ed\u7e2e\u5f62: <code>pl.first(\"last_name\")</code>\uff08Rust\u3067\u306f\u4f7f\u3048\u307e\u305b\u3093\uff09</li> <li>\u5b8c\u5168\u5f62: <code>pl.col(\"last_name\").first()</code></li> </ul> </li> </ul> <p>\u96c6\u8a08\u306e\u5f8c\u3001\u7d50\u679c\u3092\u3059\u3050\u306b\u30bd\u30fc\u30c8\u3057\u3001\u4e0a\u4f4d <code>5</code> \u4ef6\u306b\u5236\u9650\u3057\u3066\u3001 \u308f\u304b\u308a\u3084\u3059\u3044\u6982\u8981\u3092\u5f97\u3066\u3044\u307e\u3059\u3002</p>  Python Rust <p> <code>group_by</code> <pre><code>q = (\n    dataset.lazy()\n    .group_by(\"first_name\")\n    .agg(\n        pl.len(),\n        pl.col(\"gender\"),\n        pl.first(\"last_name\"),\n    )\n    .sort(\"len\", descending=True)\n    .limit(5)\n)\n\ndf = q.collect()\nprint(df)\n</code></pre></p> <p> <code>group_by</code> <pre><code>let df = dataset\n    .clone()\n    .lazy()\n    .group_by([\"first_name\"])\n    .agg([len(), col(\"gender\"), col(\"last_name\").first()])\n    .sort(\n        [\"len\"],\n        SortMultipleOptions::default()\n            .with_order_descending(true)\n            .with_nulls_last(true),\n    )\n    .limit(5)\n    .collect()?;\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 first_name \u2506 len  \u2506 gender            \u2506 last_name \u2502\n\u2502 ---        \u2506 ---  \u2506 ---               \u2506 ---       \u2502\n\u2502 cat        \u2506 u32  \u2506 list[cat]         \u2506 str       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 John       \u2506 1256 \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Walker    \u2502\n\u2502 William    \u2506 1022 \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Few       \u2502\n\u2502 James      \u2506 714  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Armstrong \u2502\n\u2502 Thomas     \u2506 453  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Tucker    \u2502\n\u2502 Charles    \u2506 439  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Carroll   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/aggregation/#_2","title":"\u6761\u4ef6\u5f0f","text":"<p>\u7c21\u5358\u3067\u3059\u306d\uff01\u3055\u3089\u306b\u9032\u3081\u307e\u3057\u3087\u3046\u3002 \"state\" \u306e\u4ee3\u8868\u8005\u304c \"Pro\" \u307e\u305f\u306f \"Anti\" \u653f\u6a29\u304b\u3069\u3046\u304b\u3092\u77e5\u308a\u305f\u3044\u3068\u3057\u307e\u3059\u3002 <code>lambda</code> \u3084 <code>DataFrame</code> \u306e\u6574\u7406\u306b\u983c\u308b\u3053\u3068\u306a\u304f\u3001\u96c6\u8a08\u306e\u4e2d\u3067\u76f4\u63a5\u30af\u30a8\u30ea\u3092\u4f7f\u3048\u307e\u3059\u3002</p>  Python Rust <p> <code>group_by</code> <pre><code>q = (\n    dataset.lazy()\n    .group_by(\"state\")\n    .agg(\n        (pl.col(\"party\") == \"Anti-Administration\").sum().alias(\"anti\"),\n        (pl.col(\"party\") == \"Pro-Administration\").sum().alias(\"pro\"),\n    )\n    .sort(\"pro\", descending=True)\n    .limit(5)\n)\n\ndf = q.collect()\nprint(df)\n</code></pre></p> <p> <code>group_by</code> <pre><code>let df = dataset\n    .clone()\n    .lazy()\n    .group_by([\"state\"])\n    .agg([\n        (col(\"party\").eq(lit(\"Anti-Administration\")))\n            .sum()\n            .alias(\"anti\"),\n        (col(\"party\").eq(lit(\"Pro-Administration\")))\n            .sum()\n            .alias(\"pro\"),\n    ])\n    .sort(\n        [\"pro\"],\n        SortMultipleOptions::default().with_order_descending(true),\n    )\n    .limit(5)\n    .collect()?;\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 anti \u2506 pro \u2502\n\u2502 ---   \u2506 ---  \u2506 --- \u2502\n\u2502 cat   \u2506 u32  \u2506 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 CT    \u2506 0    \u2506 3   \u2502\n\u2502 NJ    \u2506 0    \u2506 3   \u2502\n\u2502 NC    \u2506 1    \u2506 2   \u2502\n\u2502 SC    \u2506 0    \u2506 1   \u2502\n\u2502 PA    \u2506 1    \u2506 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u540c\u69d8\u306e\u3053\u3068\u306f\u3001\u30cd\u30b9\u30c8\u3055\u308c\u305f GROUP BY \u3067\u3082\u884c\u3048\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u306e\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u3092\u793a\u3059\u306e\u306b\u5f79\u7acb\u3061\u307e\u305b\u3093\u3002 \ud83d\ude09</p>  Python Rust <p> <code>group_by</code> <pre><code>q = (\n    dataset.lazy()\n    .group_by(\"state\", \"party\")\n    .agg(pl.count(\"party\").alias(\"count\"))\n    .filter(\n        (pl.col(\"party\") == \"Anti-Administration\")\n        | (pl.col(\"party\") == \"Pro-Administration\")\n    )\n    .sort(\"count\", descending=True)\n    .limit(5)\n)\n\ndf = q.collect()\nprint(df)\n</code></pre></p> <p> <code>group_by</code> <pre><code>let df = dataset\n    .clone()\n    .lazy()\n    .group_by([\"state\", \"party\"])\n    .agg([col(\"party\").count().alias(\"count\")])\n    .filter(\n        col(\"party\")\n            .eq(lit(\"Anti-Administration\"))\n            .or(col(\"party\").eq(lit(\"Pro-Administration\"))),\n    )\n    .sort(\n        [\"count\"],\n        SortMultipleOptions::default()\n            .with_order_descending(true)\n            .with_nulls_last(true),\n    )\n    .limit(5)\n    .collect()?;\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 party               \u2506 count \u2502\n\u2502 ---   \u2506 ---                 \u2506 ---   \u2502\n\u2502 cat   \u2506 cat                 \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 NJ    \u2506 Pro-Administration  \u2506 3     \u2502\n\u2502 VA    \u2506 Anti-Administration \u2506 3     \u2502\n\u2502 CT    \u2506 Pro-Administration  \u2506 3     \u2502\n\u2502 NC    \u2506 Pro-Administration  \u2506 2     \u2502\n\u2502 PA    \u2506 Anti-Administration \u2506 1     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/aggregation/#_3","title":"\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u30b0\u30eb\u30fc\u30d7\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u5e73\u5747\u3092\u8a08\u7b97\u3057\u305f\u3044\u304c\u3001\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u3059\u3079\u3066\u306e\u5024\u3092\u542b\u3081\u305f\u304f\u306a\u3044\u3001 \u307e\u305f <code>DataFrame</code> \u306e\u884c\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u304f\u306a\u3044\uff08\u5225\u306e\u96c6\u8a08\u306b\u5fc5\u8981\u306a\u305f\u3081\uff09\u5834\u5408\u306a\u3069\u3067\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u3053\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u884c\u3048\u308b\u304b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>Note</p> <p>Python \u95a2\u6570\u3092\u660e\u78ba\u306b\u3059\u308b\u305f\u3081\u306e\u30e1\u30e2\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u306b\u306f\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u3001Polars \u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u307f\u3092\u4f5c\u6210\u3057\u3001\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u6642\u306b\u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u3092 <code>Series</code> \u4e0a\u3067\u9069\u7528\u3057\u306a\u3044\u305f\u3081\u3067\u3059\u3002\u3082\u3061\u308d\u3093\u3001Rust \u3067\u3082\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>group_by</code> <pre><code>from datetime import date\n\n\ndef compute_age():\n    return date.today().year - pl.col(\"birthday\").dt.year()\n\n\ndef avg_birthday(gender: str) -&gt; pl.Expr:\n    return (\n        compute_age()\n        .filter(pl.col(\"gender\") == gender)\n        .mean()\n        .alias(f\"avg {gender} birthday\")\n    )\n\n\nq = (\n    dataset.lazy()\n    .group_by(\"state\")\n    .agg(\n        avg_birthday(\"M\"),\n        avg_birthday(\"F\"),\n        (pl.col(\"gender\") == \"M\").sum().alias(\"# male\"),\n        (pl.col(\"gender\") == \"F\").sum().alias(\"# female\"),\n    )\n    .limit(5)\n)\n\ndf = q.collect()\nprint(df)\n</code></pre></p> <p> <code>group_by</code> <pre><code>fn compute_age() -&gt; Expr {\n    lit(2022) - col(\"birthday\").dt().year()\n}\n\nfn avg_birthday(gender: &amp;str) -&gt; Expr {\n    compute_age()\n        .filter(col(\"gender\").eq(lit(gender)))\n        .mean()\n        .alias(&amp;format!(\"avg {} birthday\", gender))\n}\n\nlet df = dataset\n    .clone()\n    .lazy()\n    .group_by([\"state\"])\n    .agg([\n        avg_birthday(\"M\"),\n        avg_birthday(\"F\"),\n        (col(\"gender\").eq(lit(\"M\"))).sum().alias(\"# male\"),\n        (col(\"gender\").eq(lit(\"F\"))).sum().alias(\"# female\"),\n    ])\n    .limit(5)\n    .collect()?;\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 avg M birthday \u2506 avg F birthday \u2506 # male \u2506 # female \u2502\n\u2502 ---   \u2506 ---            \u2506 ---            \u2506 ---    \u2506 ---      \u2502\n\u2502 cat   \u2506 f64            \u2506 f64            \u2506 u32    \u2506 u32      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 WY    \u2506 140.717949     \u2506 68.0           \u2506 39     \u2506 2        \u2502\n\u2502 AK    \u2506 123.411765     \u2506 null           \u2506 17     \u2506 0        \u2502\n\u2502 AS    \u2506 84.0           \u2506 null           \u2506 2      \u2506 0        \u2502\n\u2502 PI    \u2506 148.0          \u2506 null           \u2506 13     \u2506 0        \u2502\n\u2502 DK    \u2506 194.333333     \u2506 null           \u2506 9      \u2506 0        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/aggregation/#_4","title":"\u30bd\u30fc\u30c8","text":"<p>GROUP BY \u64cd\u4f5c\u306e\u9806\u5e8f\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306b\u3001<code>DataFrame</code> \u3092\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u306f\u4e00\u822c\u7684\u3067\u3059\u3002\u5dde\u3054\u3068\u306e\u6700\u5e74\u9577\u304a\u3088\u3073\u6700\u5e74\u5c11\u306e\u653f\u6cbb\u5bb6\u306e\u540d\u524d\u3092\u53d6\u5f97\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306f\u3001SORT \u3068 GROUP BY \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>group_by</code> <pre><code>def get_person() -&gt; pl.Expr:\n    return pl.col(\"first_name\") + pl.lit(\" \") + pl.col(\"last_name\")\n\n\nq = (\n    dataset.lazy()\n    .sort(\"birthday\", descending=True)\n    .group_by(\"state\")\n    .agg(\n        get_person().first().alias(\"youngest\"),\n        get_person().last().alias(\"oldest\"),\n    )\n    .limit(5)\n)\n\ndf = q.collect()\nprint(df)\n</code></pre></p> <p> <code>group_by</code> <pre><code>fn get_person() -&gt; Expr {\n    col(\"first_name\") + lit(\" \") + col(\"last_name\")\n}\n\nlet df = dataset\n    .clone()\n    .lazy()\n    .sort(\n        [\"birthday\"],\n        SortMultipleOptions::default()\n            .with_order_descending(true)\n            .with_nulls_last(true),\n    )\n    .group_by([\"state\"])\n    .agg([\n        get_person().first().alias(\"youngest\"),\n        get_person().last().alias(\"oldest\"),\n    ])\n    .limit(5)\n    .collect()?;\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 youngest              \u2506 oldest          \u2502\n\u2502 ---   \u2506 ---                   \u2506 ---             \u2502\n\u2502 cat   \u2506 str                   \u2506 str             \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 MN    \u2506 Erik Paulsen          \u2506 Cyrus Aldrich   \u2502\n\u2502 KY    \u2506 John Edwards          \u2506 Matthew Lyon    \u2502\n\u2502 CA    \u2506 Edward Gilbert        \u2506 William Gwin    \u2502\n\u2502 NY    \u2506 Cornelius Schoonmaker \u2506 Philip Schuyler \u2502\n\u2502 ID    \u2506 Ra\u00fal Labrador         \u2506 William Wallace \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u305f\u3060\u3057\u3001\u3082\u3057 \u540d\u524d\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u30bd\u30fc\u30c8\u3057\u305f\u3044\u5834\u5408\u3001\u3053\u308c\u306f\u6a5f\u80fd\u3057\u307e\u305b\u3093\u3002\u5e78\u3044\u306b\u3082\u3001<code>group_by</code> \u5f0f\u3067 <code>DataFrame</code> \u3068\u306f\u5225\u306b\u30bd\u30fc\u30c8\u304c\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>group_by</code> <pre><code>def get_person() -&gt; pl.Expr:\n    return pl.col(\"first_name\") + pl.lit(\" \") + pl.col(\"last_name\")\n\n\nq = (\n    dataset.lazy()\n    .sort(\"birthday\", descending=True)\n    .group_by(\"state\")\n    .agg(\n        get_person().first().alias(\"youngest\"),\n        get_person().last().alias(\"oldest\"),\n        get_person().sort().first().alias(\"alphabetical_first\"),\n    )\n    .limit(5)\n)\n\ndf = q.collect()\nprint(df)\n</code></pre></p> <p> <code>group_by</code> <pre><code>let df = dataset\n    .clone()\n    .lazy()\n    .sort(\n        [\"birthday\"],\n        SortMultipleOptions::default()\n            .with_order_descending(true)\n            .with_nulls_last(true),\n    )\n    .group_by([\"state\"])\n    .agg([\n        get_person().first().alias(\"youngest\"),\n        get_person().last().alias(\"oldest\"),\n        get_person()\n            .sort(Default::default())\n            .first()\n            .alias(\"alphabetical_first\"),\n    ])\n    .limit(5)\n    .collect()?;\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 youngest         \u2506 oldest           \u2506 alphabetical_first      \u2502\n\u2502 ---   \u2506 ---              \u2506 ---              \u2506 ---                     \u2502\n\u2502 cat   \u2506 str              \u2506 str              \u2506 str                     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 WY    \u2506 Liz Cheney       \u2506 Stephen Nuckolls \u2506 Alan Simpson            \u2502\n\u2502 AK    \u2506 Mark Begich      \u2506 Thomas Cale      \u2506 Anthony Dimond          \u2502\n\u2502 DK    \u2506 George Mathews   \u2506 John Todd        \u2506 George Mathews          \u2502\n\u2502 AS    \u2506 Eni Faleomavaega \u2506 Fof\u00f3 Sunia       \u2506 Eni Faleomavaega        \u2502\n\u2502 PI    \u2506 Carlos Romulo    \u2506 Pablo Ocampo     \u2506 Benito Legarda Y Tuason \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>group_by</code> \u5f0f\u306e\u4e2d\u3067\u5225\u306e\u5217\u3092\u57fa\u6e96\u306b\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u305f\u540d\u524d\u304c\u7537\u6027\u304b\u5973\u6027\u304b\u3092\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\uff1a<code>pl.col(\"gender\").sort_by(\"first_name\").first().alias(\"gender\")</code> \u3068\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>group_by</code> <pre><code>def get_person() -&gt; pl.Expr:\n    return pl.col(\"first_name\") + pl.lit(\" \") + pl.col(\"last_name\")\n\n\nq = (\n    dataset.lazy()\n    .sort(\"birthday\", descending=True)\n    .group_by(\"state\")\n    .agg(\n        get_person().first().alias(\"youngest\"),\n        get_person().last().alias(\"oldest\"),\n        get_person().sort().first().alias(\"alphabetical_first\"),\n        pl.col(\"gender\")\n        .sort_by(pl.col(\"first_name\").cast(pl.Categorical(\"lexical\")))\n        .first(),\n    )\n    .sort(\"state\")\n    .limit(5)\n)\n\ndf = q.collect()\nprint(df)\n</code></pre></p> <p> <code>group_by</code> <pre><code>let df = dataset\n    .clone()\n    .lazy()\n    .sort(\n        [\"birthday\"],\n        SortMultipleOptions::default()\n            .with_order_descending(true)\n            .with_nulls_last(true),\n    )\n    .group_by([\"state\"])\n    .agg([\n        get_person().first().alias(\"youngest\"),\n        get_person().last().alias(\"oldest\"),\n        get_person()\n            .sort(Default::default())\n            .first()\n            .alias(\"alphabetical_first\"),\n        col(\"gender\")\n            .sort_by([\"first_name\"], SortMultipleOptions::default())\n            .first()\n            .alias(\"gender\"),\n    ])\n    .sort([\"state\"], SortMultipleOptions::default())\n    .limit(5)\n    .collect()?;\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 youngest              \u2506 oldest               \u2506 alphabetical_first \u2506 gender \u2502\n\u2502 ---   \u2506 ---                   \u2506 ---                  \u2506 ---                \u2506 ---    \u2502\n\u2502 cat   \u2506 str                   \u2506 str                  \u2506 str                \u2506 cat    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 NY    \u2506 Cornelius Schoonmaker \u2506 Philip Schuyler      \u2506 A. Foster          \u2506 M      \u2502\n\u2502 NC    \u2506 John Ashe             \u2506 Samuel Johnston      \u2506 Abraham Rencher    \u2506 M      \u2502\n\u2502 NE    \u2506 Samuel Daily          \u2506 Experience Estabrook \u2506 Albert Jefferis    \u2506 M      \u2502\n\u2502 MS    \u2506 Narsworthy Hunter     \u2506 Thomas Greene        \u2506 Aaron Ford         \u2506 M      \u2502\n\u2502 IL    \u2506 Benjamin Stephenson   \u2506 Shadrack Bond        \u2506 Aaron Schock       \u2506 M      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/aggregation/#_5","title":"\u4e26\u5217\u51e6\u7406\u3092\u963b\u5bb3\u3057\u306a\u3044","text":"<p>Python \u30e6\u30fc\u30b6\u30fc\u306e\u307f</p> <p>\u4ee5\u4e0b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f Python \u306b\u56fa\u6709\u306e\u3082\u306e\u3067\u3042\u308a\u3001Rust \u306b\u306f\u9069\u7528\u3055\u308c\u307e\u305b\u3093\u3002Rust \u3067\u306f\u3001\u30d6\u30ed\u30c3\u30af\u3068\u30af\u30ed\u30fc\u30b8\u30e3(\u30e9\u30e0\u30c0)\u3092\u4e26\u884c\u3057\u3066\u5b9f\u884c\u3067\u304d\u308b\u305f\u3081\u3067\u3059\u3002</p> <p>Python \u306f\u9045\u304f\u3066 \"\u30b9\u30b1\u30fc\u30eb\u3057\u306a\u3044\" \u3068\u3044\u3046\u306e\u306f\u3001\u8ab0\u3082\u304c\u8033\u306b\u3057\u305f\u3053\u3068\u304c\u3042\u308b\u3067\u3057\u3087\u3046\u3002 \"\u9045\u3044\" \u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306b\u52a0\u3048\u3066\u3001Python \u306f Global Interpreter Lock\uff08GIL\uff09\u306e\u5236\u7d04\u306e\u4e2d\u306b\u3044\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002 \u3064\u307e\u308a\u3001\u4e26\u5217\u5316\u30d5\u30a7\u30fc\u30ba\u3067 <code>lambda</code> \u3084\u30ab\u30b9\u30bf\u30e0 Python \u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001 Polars \u306e\u901f\u5ea6\u306f Python \u30b3\u30fc\u30c9\u306e\u5b9f\u884c\u306b\u3088\u3063\u3066\u5236\u9650\u3055\u308c\u3001 \u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3092\u59a8\u3052\u307e\u3059\u3002</p> <p>\u3053\u308c\u306f\u3068\u3066\u3082\u3046\u3063\u3068\u3046\u3057\u3044\u5236\u9650\u306b\u611f\u3058\u3089\u308c\u307e\u3059\u304c\u3001\u7279\u306b <code>.group_by()</code> \u30b9\u30c6\u30c3\u30d7\u3067\u306f <code>lambda</code> \u95a2\u6570\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f Polars \u3067\u307e\u3060\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9 \u3068 GIL \u306e\u30b3\u30b9\u30c8\u3092\u652f\u6255\u3046\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u5ff5\u982d\u306b\u7f6e\u3044\u3066\u304f\u3060\u3055\u3044\u3002\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u69cb\u6587\u3092\u4f7f\u3063\u3066\u30af\u30a8\u30ea\u3092\u89e3\u6c7a\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 <code>lambda</code> \u306e\u4f7f\u7528\u306b\u3064\u3044\u3066\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570\u30bb\u30af\u30b7\u30e7\u30f3 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/expressions/aggregation/#_6","title":"\u307e\u3068\u3081","text":"<p>\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u591a\u304f\u306e\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\uff08Python \u3068 GIL \u306e\u9045\u3044\u6027\u8cea\u306b\u3088\u3063\u3066\uff09\u30af\u30a8\u30ea\u3092\u9045\u304f\u3059\u308b Python \u306e\u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u306e\u4f7f\u7528\u3092\u9045\u3089\u305b\u3089\u308c\u307e\u3059\u3002</p> <p>\u3082\u3057\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30d7\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001feature request\u3092\u958b\u3044\u3066\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044\uff01</p>"},{"location":"user-guide/expressions/casting/","title":"\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\uff08Casting\uff09","text":"<p>\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u306f\u3001\u30ab\u30e9\u30e0\u306e\u57fa\u672c\u3068\u306a\u308b <code>DataType</code> \u3092\u65b0\u3057\u3044\u3082\u306e\u306b\u5909\u63db\u3057\u307e\u3059\u3002Polars \u306f Arrow \u3092\u4f7f\u7528\u3057\u3066\u30e1\u30e2\u30ea\u5185\u306e\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u3001\u5909\u63db\u3092\u884c\u3046\u305f\u3081\u306b Rust \u5b9f\u88c5 \u306e\u8a08\u7b97\u30ab\u30fc\u30cd\u30eb\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u306f <code>cast()</code> \u30e1\u30bd\u30c3\u30c9\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002</p> <p><code>cast</code> \u30e1\u30bd\u30c3\u30c9\u306b\u306f <code>strict</code> \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u306f Polars \u304c\u30bd\u30fc\u30b9 <code>DataType</code> \u304b\u3089\u30bf\u30fc\u30b2\u30c3\u30c8 <code>DataType</code> \u306b\u5909\u63db\u3067\u304d\u306a\u3044\u5024\u306b\u906d\u9047\u3057\u305f\u3068\u304d\u306e\u52d5\u4f5c\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f <code>strict=True</code> \u3067\u3001\u3053\u308c\u306f Polars \u304c\u5909\u63db\u306b\u5931\u6557\u3057\u305f\u3053\u3068\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u901a\u77e5\u3057\u3001\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u306a\u304b\u3063\u305f\u5024\u306e\u8a73\u7d30\u3092\u63d0\u4f9b\u3059\u308b\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4e00\u65b9\u3001<code>strict=False</code> \u306e\u5834\u5408\u3001\u30bf\u30fc\u30b2\u30c3\u30c8 <code>DataType</code> \u306b\u5909\u63db\u3067\u304d\u306a\u3044\u5024\u306f\u6697\u9ed9\u306b <code>null</code> \u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/casting/#_1","title":"\u6570\u5024","text":"<p>\u4ee5\u4e0b\u306e <code>DataFrame</code> \u306f\u3001\u6574\u6570\u3068\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u4e21\u65b9\u3092\u542b\u3093\u3067\u3044\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df = pl.DataFrame(\n    {\n        \"integers\": [1, 2, 3, 4, 5],\n        \"big_integers\": [1, 10000002, 3, 10000004, 10000005],\n        \"floats\": [4.0, 5.0, 6.0, 7.0, 8.0],\n        \"floats_with_decimal\": [4.532, 5.5, 6.5, 7.5, 8.5],\n    }\n)\n\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df = df! (\n    \"integers\"=&gt; &amp;[1, 2, 3, 4, 5],\n    \"big_integers\"=&gt; &amp;[1, 10000002, 3, 10000004, 10000005],\n    \"floats\"=&gt; &amp;[4.0, 5.0, 6.0, 7.0, 8.0],\n    \"floats_with_decimal\"=&gt; &amp;[4.532, 5.5, 6.5, 7.5, 8.5],\n)?;\n\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers \u2506 big_integers \u2506 floats \u2506 floats_with_decimal \u2502\n\u2502 ---      \u2506 ---          \u2506 ---    \u2506 ---                 \u2502\n\u2502 i64      \u2506 i64          \u2506 f64    \u2506 f64                 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1        \u2506 1            \u2506 4.0    \u2506 4.532               \u2502\n\u2502 2        \u2506 10000002     \u2506 5.0    \u2506 5.5                 \u2502\n\u2502 3        \u2506 3            \u2506 6.0    \u2506 6.5                 \u2502\n\u2502 4        \u2506 10000004     \u2506 7.0    \u2506 7.5                 \u2502\n\u2502 5        \u2506 10000005     \u2506 8.0    \u2506 8.5                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3068\u6574\u6570\u306e\u9593\u3001\u307e\u305f\u306f\u305d\u306e\u9006\u306e\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u64cd\u4f5c\u3092\u884c\u3046\u306b\u306f\u3001<code>cast()</code> \u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u307e\u3059\u3002</p>  Python Rust <p> <code>cast</code> <pre><code>out = df.select(\n    pl.col(\"integers\").cast(pl.Float32).alias(\"integers_as_floats\"),\n    pl.col(\"floats\").cast(pl.Int32).alias(\"floats_as_integers\"),\n    pl.col(\"floats_with_decimal\")\n    .cast(pl.Int32)\n    .alias(\"floats_with_decimal_as_integers\"),\n)\nprint(out)\n</code></pre></p> <p> <code>cast</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"integers\")\n            .cast(DataType::Float32)\n            .alias(\"integers_as_floats\"),\n        col(\"floats\")\n            .cast(DataType::Int32)\n            .alias(\"floats_as_integers\"),\n        col(\"floats_with_decimal\")\n            .cast(DataType::Int32)\n            .alias(\"floats_with_decimal_as_integers\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers_as_floats \u2506 floats_as_integers \u2506 floats_with_decimal_as_integer\u2026 \u2502\n\u2502 ---                \u2506 ---                \u2506 ---                             \u2502\n\u2502 f32                \u2506 i32                \u2506 i32                             \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.0                \u2506 4                  \u2506 4                               \u2502\n\u2502 2.0                \u2506 5                  \u2506 5                               \u2502\n\u2502 3.0                \u2506 6                  \u2506 6                               \u2502\n\u2502 4.0                \u2506 7                  \u2506 7                               \u2502\n\u2502 5.0                \u2506 8                  \u2506 8                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u5c0f\u6570\u5024\u3092\u6574\u6570\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u5834\u5408\u3001\u3053\u308c\u3089\u306f\u4e0b\u5411\u304d\u306b\u4e38\u3081\u3089\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/expressions/casting/#_2","title":"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8","text":"<p>\u8981\u7d20\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u305f\u30d3\u30c3\u30c8\u6570\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u30e1\u30e2\u30ea\u30d5\u30c3\u30c8\u30d7\u30ea\u30f3\u30c8\u3092\u524a\u6e1b\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f <code>Int64</code> \u304b\u3089 <code>Int16</code> \u3078\u3001\u305d\u3057\u3066 <code>Float64</code> \u304b\u3089 <code>Float32</code> \u3078\u306e\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u306b\u3088\u3063\u3066\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u4f4e\u6e1b\u3055\u305b\u308b\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>  Python Rust <p> <code>cast</code> <pre><code>out = df.select(\n    pl.col(\"integers\").cast(pl.Int16).alias(\"integers_smallfootprint\"),\n    pl.col(\"floats\").cast(pl.Float32).alias(\"floats_smallfootprint\"),\n)\nprint(out)\n</code></pre></p> <p> <code>cast</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"integers\")\n            .cast(DataType::Int16)\n            .alias(\"integers_smallfootprint\"),\n        col(\"floats\")\n            .cast(DataType::Float32)\n            .alias(\"floats_smallfootprint\"),\n    ])\n    .collect();\nmatch out {\n    Ok(out) =&gt; println!(\"{}\", &amp;out),\n    Err(e) =&gt; println!(\"{:?}\", e),\n};\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers_smallfootprint \u2506 floats_smallfootprint \u2502\n\u2502 ---                     \u2506 ---                   \u2502\n\u2502 i16                     \u2506 f32                   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1                       \u2506 4.0                   \u2502\n\u2502 2                       \u2506 5.0                   \u2502\n\u2502 3                       \u2506 6.0                   \u2502\n\u2502 4                       \u2506 7.0                   \u2502\n\u2502 5                       \u2506 8.0                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/casting/#_3","title":"\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc","text":"<p>\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u3046\u969b\u306f\u3001\u9078\u629e\u3055\u308c\u305f\u30d3\u30c3\u30c8\u6570\uff08\u4f8b\u3048\u3070 64\u300132\u300116\uff09\u304c\u30ab\u30e9\u30e0\u306b\u542b\u307e\u308c\u308b\u6700\u5927\u304a\u3088\u3073\u6700\u5c0f\u306e\u6570\u5024\u3092\u53ce\u5bb9\u3059\u308b\u306e\u306b\u5341\u5206\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\u4f8b\u3048\u3070\u300132\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570 (<code>Int32</code>) \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001-2147483648 \u304b\u3089 +2147483647 \u306e\u7bc4\u56f2\u306e\u6574\u6570\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001<code>Int8</code> \u3092\u4f7f\u7528\u3059\u308b\u3068 -128 \u304b\u3089 127 \u306e\u6574\u6570\u3057\u304b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u30b5\u30a4\u30ba\u304c\u5c0f\u3055\u3059\u304e\u308b <code>DataType</code> \u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001Polars \u306b\u3088\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u64cd\u4f5c\u3068\u3057\u3066 <code>ComputeError</code> \u304c\u6295\u3052\u3089\u308c\u307e\u3059\u3002</p>  Python Rust <p> <code>cast</code> <pre><code>try:\n    out = df.select(pl.col(\"big_integers\").cast(pl.Int8))\n    print(out)\nexcept Exception as e:\n    print(e)\n</code></pre></p> <p> <code>cast</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([col(\"big_integers\").strict_cast(DataType::Int8)])\n    .collect();\nmatch out {\n    Ok(out) =&gt; println!(\"{}\", &amp;out),\n    Err(e) =&gt; println!(\"{:?}\", e),\n};\n</code></pre></p> <pre><code>conversion from `i64` to `i8` failed in column 'big_integers' for 3 out of 5 values: [10000002, 10000004, 10000005]\n</code></pre> <p><code>strict</code> \u30d1\u30e9\u30e1\u30fc\u30bf\u3092 <code>False</code> \u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u3088\u3046\u306a\u5024\u3092 null \u5024\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>cast</code> <pre><code>out = df.select(pl.col(\"big_integers\").cast(pl.Int8, strict=False))\nprint(out)\n</code></pre></p> <p> <code>cast</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([col(\"big_integers\").cast(DataType::Int8)])\n    .collect();\nmatch out {\n    Ok(out) =&gt; println!(\"{}\", &amp;out),\n    Err(e) =&gt; println!(\"{:?}\", e),\n};\n</code></pre></p> <p>```python exec=\"on\" result=\"text\" session=\"user-guide/cast out = df.select(pl.col(\"big_integers\").cast(pl.Int8, strict=False)) print(out) <pre><code>## \u6587\u5b57\u5217\n\n\u6587\u5b57\u5217\u306f\u6570\u5024\u30c7\u30fc\u30bf\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u3001\u305d\u306e\u9006\u3082\u540c\u69d8\u3067\u3059\uff1a\n\n=== \":fontawesome-brands-python: Python\"\n    [:material-api:  `cast`](https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.Expr.cast.html)\n    ```python\n    df = pl.DataFrame(\n        {\n            \"integers\": [1, 2, 3, 4, 5],\n            \"float\": [4.0, 5.03, 6.0, 7.0, 8.0],\n            \"floats_as_string\": [\"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\"],\n        }\n    )\n\n    out = df.select(\n        pl.col(\"integers\").cast(pl.String),\n        pl.col(\"float\").cast(pl.String),\n        pl.col(\"floats_as_string\").cast(pl.Float64),\n    )\n    print(out)\n    ```\n\n=== \":fontawesome-brands-rust: Rust\"\n    [:material-api:  `cast`](https://docs.pola.rs/docs/rust/dev/polars_lazy/dsl/enum.Expr.html#method.cast)\n    ```rust\n\n    let df = df! (\n            \"integers\" =&gt; &amp;[1, 2, 3, 4, 5],\n            \"float\" =&gt; &amp;[4.0, 5.03, 6.0, 7.0, 8.0],\n            \"floats_as_string\" =&gt; &amp;[\"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\"],\n    )?;\n\n    let out = df\n        .clone()\n        .lazy()\n        .select([\n            col(\"integers\").cast(DataType::String),\n            col(\"float\").cast(DataType::String),\n            col(\"floats_as_string\").cast(DataType::Float64),\n        ])\n        .collect()?;\n    println!(\"{}\", &amp;out);\n    ```\n\n\n```python exec=\"on\" result=\"text\" session=\"user-guide/cast\"\ndf = pl.DataFrame(\n    {\n        \"integers\": [1, 2, 3, 4, 5],\n        \"float\": [4.0, 5.03, 6.0, 7.0, 8.0],\n        \"floats_as_string\": [\"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\"],\n    }\n)\n\nout = df.select(\n    pl.col(\"integers\").cast(pl.String),\n    pl.col(\"float\").cast(pl.String),\n    pl.col(\"floats_as_string\").cast(pl.Float64),\n)\nprint(out)\n</code></pre></p> <p>\u5217\u306b\u6570\u5024\u3067\u306a\u3044\u5024\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u3001Polars \u306f\u5909\u63db\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u3092\u793a\u3059 <code>ComputeError</code> \u3092\u6295\u3052\u307e\u3059\u3002<code>strict=False</code> \u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u6570\u5024\u3067\u306a\u3044\u5024\u3092 <code>null</code> \u306b\u5909\u63db\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>cast</code> <pre><code>df = pl.DataFrame({\"strings_not_float\": [\"4.0\", \"not_a_number\", \"6.0\", \"7.0\", \"8.0\"]})\ntry:\n    out = df.select(pl.col(\"strings_not_float\").cast(pl.Float64))\n    print(out)\nexcept Exception as e:\n    print(e)\n</code></pre></p> <p> <code>cast</code> <pre><code>let df = df! (\"strings_not_float\"=&gt; [\"4.0\", \"not_a_number\", \"6.0\", \"7.0\", \"8.0\"])?;\n\nlet out = df\n    .clone()\n    .lazy()\n    .select([col(\"strings_not_float\").cast(DataType::Float64)])\n    .collect();\nmatch out {\n    Ok(out) =&gt; println!(\"{}\", &amp;out),\n    Err(e) =&gt; println!(\"{:?}\", e),\n};\n</code></pre></p> <pre><code>conversion from `str` to `f64` failed in column 'strings_not_float' for 1 out of 5 values: [\"not_a_number\"]\n</code></pre>"},{"location":"user-guide/expressions/casting/#_4","title":"\u30d6\u30fc\u30eb\u5024","text":"<p>\u30d6\u30fc\u30eb\u5024\u306f 1 (<code>True</code>) \u307e\u305f\u306f 0 (<code>False</code>) \u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6570\u5024\u578b\u306e <code>DataType</code> \u3068\u30d6\u30fc\u30eb\u5024\u306e\u9593\u3001\u307e\u305f\u306f\u305d\u306e\u9006\u306e\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u6587\u5b57\u5217 (<code>String</code>) \u304b\u3089\u30d6\u30fc\u30eb\u5024\u3078\u306e\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002</p>  Python Rust <p> <code>cast</code> <pre><code>df = pl.DataFrame(\n    {\n        \"integers\": [-1, 0, 2, 3, 4],\n        \"floats\": [0.0, 1.0, 2.0, 3.0, 4.0],\n        \"bools\": [True, False, True, False, True],\n    }\n)\n\nout = df.select(pl.col(\"integers\").cast(pl.Boolean), pl.col(\"floats\").cast(pl.Boolean))\nprint(out)\n</code></pre></p> <p> <code>cast</code> <pre><code>let df = df! (\n        \"integers\"=&gt; &amp;[-1, 0, 2, 3, 4],\n        \"floats\"=&gt; &amp;[0.0, 1.0, 2.0, 3.0, 4.0],\n        \"bools\"=&gt; &amp;[true, false, true, false, true],\n)?;\n\nlet out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"integers\").cast(DataType::Boolean),\n        col(\"floats\").cast(DataType::Boolean),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers \u2506 floats \u2502\n\u2502 ---      \u2506 ---    \u2502\n\u2502 bool     \u2506 bool   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 true     \u2506 false  \u2502\n\u2502 false    \u2506 true   \u2502\n\u2502 true     \u2506 true   \u2502\n\u2502 true     \u2506 true   \u2502\n\u2502 true     \u2506 true   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/casting/#_5","title":"\u65e5\u4ed8","text":"<p><code>Date</code> \u3084 <code>Datetime</code> \u306a\u3069\u306e\u6642\u9593\u30c7\u30fc\u30bf\u578b\u306f\u3001\u30a8\u30dd\u30c3\u30af\u304b\u3089\u306e\u65e5\u6570\uff08<code>Date</code>\uff09\u304a\u3088\u3073\u30de\u30a4\u30af\u30ed\u79d2\uff08<code>Datetime</code>\uff09\u3001\u3059\u306a\u308f\u3061 UNIX \u6642\u9593\u3068\u3057\u3066\u8868\u3055\u308c\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u6570\u5024\u578b\u3068\u6642\u9593\u30c7\u30fc\u30bf\u578b\u306e\u9593\u3067\u306e\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>  Python Rust <p> <code>cast</code> <pre><code>from datetime import date, datetime\n\ndf = pl.DataFrame(\n    {\n        \"date\": pl.date_range(date(2022, 1, 1), date(2022, 1, 5), eager=True),\n        \"datetime\": pl.datetime_range(\n            datetime(2022, 1, 1), datetime(2022, 1, 5), eager=True\n        ),\n    }\n)\n\nout = df.select(pl.col(\"date\").cast(pl.Int64), pl.col(\"datetime\").cast(pl.Int64))\nprint(out)\n</code></pre></p> <p> <code>cast</code> <pre><code>use chrono::prelude::*;\n\nlet date = polars::time::date_range(\n    \"date\",\n    NaiveDate::from_ymd_opt(2022, 1, 1)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    NaiveDate::from_ymd_opt(2022, 1, 5)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    Duration::parse(\"1d\"),\n    ClosedWindow::Both,\n    TimeUnit::Milliseconds,\n    None,\n)?\n.cast(&amp;DataType::Date)?;\n\nlet datetime = polars::time::date_range(\n    \"datetime\",\n    NaiveDate::from_ymd_opt(2022, 1, 1)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    NaiveDate::from_ymd_opt(2022, 1, 5)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    Duration::parse(\"1d\"),\n    ClosedWindow::Both,\n    TimeUnit::Milliseconds,\n    None,\n)?;\n\nlet df = df! (\n    \"date\" =&gt; date,\n    \"datetime\" =&gt; datetime,\n)?;\n\nlet out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"date\").cast(DataType::Int64),\n        col(\"datetime\").cast(DataType::Int64),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date  \u2506 datetime         \u2502\n\u2502 ---   \u2506 ---              \u2502\n\u2502 i64   \u2506 i64              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 18993 \u2506 1640995200000000 \u2502\n\u2502 18994 \u2506 1641081600000000 \u2502\n\u2502 18995 \u2506 1641168000000000 \u2502\n\u2502 18996 \u2506 1641254400000000 \u2502\n\u2502 18997 \u2506 1641340800000000 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u6587\u5b57\u5217\u3068 <code>Dates</code>/<code>Datetimes</code> \u306e\u9593\u3067\u5909\u63db\u3059\u308b\u5834\u5408\u3001<code>dt.to_string</code> \u3068 <code>str.to_datetime</code> \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002Polars \u306f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b chrono format syntax \u3092\u63a1\u7528\u3057\u3066\u3044\u307e\u3059\u3002<code>str.to_datetime</code> \u306b\u306f\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u6a5f\u80fd\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u8ffd\u52a0\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\u3055\u3089\u306a\u308b\u60c5\u5831\u306b\u3064\u3044\u3066\u306f\u3001API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>  Python Rust <p> <code>dt.to_string</code> \u00b7 <code>str.to_date</code> <pre><code>df = pl.DataFrame(\n    {\n        \"date\": pl.date_range(date(2022, 1, 1), date(2022, 1, 5), eager=True),\n        \"string\": [\n            \"2022-01-01\",\n            \"2022-01-02\",\n            \"2022-01-03\",\n            \"2022-01-04\",\n            \"2022-01-05\",\n        ],\n    }\n)\n\nout = df.select(\n    pl.col(\"date\").dt.to_string(\"%Y-%m-%d\"),\n    pl.col(\"string\").str.to_datetime(\"%Y-%m-%d\"),\n)\nprint(out)\n</code></pre></p> <p> <code>dt.to_string</code> \u00b7 <code>str.replace_all</code> \u00b7  Available on feature dtype-date \u00b7  Available on feature temporal <pre><code>let date = polars::time::date_range(\n    \"date\",\n    NaiveDate::from_ymd_opt(2022, 1, 1)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    NaiveDate::from_ymd_opt(2022, 1, 5)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    Duration::parse(\"1d\"),\n    ClosedWindow::Both,\n    TimeUnit::Milliseconds,\n    None,\n)?;\n\nlet df = df! (\n        \"date\" =&gt; date,\n        \"string\" =&gt; &amp;[\n            \"2022-01-01\",\n            \"2022-01-02\",\n            \"2022-01-03\",\n            \"2022-01-04\",\n            \"2022-01-05\",\n        ],\n)?;\n\nlet out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"date\").dt().to_string(\"%Y-%m-%d\"),\n        col(\"string\").str().to_datetime(\n            Some(TimeUnit::Microseconds),\n            None,\n            StrptimeOptions::default(),\n            lit(\"raise\"),\n        ),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date       \u2506 string              \u2502\n\u2502 ---        \u2506 ---                 \u2502\n\u2502 str        \u2506 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2022-01-01 \u2506 2022-01-01 00:00:00 \u2502\n\u2502 2022-01-02 \u2506 2022-01-02 00:00:00 \u2502\n\u2502 2022-01-03 \u2506 2022-01-03 00:00:00 \u2502\n\u2502 2022-01-04 \u2506 2022-01-04 00:00:00 \u2502\n\u2502 2022-01-05 \u2506 2022-01-05 00:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/","title":"\u30ab\u30e9\u30e0\u9078\u629e\uff08Column selections\uff09","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046\uff1a</p>  Python Rust <p> <code>DataFrame</code> <pre><code>from datetime import date, datetime\n\nimport polars as pl\n\ndf = pl.DataFrame(\n    {\n        \"id\": [9, 4, 2],\n        \"place\": [\"Mars\", \"Earth\", \"Saturn\"],\n        \"date\": pl.date_range(date(2022, 1, 1), date(2022, 1, 3), \"1d\", eager=True),\n        \"sales\": [33.4, 2142134.1, 44.7],\n        \"has_people\": [False, True, False],\n        \"logged_at\": pl.datetime_range(\n            datetime(2022, 12, 1), datetime(2022, 12, 1, 0, 0, 2), \"1s\", eager=True\n        ),\n    }\n).with_row_index(\"index\")\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>    use chrono::prelude::*;\n    use polars::time::*;\n\n    let df = df!(\n            \"id\" =&gt; &amp;[9, 4, 2],\n            \"place\" =&gt; &amp;[\"Mars\", \"Earth\", \"Saturn\"],\n        \"date\" =&gt; date_range(\"date\",\n                NaiveDate::from_ymd_opt(2022, 1, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(), NaiveDate::from_ymd_opt(2022, 1, 3).unwrap().and_hms_opt(0, 0, 0).unwrap(), Duration::parse(\"1d\"),ClosedWindow::Both, TimeUnit::Milliseconds, None)?,\n            \"sales\" =&gt; &amp;[33.4, 2142134.1, 44.7],\n            \"has_people\" =&gt; &amp;[false, true, false],\n            \"logged_at\" =&gt; date_range(\"logged_at\",\n                NaiveDate::from_ymd_opt(2022, 1, 1).unwrap().and_hms_opt(0, 0, 0).unwrap(), NaiveDate::from_ymd_opt(2022, 1, 1).unwrap().and_hms_opt(0, 0, 2).unwrap(), Duration::parse(\"1s\"),ClosedWindow::Both, TimeUnit::Milliseconds, None)?,\n    )?\n    .with_row_index(\"index\", None)?;\n    println!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (3, 7)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2506 id  \u2506 place  \u2506 date       \u2506 sales     \u2506 has_people \u2506 logged_at           \u2502\n\u2502 ---   \u2506 --- \u2506 ---    \u2506 ---        \u2506 ---       \u2506 ---        \u2506 ---                 \u2502\n\u2502 u32   \u2506 i64 \u2506 str    \u2506 date       \u2506 f64       \u2506 bool       \u2506 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0     \u2506 9   \u2506 Mars   \u2506 2022-01-01 \u2506 33.4      \u2506 false      \u2506 2022-12-01 00:00:00 \u2502\n\u2502 1     \u2506 4   \u2506 Earth  \u2506 2022-01-02 \u2506 2142134.1 \u2506 true       \u2506 2022-12-01 00:00:01 \u2502\n\u2502 2     \u2506 2   \u2506 Saturn \u2506 2022-01-03 \u2506 44.7      \u2506 false      \u2506 2022-12-01 00:00:02 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/#_1","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u62e1\u5f35","text":"<p>\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u898b\u305f\u3088\u3046\u306b\u3001<code>pl.col</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u7279\u5b9a\u306e\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3059\u308b\u4fbf\u5229\u306a\u624b\u6bb5\u3068\u3057\u3066\u3082\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092 \u62e1\u5f35 \u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u306e\u3088\u3046\u306a\u4fbf\u5229\u306a\u6a5f\u80fd\u306f\u5358\u306a\u308b\u88c5\u98fe\u3084\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30b3\u30fc\u30c9\u5185\u3067 DRY \u539f\u5247\u3092\u975e\u5e38\u306b\u5f37\u529b\u306b\u9069\u7528\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\uff1a\u4e00\u3064\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u304c\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u6307\u5b9a\u3057\u3001DataFrame \u30b9\u30ad\u30fc\u30de\u306b\u5fdc\u3058\u3066\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30c8\u306b\u62e1\u5f35\u3055\u308c\u3001\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3057\u3066\u8a08\u7b97\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\uff01</p>"},{"location":"user-guide/expressions/column-selections/#_2","title":"\u5168\u90e8\u3092\u9078\u629e\u3001\u3042\u308b\u3044\u306f\u4e00\u90e8\u3092\u9664\u5916","text":"<p><code>DataFrame</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u3092 <code>*</code> \u5f15\u6570\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u9078\u629e\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>all</code> <pre><code>out = df.select(pl.col(\"*\"))\n\n# Is equivalent to\nout = df.select(pl.all())\nprint(out)\n</code></pre></p> <p> <code>all</code> <pre><code>let out = df.clone().lazy().select([col(\"*\")]).collect()?;\nprintln!(\"{}\", &amp;out);\n\n// Is equivalent to\nlet out = df.clone().lazy().select([all()]).collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <p>```python exec=\"on\" result=\"text\" session=\"user-guide/column-selections out = df.select(pl.col(\"*\"))</p>"},{"location":"user-guide/expressions/column-selections/#is-equivalent-to","title":"Is equivalent to","text":"<p>out = df.select(pl.all()) print(out) <pre><code>\u3057\u3070\u3057\u3070\u3001\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u3092\u542b\u3081\u305f\u3044\u3060\u3051\u3067\u306a\u304f\u3001\u3044\u304f\u3064\u304b\u3092\u9664\u5916\u3057\u3066\u542b\u3081\u305f\u3044\u3068\u8003\u3048\u307e\u3059\u3002\u3053\u308c\u3082\u7c21\u5358\u306b\u884c\u3048\u307e\u3059\uff1a\n\n=== \":fontawesome-brands-python: Python\"\n    [:material-api:  `exclude`](https://docs.pola.rs/py-polars/html/reference/expressions/api/polars.exclude.html)\n    ```python\n    out = df.select(pl.col(\"*\").exclude(\"logged_at\", \"index\"))\n    print(out)\n    ```\n\n=== \":fontawesome-brands-rust: Rust\"\n    [:material-api:  `exclude`](https://docs.pola.rs/docs/rust/dev/polars_lazy/dsl/enum.Expr.html#method.exclude)\n    ```rust\n    let out = df\n        .clone()\n        .lazy()\n        .select([col(\"*\").exclude([\"logged_at\", \"index\"])])\n        .collect()?;\n    println!(\"{}\", &amp;out);\n    ```\n\n\n```python exec=\"on\" result=\"text\" session=\"user-guide/column-selections\"\nout = df.select(pl.col(\"*\").exclude(\"logged_at\", \"index\"))\nprint(out)\n</code></pre></p>"},{"location":"user-guide/expressions/column-selections/#_3","title":"\u8907\u6570\u306e\u6587\u5b57\u5217\u306b\u3088\u308b","text":"<p>\u8907\u6570\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u304c\u4e00\u81f4\u3059\u308b\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u306b \u62e1\u5f35 \u3055\u308c\u307e\u3059\uff1a</p>  Python Rust <p> <code>dt.to_string</code> <pre><code>out = df.select(pl.col(\"date\", \"logged_at\").dt.to_string(\"%Y-%h-%d\"))\nprint(out)\n</code></pre></p> <p> <code>dt.to_string</code> \u00b7  Available on feature temporal <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([cols([\"date\", \"logged_at\"]).dt().to_string(\"%Y-%h-%d\")])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date        \u2506 logged_at   \u2502\n\u2502 ---         \u2506 ---         \u2502\n\u2502 str         \u2506 str         \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2022-Jan-01 \u2506 2022-Dec-01 \u2502\n\u2502 2022-Jan-02 \u2506 2022-Dec-01 \u2502\n\u2502 2022-Jan-03 \u2506 2022-Dec-01 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/#_4","title":"\u6b63\u898f\u8868\u73fe\u306b\u3088\u308b","text":"<p>\u6b63\u898f\u8868\u73fe\u3082\u4f7f\u7528\u3057\u3066\u8907\u6570\u306e\u30ab\u30e9\u30e0\u9078\u629e\u304c\u53ef\u80fd\u3067\u3059\u3002<code>pl.col</code> \u304c\u6b63\u898f\u8868\u73fe\u9078\u629e\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u77e5\u3089\u305b\u308b\u305f\u3081\u306b\u3001\u6b63\u898f\u8868\u73fe\u3092 <code>^</code> \u3068 <code>$</code> \u3067\u56f2\u3080\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\uff1a</p>  Python Rust <pre><code>out = df.select(pl.col(\"^.*(as|sa).*$\"))\nprint(out)\n</code></pre> <pre><code>let out = df.clone().lazy().select([col(\"^.*(as|sa).*$\")]).collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 sales     \u2506 has_people \u2502\n\u2502 ---       \u2506 ---        \u2502\n\u2502 f64       \u2506 bool       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 33.4      \u2506 false      \u2502\n\u2502 2142134.1 \u2506 true       \u2502\n\u2502 44.7      \u2506 false      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/#_5","title":"\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306b\u3088\u308b","text":"<p><code>pl.col</code> \u306f Polars \u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u4f7f\u7528\u3057\u3066\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>n_unique</code> <pre><code>out = df.select(pl.col(pl.Int64, pl.UInt32, pl.Boolean).n_unique())\nprint(out)\n</code></pre></p> <p> <code>n_unique</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([dtype_cols([DataType::Int64, DataType::UInt32, DataType::Boolean]).n_unique()])\n    .collect()?;\n// gives different result than python as the id col is i32 in rust\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2506 id  \u2506 has_people \u2502\n\u2502 ---   \u2506 --- \u2506 ---        \u2502\n\u2502 u32   \u2506 u32 \u2506 u32        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3     \u2506 3   \u2506 2          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/#selectors","title":"<code>selectors</code> \u306e\u4f7f\u7528","text":"<p>Polars \u306f\u3001\u30ab\u30e9\u30e0\u306e\u540d\u524d\u3001<code>dtype</code>\u3001\u307e\u305f\u306f\u305d\u306e\u4ed6\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u57fa\u3065\u3044\u305f\u76f4\u611f\u7684\u306a\u30ab\u30e9\u30e0\u9078\u629e\u3082\u53ef\u80fd\u3067\u3001\u3053\u308c\u306f\u4e0a\u8ff0\u306e <code>col</code> \u3092\u4f7f\u7528\u3057\u305f\u6a5f\u80fd\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002<code>polars.selectors</code> \u3092 <code>cs</code> \u3068\u3057\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/column-selections/#dtype","title":"<code>dtype</code> \u306b\u3088\u308b","text":"<p>\u305f\u3060\u306e\u6574\u6570\u3068\u6587\u5b57\u5217\u306e\u30ab\u30e9\u30e0\u3092\u9078\u629e\u3059\u308b\u306b\u306f\uff1a</p>  Python Rust <p> <code>selectors</code> <pre><code>import polars.selectors as cs\n\nout = df.select(cs.integer(), cs.string())\nprint(out)\n</code></pre></p> <p> <code>selectors</code> <pre><code>// Not available in Rust, refer the following link\n// https://github.com/pola-rs/polars/issues/10594\n</code></pre></p> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2506 id  \u2506 place  \u2502\n\u2502 ---   \u2506 --- \u2506 ---    \u2502\n\u2502 u32   \u2506 i64 \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0     \u2506 9   \u2506 Mars   \u2502\n\u2502 1     \u2506 4   \u2506 Earth  \u2502\n\u2502 2     \u2506 2   \u2506 Saturn \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/#_6","title":"\u96c6\u5408\u64cd\u4f5c\u3092\u9069\u7528\u3059\u308b","text":"<p>\u3053\u308c\u3089\u306e selectors \u306f\u96c6\u5408\u306b\u57fa\u3065\u3044\u305f\u9078\u629e\u64cd\u4f5c\u3082\u8a31\u53ef\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u884c\u756a\u53f7\u3092\u793a\u3059 \u6700\u521d\u306e \u30ab\u30e9\u30e0\u3092\u9664\u304f \u6570\u5024 \u30ab\u30e9\u30e0\u3092\u9078\u629e\u3059\u308b\u306b\u306f\uff1a</p>  Python Rust <p> <code>cs.first</code> \u00b7 <code>cs.numeric</code> <pre><code>out = df.select(cs.numeric() - cs.first())\nprint(out)\n</code></pre></p> <p> <code>cs.first</code> \u00b7 <code>cs.numeric</code> <pre><code>// Not available in Rust, refer the following link\n// https://github.com/pola-rs/polars/issues/10594\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 sales     \u2502\n\u2502 --- \u2506 ---       \u2502\n\u2502 i64 \u2506 f64       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 9   \u2506 33.4      \u2502\n\u2502 4   \u2506 2142134.1 \u2502\n\u2502 2   \u2506 44.7      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u884c\u756a\u53f7\u3092\u540d\u524d\u3067\u3001\u305d\u3057\u3066\u4efb\u610f\u306e \u975e\u6570\u5024\u30ab\u30e9\u30e0\u3082\u9078\u629e\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>cs.by_name</code> \u00b7 <code>cs.numeric</code> <pre><code>out = df.select(cs.by_name(\"index\") | ~cs.numeric())\nprint(out)\n</code></pre></p> <p> <code>cs.by_name</code> \u00b7 <code>cs.numeric</code> <pre><code>// Not available in Rust, refer the following link\n// https://github.com/pola-rs/polars/issues/10594\n</code></pre></p> <pre><code>shape: (3, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2506 place  \u2506 date       \u2506 has_people \u2506 logged_at           \u2502\n\u2502 ---   \u2506 ---    \u2506 ---        \u2506 ---        \u2506 ---                 \u2502\n\u2502 u32   \u2506 str    \u2506 date       \u2506 bool       \u2506 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0     \u2506 Mars   \u2506 2022-01-01 \u2506 false      \u2506 2022-12-01 00:00:00 \u2502\n\u2502 1     \u2506 Earth  \u2506 2022-01-02 \u2506 true       \u2506 2022-12-01 00:00:01 \u2502\n\u2502 2     \u2506 Saturn \u2506 2022-01-03 \u2506 false      \u2506 2022-12-01 00:00:02 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/#_7","title":"\u30d1\u30bf\u30fc\u30f3\u3068\u90e8\u5206\u6587\u5b57\u5217\u306b\u3088\u308b","text":"<p>Selectors \u306f\u90e8\u5206\u6587\u5b57\u5217\u3068\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306b\u3082\u30de\u30c3\u30c1\u53ef\u80fd\u3067\u3059\uff1a</p>  Python Rust <p> <code>cs.contains</code> \u00b7 <code>cs.matches</code> <pre><code>out = df.select(cs.contains(\"index\"), cs.matches(\".*_.*\"))\nprint(out)\n</code></pre></p> <p> <code>cs.contains</code> \u00b7 <code>cs.matches</code> <pre><code>// Not available in Rust, refer the following link\n// https://github.com/pola-rs/polars/issues/1059\n</code></pre></p> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 index \u2506 has_people \u2506 logged_at           \u2502\n\u2502 ---   \u2506 ---        \u2506 ---                 \u2502\n\u2502 u32   \u2506 bool       \u2506 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0     \u2506 false      \u2506 2022-12-01 00:00:00 \u2502\n\u2502 1     \u2506 true       \u2506 2022-12-01 00:00:01 \u2502\n\u2502 2     \u2506 false      \u2506 2022-12-01 00:00:02 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/#_8","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3078\u306e\u5909\u63db","text":"<p>\u9078\u629e\u3055\u308c\u305f\u30ab\u30e9\u30e0\u306b\u7279\u5b9a\u306e\u64cd\u4f5c\u3092\u9069\u7528\u3057\u305f\u3044\u5834\u5408\uff08\u3064\u307e\u308a\u3001\u901a\u5e38\u306e\u3088\u3046\u306b\u305d\u308c\u3089\u3092 \u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 \u3068\u3057\u3066\u8868\u73fe\u3057\u3066\u64cd\u4f5c\u3092\u9032\u3081\u305f\u3044\u5834\u5408\uff09\u3001\u5358\u306b <code>as_expr</code> \u3092\u4f7f\u7528\u3057\u3066\u5909\u63db\u3057\u3001\u901a\u5e38\u3069\u304a\u308a\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>cs.temporal</code> <pre><code>out = df.select(cs.temporal().as_expr().dt.to_string(\"%Y-%h-%d\"))\nprint(out)\n</code></pre></p> <p> <code>cs.temporal</code> <pre><code>// Not available in Rust, refer the following link\n// https://github.com/pola-rs/polars/issues/10594\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date        \u2506 logged_at   \u2502\n\u2502 ---         \u2506 ---         \u2502\n\u2502 str         \u2506 str         \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2022-Jan-01 \u2506 2022-Dec-01 \u2502\n\u2502 2022-Jan-02 \u2506 2022-Dec-01 \u2502\n\u2502 2022-Jan-03 \u2506 2022-Dec-01 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/column-selections/#selectors_1","title":"<code>selectors</code> \u306e\u30c7\u30d0\u30c3\u30b0","text":"<p>Polars \u306f\u3001selectors \u306e\u4f7f\u7528\u3092\u652f\u63f4\u3059\u308b\u305f\u3081\u306b\u5f79\u7acb\u30642\u3064\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a<code>is_selector</code> \u3068 <code>expand_selector</code>\uff1a</p>  Python Rust <p> <code>is_selector</code> <pre><code>from polars.selectors import is_selector\n\nout = cs.temporal()\nprint(is_selector(out))\n</code></pre></p> <p> <code>is_selector</code> <pre><code>// Not available in Rust, refer the following link\n// https://github.com/pola-rs/polars/issues/10594\n</code></pre></p> <pre><code>True\n</code></pre> <p>\u7279\u306b LazyFrame \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5834\u5408\u3001\u3069\u306e\u30ab\u30e9\u30e0\u540d\u304c\u9078\u629e\u3055\u308c\u308b\u304b\u3092\u4e8b\u524d\u306b\u77e5\u308b\u3053\u3068\u304c\u7279\u306b\u6709\u7528\u3067\u3059\uff1a</p>  Python Rust <p> <code>expand_selector</code> <pre><code>from polars.selectors import expand_selector\n\nout = cs.temporal().as_expr().dt.to_string(\"%Y-%h-%d\")\nprint(expand_selector(df, out))\n</code></pre></p> <p> <code>expand_selector</code> <pre><code>// Not available in Rust, refer the following link\n// https://github.com/pola-rs/polars/issues/10594\n</code></pre></p> <pre><code>('date', 'logged_at')\n</code></pre>"},{"location":"user-guide/expressions/folds/","title":"\u30d5\u30a9\u30fc\u30eb\u30c9\uff08Folds\uff09","text":"<p>Polars \u306f <code>sum</code>\u3001<code>min</code>\u3001<code>mean</code> \u306a\u3069\u306e\u6c34\u5e73\u96c6\u8a08\u306e\u305f\u3081\u306e\u5f0f\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u3088\u308a\u8907\u96d1\u306a\u96c6\u8a08\u304c\u5fc5\u8981\u306a\u5834\u5408\u3001Polars \u304c\u63d0\u4f9b\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u5341\u5206\u3067\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3093\u306a\u6642\u306b\u4fbf\u5229\u306a\u306e\u304c <code>folds</code> \u3067\u3059\u3002</p> <p><code>fold</code> \u5f0f\u306f\u30ab\u30e9\u30e0\u4e0a\u3067\u6700\u5927\u306e\u901f\u5ea6\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u975e\u5e38\u306b\u52b9\u7387\u7684\u306b\u6d3b\u7528\u3057\u3001\u3057\u3070\u3057\u3070\u30d9\u30af\u30c8\u30eb\u5316\u3055\u308c\u305f\u5b9f\u884c\u304c\u884c\u308f\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/folds/#_1","title":"\u624b\u52d5\u3067\u306e\u5408\u8a08","text":"<p>\u307e\u305a\u306f <code>fold</code> \u3092\u4f7f\u3063\u3066 <code>sum</code> \u64cd\u4f5c\u3092\u81ea\u5206\u305f\u3061\u3067\u5b9f\u88c5\u3059\u308b\u4f8b\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002</p>  Python Rust <p> <code>fold</code> <pre><code>df = pl.DataFrame(\n    {\n        \"a\": [1, 2, 3],\n        \"b\": [10, 20, 30],\n    }\n)\n\nout = df.select(\n    pl.fold(acc=pl.lit(0), function=lambda acc, x: acc + x, exprs=pl.all()).alias(\n        \"sum\"\n    ),\n)\nprint(out)\n</code></pre></p> <p> <code>fold_exprs</code> <pre><code>let df = df!(\n    \"a\" =&gt; &amp;[1, 2, 3],\n    \"b\" =&gt; &amp;[10, 20, 30],\n)?;\n\nlet out = df\n    .lazy()\n    .select([fold_exprs(lit(0), |acc, x| Ok(Some(acc + x)), [col(\"*\")]).alias(\"sum\")])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 sum \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 11  \u2502\n\u2502 22  \u2502\n\u2502 33  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u4e0a\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f\u3001\u95a2\u6570 <code>f(acc, x) -&gt; acc</code> \u3092\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf <code>acc</code> \u3068\u65b0\u3057\u3044\u30ab\u30e9\u30e0 <code>x</code> \u306b\u518d\u5e30\u7684\u306b\u9069\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u95a2\u6570\u306f\u30ab\u30e9\u30e0\u500b\u3005\u306b\u64cd\u4f5c\u3092\u884c\u3044\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u52b9\u7387\u3068\u30d9\u30af\u30c8\u30eb\u5316\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/folds/#_2","title":"\u6761\u4ef6","text":"<p><code>DataFrame</code> \u306e\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u306b\u6761\u4ef6/\u8ff0\u8a9e\u3092\u9069\u7528\u3057\u305f\u3044\u5834\u5408\u3001<code>fold</code> \u64cd\u4f5c\u306f\u3053\u308c\u3092\u8868\u73fe\u3059\u308b\u975e\u5e38\u306b\u7c21\u6f54\u306a\u65b9\u6cd5\u3068\u306a\u308a\u307e\u3059\u3002</p>  Python Rust <p> <code>fold</code> <pre><code>df = pl.DataFrame(\n    {\n        \"a\": [1, 2, 3],\n        \"b\": [0, 1, 2],\n    }\n)\n\nout = df.filter(\n    pl.fold(\n        acc=pl.lit(True),\n        function=lambda acc, x: acc &amp; x,\n        exprs=pl.col(\"*\") &gt; 1,\n    )\n)\nprint(out)\n</code></pre></p> <p> <code>fold_exprs</code> <pre><code>let df = df!(\n    \"a\" =&gt; &amp;[1, 2, 3],\n    \"b\" =&gt; &amp;[0, 1, 2],\n)?;\n\nlet out = df\n    .lazy()\n    .filter(fold_exprs(\n        lit(true),\n        |acc, x| acc.bitand(&amp;x).map(Some),\n        [col(\"*\").gt(1)],\n    ))\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3   \u2506 2   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f\u3001\u5404\u30ab\u30e9\u30e0\u5024\u304c <code>&gt; 1</code> \u306e\u3059\u3079\u3066\u306e\u884c\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/folds/#folds_1","title":"\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3068 Folds","text":"<p>Folds \u306f\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u306e\u9023\u7d50\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u4e2d\u9593\u30ab\u30e9\u30e0\u306e\u5177\u4f53\u5316\u306e\u305f\u3081\u3001\u3053\u306e\u64cd\u4f5c\u306f\u4e8c\u6b21\u306e\u8907\u96d1\u3055\u3092\u6301\u3061\u307e\u3059\u3002</p> <p>\u305d\u306e\u305f\u3081\u3001<code>concat_str</code> \u5f0f\u306e\u4f7f\u7528\u3092\u63a8\u5968\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>concat_str</code> <pre><code>df = pl.DataFrame(\n    {\n        \"a\": [\"a\", \"b\", \"c\"],\n        \"b\": [1, 2, 3],\n    }\n)\n\nout = df.select(pl.concat_str([\"a\", \"b\"]))\nprint(out)\n</code></pre></p> <p> <code>concat_str</code> \u00b7  Available on feature concat_str <pre><code>let df = df!(\n    \"a\" =&gt; &amp;[\"a\", \"b\", \"c\"],\n    \"b\" =&gt; &amp;[1, 2, 3],\n)?;\n\nlet out = df\n    .lazy()\n    .select([concat_str([col(\"a\"), col(\"b\")], \"\", false)])\n    .collect()?;\nprintln!(\"{:?}\", out);\n</code></pre></p> <pre><code>shape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a1  \u2502\n\u2502 b2  \u2502\n\u2502 c3  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/functions/","title":"\u95a2\u6570\uff08Functions\uff09","text":"<p>Polars \u5f0f\u306b\u306f\u591a\u304f\u306e\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570\u3092\u5fc5\u8981\u3068\u305b\u305a\u306b\u8907\u96d1\u306a\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u5168\u3066\u3092\u8aac\u660e\u3059\u308b\u306b\u306f\u591a\u3059\u304e\u307e\u3059\u304c\u3001\u3088\u308a\u4e00\u822c\u7684\u306a\u4f7f\u7528\u4f8b\u306e\u3044\u304f\u3064\u304b\u3092\u30ab\u30d0\u30fc\u3057\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u95a2\u6570\u3092\u898b\u305f\u3044\u5834\u5408\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306eAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u6b21\u306e<code>DataFrame</code>\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df = pl.DataFrame(\n    {\n        \"nrs\": [1, 2, 3, None, 5],\n        \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", \"spam\"],\n        \"random\": np.random.rand(5),\n        \"groups\": [\"A\", \"A\", \"B\", \"C\", \"B\"],\n    }\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>use rand::{thread_rng, Rng};\n\nlet mut arr = [0f64; 5];\nthread_rng().fill(&amp;mut arr);\n\nlet df = df! (\n    \"nrs\" =&gt; &amp;[Some(1), Some(2), Some(3), None, Some(5)],\n    \"names\" =&gt; &amp;[\"foo\", \"ham\", \"spam\", \"egg\", \"spam\"],\n    \"random\" =&gt; &amp;arr,\n    \"groups\" =&gt; &amp;[\"A\", \"A\", \"B\", \"C\", \"B\"],\n)?;\n\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2502\n\u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n\u2502 i64  \u2506 str   \u2506 f64      \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 foo   \u2506 0.154163 \u2506 A      \u2502\n\u2502 2    \u2506 ham   \u2506 0.74005  \u2506 A      \u2502\n\u2502 3    \u2506 spam  \u2506 0.263315 \u2506 B      \u2502\n\u2502 null \u2506 egg   \u2506 0.533739 \u2506 C      \u2502\n\u2502 5    \u2506 spam  \u2506 0.014575 \u2506 B      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/functions/#_1","title":"\u30ab\u30e9\u30e0\u540d\u4ed8\u3051","text":"<p>\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u5f0f\u3092\u5b9f\u884c\u3059\u308b\u3068\u5143\u306e\u30ab\u30e9\u30e0\u3068\u540c\u3058\u540d\u524d\u304c\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001<code>nrs</code>\u30ab\u30e9\u30e0\u306b\u5bfe\u3057\u3066\u5f0f\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\u51fa\u529b<code>DataFrame</code>\u306b\u306f\u4f9d\u7136\u3068\u3057\u3066\u540c\u3058\u540d\u524d\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python Rust <pre><code>df_samename = df.select(pl.col(\"nrs\") + 5)\nprint(df_samename)\n</code></pre> <pre><code>let df_samename = df.clone().lazy().select([col(\"nrs\") + lit(5)]).collect()?;\nprintln!(\"{}\", &amp;df_samename);\n</code></pre> <pre><code>shape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs  \u2502\n\u2502 ---  \u2502\n\u2502 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6    \u2502\n\u2502 7    \u2502\n\u2502 8    \u2502\n\u2502 null \u2502\n\u2502 10   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u540c\u3058\u30ab\u30e9\u30e0\u3092\u5f0f\u306e\u4e2d\u3067\u8907\u6570\u56de\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u51fa\u529b\u30ab\u30e9\u30e0\u304c\u91cd\u8907\u3057\u3066\u3057\u307e\u3044\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30af\u30a8\u30ea\u306f\u5931\u6557\u3057\u307e\u3059\u3002</p>  Python Rust <pre><code>try:\n    df_samename2 = df.select(pl.col(\"nrs\") + 5, pl.col(\"nrs\") - 5)\n    print(df_samename2)\nexcept Exception as e:\n    print(e)\n</code></pre> <pre><code>let df_samename2 = df\n    .clone()\n    .lazy()\n    .select([col(\"nrs\") + lit(5), col(\"nrs\") - lit(5)])\n    .collect();\nmatch df_samename2 {\n    Ok(df) =&gt; println!(\"{}\", &amp;df),\n    Err(e) =&gt; println!(\"{:?}\", &amp;e),\n};\n</code></pre> <pre><code>the name: 'nrs' is duplicate\n\nIt's possible that multiple expressions are returning the same default column name. If this is the case, try renaming the columns with `.alias(\"new_name\")` to avoid duplicate column names.\n</code></pre> <p>\u5f0f\u306e\u51fa\u529b\u540d\u3092\u5909\u66f4\u3059\u308b\u306b\u306f\u3001<code>alias</code>\u95a2\u6570\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>alias</code> <pre><code>df_alias = df.select(\n    (pl.col(\"nrs\") + 5).alias(\"nrs + 5\"),\n    (pl.col(\"nrs\") - 5).alias(\"nrs - 5\"),\n)\nprint(df_alias)\n</code></pre></p> <p> <code>alias</code> <pre><code>let df_alias = df\n    .clone()\n    .lazy()\n    .select([\n        (col(\"nrs\") + lit(5)).alias(\"nrs + 5\"),\n        (col(\"nrs\") - lit(5)).alias(\"nrs - 5\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;df_alias);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs + 5 \u2506 nrs - 5 \u2502\n\u2502 ---     \u2506 ---     \u2502\n\u2502 i64     \u2506 i64     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6       \u2506 -4      \u2502\n\u2502 7       \u2506 -3      \u2502\n\u2502 8       \u2506 -2      \u2502\n\u2502 null    \u2506 null    \u2502\n\u2502 10      \u2506 0       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u4f8b\u3048\u3070\u3001<code>all()</code>\u3084<code>col(*)</code>\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306e\u8907\u6570\u306e\u30ab\u30e9\u30e0\u306b\u5bfe\u3057\u3066\u3001<code>name.map</code>\u306a\u3069\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u5143\u306e\u30ab\u30e9\u30e0\u540d\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b5\u30d5\u30a3\u30c3\u30af\u30b9(<code>name.suffix()</code>)\u3084\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9(<code>name.prefix()</code>)\u3092\u8ffd\u52a0\u3059\u308b\u5834\u5408\u3082\u3001\u3053\u308c\u3089\u306f\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>  Python <p> <code>name.prefix</code> <code>name.suffix</code> <code>name.map</code></p>"},{"location":"user-guide/expressions/functions/#_2","title":"\u4e00\u610f\u306e\u5024\u306e\u30ab\u30a6\u30f3\u30c8","text":"<p>Polars\u3067\u306f\u3001\u4e00\u610f\u306e\u5024\u3092\u6570\u3048\u308b\u305f\u3081\u306b2\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\uff1a\u6b63\u78ba\u306a\u65b9\u6cd5\u3068\u8fd1\u4f3c\u6cd5\u3067\u3059\u3002\u8fd1\u4f3c\u6cd5\u306f\u3001HyperLogLog++\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u3066\u57fa\u6570\u3092\u8fd1\u4f3c\u3057\u3001\u8fd1\u4f3c\u3067\u5341\u5206\u306a\u975e\u5e38\u306b\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u7279\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p>  Python Rust <p> <code>n_unique</code> \u00b7 <code>approx_n_unique</code> <pre><code>df_alias = df.select(\n    pl.col(\"names\").n_unique().alias(\"unique\"),\n    pl.approx_n_unique(\"names\").alias(\"unique_approx\"),\n)\nprint(df_alias)\n</code></pre></p> <p> <code>n_unique</code> \u00b7 <code>approx_n_unique</code> <pre><code>let df_alias = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"names\").n_unique().alias(\"unique\"),\n        // Following query shows there isn't anything in Rust API\n        // https://docs.rs/polars/latest/polars/?search=approx_n_unique\n        // col(\"names\").approx_n_unique().alias(\"unique_approx\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;df_alias);\n</code></pre></p> <pre><code>shape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 unique \u2506 unique_approx \u2502\n\u2502 ---    \u2506 ---           \u2502\n\u2502 u32    \u2506 u32           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 4      \u2506 4             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/functions/#_3","title":"\u6761\u4ef6\u5f0f","text":"<p>Polars\u306f\u3001<code>when</code>\u3001<code>then</code>\u3001<code>otherwise</code>\u69cb\u6587\u3067 if-else \u306e\u3088\u3046\u306a\u6761\u4ef6\u3092\u5f0f\u306b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u8ff0\u8a9e\u306f<code>when</code>\u53e5\u306b\u7f6e\u304b\u308c\u3001\u3053\u308c\u304c<code>true</code>\u3068\u8a55\u4fa1\u3055\u308c\u308b\u3068<code>then</code>\u5f0f\u304c\u9069\u7528\u3055\u308c\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f<code>otherwise</code>\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\uff08\u884c\u3054\u3068\u306b\uff09\u3002</p>  Python Rust <p> <code>when</code> <pre><code>df_conditional = df.select(\n    pl.col(\"nrs\"),\n    pl.when(pl.col(\"nrs\") &gt; 2)\n    .then(pl.lit(True))\n    .otherwise(pl.lit(False))\n    .alias(\"conditional\"),\n)\nprint(df_conditional)\n</code></pre></p> <p> <code>when</code> <pre><code>let df_conditional = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"nrs\"),\n        when(col(\"nrs\").gt(2))\n            .then(lit(true))\n            .otherwise(lit(false))\n            .alias(\"conditional\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;df_conditional);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs  \u2506 conditional \u2502\n\u2502 ---  \u2506 ---         \u2502\n\u2502 i64  \u2506 bool        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 false       \u2502\n\u2502 2    \u2506 false       \u2502\n\u2502 3    \u2506 true        \u2502\n\u2502 null \u2506 false       \u2502\n\u2502 5    \u2506 true        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/lists/","title":"\u30ea\u30b9\u30c8\u3068\u914d\u5217\uff08Lists and Arrays\uff09","text":"<p>Polars \u306f <code>List</code> \u5217\u306b\u30d5\u30a1\u30fc\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u5404\u884c\u304c\u540c\u4e00\u306e\u8981\u7d20\u3067\u69cb\u6210\u3055\u308c\u3001\u9577\u3055\u304c\u7570\u306a\u308b\u30ea\u30b9\u30c8\u3067\u3059\u3002Polars \u306b\u306f <code>Array</code> \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f NumPy \u306e <code>ndarray</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u985e\u4f3c\u3057\u3066\u304a\u308a\u3001\u884c\u9593\u3067\u9577\u3055\u304c\u540c\u4e00\u3067\u3059\u3002</p> <p>\u6ce8\u610f: \u3053\u308c\u306f Python \u306e <code>list</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002\u8981\u7d20\u306f\u4efb\u610f\u306e\u30bf\u30a4\u30d7\u306b\u306a\u308a\u307e\u3059\u3002Polars \u306f\u3053\u308c\u3089\u3092\u5217\u5185\u3067\u683c\u7d0d\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u308c\u304b\u3089\u8aac\u660e\u3059\u308b\u7279\u5225\u306a\u30ea\u30b9\u30c8\u64cd\u4f5c\u6a5f\u80fd\u304c\u306a\u3044\u4e00\u822c\u7684\u306a <code>Object</code> \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3067\u3059\u3002</p>"},{"location":"user-guide/expressions/lists/#list","title":"\u5f37\u529b\u306a <code>List</code> \u64cd\u4f5c","text":"<p>\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u304c\u7570\u306a\u308b\u5929\u6c17\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u5f97\u3089\u308c\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u5929\u6c17\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u7d50\u679c\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u5834\u5408\u3001\u5b9f\u969b\u306e\u6e29\u5ea6\u3067\u306f\u306a\u304f\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u304c\u8a18\u9332\u3055\u308c\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>weather = pl.DataFrame(\n    {\n        \"station\": [\"Station \" + str(x) for x in range(1, 6)],\n        \"temperatures\": [\n            \"20 5 5 E1 7 13 19 9 6 20\",\n            \"18 8 16 11 23 E2 8 E2 E2 E2 90 70 40\",\n            \"19 24 E9 16 6 12 10 22\",\n            \"E2 E0 15 7 8 10 E1 24 17 13 6\",\n            \"14 8 E0 16 22 24 E1\",\n        ],\n    }\n)\nprint(weather)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let stns: Vec&lt;String&gt; = (1..6).map(|i| format!(\"Station {i}\")).collect();\nlet weather = df!(\n        \"station\"=&gt; &amp;stns,\n        \"temperatures\"=&gt; &amp;[\n            \"20 5 5 E1 7 13 19 9 6 20\",\n            \"18 8 16 11 23 E2 8 E2 E2 E2 90 70 40\",\n            \"19 24 E9 16 6 12 10 22\",\n            \"E2 E0 15 7 8 10 E1 24 17 13 6\",\n            \"14 8 E0 16 22 24 E1\",\n        ],\n)?;\nprintln!(\"{}\", &amp;weather);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures                    \u2502\n\u2502 ---       \u2506 ---                             \u2502\n\u2502 str       \u2506 str                             \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 20 5 5 E1 7 13 19 9 6 20        \u2502\n\u2502 Station 2 \u2506 18 8 16 11 23 E2 8 E2 E2 E2 90\u2026 \u2502\n\u2502 Station 3 \u2506 19 24 E9 16 6 12 10 22          \u2502\n\u2502 Station 4 \u2506 E2 E0 15 7 8 10 E1 24 17 13 6   \u2502\n\u2502 Station 5 \u2506 14 8 E0 16 22 24 E1             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/lists/#list_1","title":"<code>List</code> \u5217\u306e\u4f5c\u6210","text":"<p>\u4e0a\u8a18\u3067\u4f5c\u6210\u3055\u308c\u305f <code>weather</code> <code>DataFrame</code> \u3067\u306f\u3001\u5404\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u6355\u6349\u3055\u308c\u305f\u6e29\u5ea6\u306e\u5206\u6790\u304c\u304a\u305d\u3089\u304f\u5fc5\u8981\u3067\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u3001\u307e\u305a\u500b\u3005\u306e\u6e29\u5ea6\u6e2c\u5b9a\u5024\u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u884c\u3044\u307e\u3059\uff1a</p>  Python Rust <p> <code>str.split</code> <pre><code>out = weather.with_columns(pl.col(\"temperatures\").str.split(\" \"))\nprint(out)\n</code></pre></p> <p> <code>str.split</code> <pre><code>let out = weather\n    .clone()\n    .lazy()\n    .with_columns([col(\"temperatures\").str().split(lit(\" \"))])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures         \u2502\n\u2502 ---       \u2506 ---                  \u2502\n\u2502 str       \u2506 list[str]            \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 [\"20\", \"5\", \u2026 \"20\"]  \u2502\n\u2502 Station 2 \u2506 [\"18\", \"8\", \u2026 \"40\"]  \u2502\n\u2502 Station 3 \u2506 [\"19\", \"24\", \u2026 \"22\"] \u2502\n\u2502 Station 4 \u2506 [\"E2\", \"E0\", \u2026 \"6\"]  \u2502\n\u2502 Station 5 \u2506 [\"14\", \"8\", \u2026 \"E1\"]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u5f8c\u306b\u3067\u304d\u308b\u3053\u3068\u306e\u4e00\u3064\u306f\u3001\u5404\u6e29\u5ea6\u6e2c\u5b9a\u3092\u305d\u306e\u81ea\u8eab\u306e\u884c\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\uff1a</p>  Python Rust <p> <code>DataFrame.explode</code> <pre><code>out = weather.with_columns(pl.col(\"temperatures\").str.split(\" \")).explode(\n    \"temperatures\"\n)\nprint(out)\n</code></pre></p> <p> <code>DataFrame.explode</code> <pre><code>let out = weather\n    .clone()\n    .lazy()\n    .with_columns([col(\"temperatures\").str().split(lit(\" \"))])\n    .explode([\"temperatures\"])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (49, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures \u2502\n\u2502 ---       \u2506 ---          \u2502\n\u2502 str       \u2506 str          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 20           \u2502\n\u2502 Station 1 \u2506 5            \u2502\n\u2502 Station 1 \u2506 5            \u2502\n\u2502 Station 1 \u2506 E1           \u2502\n\u2502 Station 1 \u2506 7            \u2502\n\u2502 \u2026         \u2506 \u2026            \u2502\n\u2502 Station 5 \u2506 E0           \u2502\n\u2502 Station 5 \u2506 16           \u2502\n\u2502 Station 5 \u2506 22           \u2502\n\u2502 Station 5 \u2506 24           \u2502\n\u2502 Station 5 \u2506 E1           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3057\u304b\u3057\u3001Polars \u3067\u306f <code>List</code> \u8981\u7d20\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306b\u3053\u308c\u3092\u884c\u3046\u5fc5\u8981\u306f\u3057\u3070\u3057\u3070\u3042\u308a\u307e\u305b\u3093\u3002</p>"},{"location":"user-guide/expressions/lists/#list_2","title":"<code>List</code> \u5217\u306e\u64cd\u4f5c","text":"<p>Polars \u306f <code>List</code> \u5217\u306b\u5bfe\u3057\u3066\u3044\u304f\u3064\u304b\u306e\u6a19\u6e96\u64cd\u4f5c\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u6700\u521d\u306e 3 \u3064\u306e\u6e2c\u5b9a\u5024\u304c\u5fc5\u8981\u306a\u5834\u5408\u3001<code>head(3)</code> \u3092\u884c\u3044\u307e\u3059\u3002\u6700\u5f8c\u306e 3 \u3064\u306f <code>tail(3)</code> \u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u306f\u3001<code>slice</code> \u3092\u4f7f\u7528\u3057\u3066\u3082\u826f\u3044\u3067\u3059\uff08\u8ca0\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\uff09\u3002\u307e\u305f\u3001\u89b3\u6e2c\u6570\u3092 <code>lengths</code> \u3092\u901a\u3058\u3066\u7279\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u3089\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p>  Python Rust <p> <code>Expr.list</code> <pre><code>out = weather.with_columns(pl.col(\"temperatures\").str.split(\" \")).with_columns(\n    pl.col(\"temperatures\").list.head(3).alias(\"top3\"),\n    pl.col(\"temperatures\").list.slice(-3, 3).alias(\"bottom_3\"),\n    pl.col(\"temperatures\").list.len().alias(\"obs\"),\n)\nprint(out)\n</code></pre></p> <p> <code>Expr.list</code> <pre><code>let out = weather\n    .clone()\n    .lazy()\n    .with_columns([col(\"temperatures\").str().split(lit(\" \"))])\n    .with_columns([\n        col(\"temperatures\").list().head(lit(3)).alias(\"top3\"),\n        col(\"temperatures\")\n            .list()\n            .slice(lit(-3), lit(3))\n            .alias(\"bottom_3\"),\n        col(\"temperatures\").list().len().alias(\"obs\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures         \u2506 top3               \u2506 bottom_3           \u2506 obs \u2502\n\u2502 ---       \u2506 ---                  \u2506 ---                \u2506 ---                \u2506 --- \u2502\n\u2502 str       \u2506 list[str]            \u2506 list[str]          \u2506 list[str]          \u2506 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 [\"20\", \"5\", \u2026 \"20\"]  \u2506 [\"20\", \"5\", \"5\"]   \u2506 [\"9\", \"6\", \"20\"]   \u2506 10  \u2502\n\u2502 Station 2 \u2506 [\"18\", \"8\", \u2026 \"40\"]  \u2506 [\"18\", \"8\", \"16\"]  \u2506 [\"90\", \"70\", \"40\"] \u2506 13  \u2502\n\u2502 Station 3 \u2506 [\"19\", \"24\", \u2026 \"22\"] \u2506 [\"19\", \"24\", \"E9\"] \u2506 [\"12\", \"10\", \"22\"] \u2506 8   \u2502\n\u2502 Station 4 \u2506 [\"E2\", \"E0\", \u2026 \"6\"]  \u2506 [\"E2\", \"E0\", \"15\"] \u2506 [\"17\", \"13\", \"6\"]  \u2506 11  \u2502\n\u2502 Station 5 \u2506 [\"14\", \"8\", \u2026 \"E1\"]  \u2506 [\"14\", \"8\", \"E0\"]  \u2506 [\"22\", \"24\", \"E1\"] \u2506 7   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>arr</code> \u3067\u3057\u305f\u304c\u3001\u4eca\u306f <code>list</code> \u3067\u3059</p> <p>Stackoverflow \u3084\u4ed6\u306e\u60c5\u5831\u6e90\u3067 <code>arr</code> API \u306b\u95a2\u3059\u308b\u53c2\u7167\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u5358\u306b <code>arr</code> \u3092 <code>list</code> \u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f <code>List</code> \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306e\u53e4\u3044\u30a2\u30af\u30bb\u30b5\u30fc\u3067\u3057\u305f\u3002<code>arr</code> \u306f\u6700\u8fd1\u5c0e\u5165\u3055\u308c\u305f <code>Array</code> \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u6307\u3057\u307e\u3059\uff08\u4ee5\u4e0b\u3092\u53c2\u7167\uff09\u3002</p>"},{"location":"user-guide/expressions/lists/#list_3","title":"<code>List</code> \u5185\u306e\u8981\u7d20\u3054\u3068\u306e\u8a08\u7b97","text":"<p>\u521d\u671f <code>DataFrame</code> \u304b\u3089\u30a8\u30e9\u30fc\u306e\u6570\u304c\u6700\u3082\u591a\u3044\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7279\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u6b21\u306e\u624b\u9806\u3092\u884c\u3044\u307e\u3059\uff1a</p> <ol> <li>\u6587\u5b57\u5217\u5165\u529b\u3092 <code>List</code> \u306e\u6587\u5b57\u5217\u5024\u3068\u3057\u3066\u89e3\u6790\u3057\u307e\u3059\uff08\u65e2\u306b\u5b9f\u884c\u6e08\u307f\uff09\u3002</li> <li>\u6570\u5b57\u306b\u5909\u63db\u53ef\u80fd\u306a\u6587\u5b57\u5217\u3092\u7279\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u30ea\u30b9\u30c8\u5185\u306e\u975e\u6570\u5024\uff08\u3064\u307e\u308a <code>null</code> \u5024\uff09\u306e\u6570\u3092\u884c\u3054\u3068\u306b\u7279\u5b9a\u3057\u307e\u3059\u3002</li> <li>\u3053\u306e\u51fa\u529b\u3092 <code>errors</code> \u3068\u540d\u4ed8\u3051\u3001\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7c21\u5358\u306b\u7279\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002</li> </ol> <p>\u7b2c\u4e09\u30b9\u30c6\u30c3\u30d7\u306b\u306f\u3001\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u306b\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\uff08\u307e\u305f\u306f\u4ee3\u66ff\u3068\u3057\u3066\u6b63\u898f\u8868\u73fe\u691c\u7d22\uff09\u64cd\u4f5c\u3092\u9069\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f <code>pl.element()</code> \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u305d\u308c\u3089\u3092\u6700\u521d\u306b\u53c2\u7167\u3057\u3066\u304b\u3089\u3001\u9069\u5207\u306a Polars \u5f0f\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p>  Python Rust <p> <code>Expr.list</code> \u00b7 <code>element</code> <pre><code>out = weather.with_columns(\n    pl.col(\"temperatures\")\n    .str.split(\" \")\n    .list.eval(pl.element().cast(pl.Int64, strict=False).is_null())\n    .list.sum()\n    .alias(\"errors\")\n)\nprint(out)\n</code></pre></p> <p> <code>Expr.list</code> \u00b7 <code>element</code> <pre><code>let out = weather\n    .clone()\n    .lazy()\n    .with_columns([col(\"temperatures\")\n        .str()\n        .split(lit(\" \"))\n        .list()\n        .eval(col(\"\").cast(DataType::Int64).is_null(), false)\n        .list()\n        .sum()\n        .alias(\"errors\")])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures                    \u2506 errors \u2502\n\u2502 ---       \u2506 ---                             \u2506 ---    \u2502\n\u2502 str       \u2506 str                             \u2506 u32    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 20 5 5 E1 7 13 19 9 6 20        \u2506 1      \u2502\n\u2502 Station 2 \u2506 18 8 16 11 23 E2 8 E2 E2 E2 90\u2026 \u2506 4      \u2502\n\u2502 Station 3 \u2506 19 24 E9 16 6 12 10 22          \u2506 1      \u2502\n\u2502 Station 4 \u2506 E2 E0 15 7 8 10 E1 24 17 13 6   \u2506 3      \u2502\n\u2502 Station 5 \u2506 14 8 E0 16 22 24 E1             \u2506 2      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u6b63\u898f\u8868\u73fe\u30eb\u30fc\u30c8\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff08\u3064\u307e\u308a\u3001any \u82f1\u5b57\u306e\u5b58\u5728\u3092\u8a8d\u8b58\u3059\u308b\u3053\u3068\uff09\uff1f</p>  Python Rust <p> <code>str.contains</code> <pre><code>out = weather.with_columns(\n    pl.col(\"temperatures\")\n    .str.split(\" \")\n    .list.eval(pl.element().str.contains(\"(?i)[a-z]\"))\n    .list.sum()\n    .alias(\"errors\")\n)\nprint(out)\n</code></pre></p> <p> <code>str.contains</code> \u00b7  Available on feature regex <pre><code>let out = weather\n    .clone()\n    .lazy()\n    .with_columns([col(\"temperatures\")\n        .str()\n        .split(lit(\" \"))\n        .list()\n        .eval(col(\"\").str().contains(lit(\"(?i)[a-z]\"), false), false)\n        .list()\n        .sum()\n        .alias(\"errors\")])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures                    \u2506 errors \u2502\n\u2502 ---       \u2506 ---                             \u2506 ---    \u2502\n\u2502 str       \u2506 str                             \u2506 u32    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 20 5 5 E1 7 13 19 9 6 20        \u2506 1      \u2502\n\u2502 Station 2 \u2506 18 8 16 11 23 E2 8 E2 E2 E2 90\u2026 \u2506 4      \u2502\n\u2502 Station 3 \u2506 19 24 E9 16 6 12 10 22          \u2506 1      \u2502\n\u2502 Station 4 \u2506 E2 E0 15 7 8 10 E1 24 17 13 6   \u2506 3      \u2502\n\u2502 Station 5 \u2506 14 8 E0 16 22 24 E1             \u2506 2      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>(?i)</code> \u306b\u6163\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001Polars \u306e <code>str.contains</code> \u95a2\u6570\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u308b\u826f\u3044\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3059\uff01Rust regex \u30af\u30ec\u30fc\u30c8\u306f\u591a\u304f\u306e\u8ffd\u52a0\u306e\u6b63\u898f\u8868\u73fe\u30d5\u30e9\u30b0\u3092\u63d0\u4f9b\u3057\u3066\u304a\u308a\u3001\u5f79\u7acb\u3064\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002</p>"},{"location":"user-guide/expressions/lists/#_1","title":"\u884c\u3054\u3068\u306e\u8a08\u7b97","text":"<p>\u3053\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306f\u884c\u65b9\u5411\u3067\u306e\u8a08\u7b97\u306b\u7406\u60f3\u7684\u3067\u3059\u3002</p> <p><code>list.eval</code> \u5f0f\uff08Rust \u3067\u306f <code>list().eval</code>\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066 \u4efb\u610f\u306e Polars \u64cd\u4f5c\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff01\u3053\u308c\u3089\u306e\u5f0f\u306f\u5b8c\u5168\u306b Polars \u306e\u30af\u30a8\u30ea\u30a8\u30f3\u30b8\u30f3\u3067\u5b9f\u884c\u3055\u308c\u3001\u4e26\u5217\u306b\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u3001\u6700\u9069\u5316\u3055\u308c\u307e\u3059\u3002\u7570\u306a\u308b\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u306e 3 \u65e5\u9593\u306b\u308f\u305f\u308b\u5225\u306e\u5929\u6c17\u30c7\u30fc\u30bf\u304c\u3042\u308b\u3068\u3057\u307e\u3057\u3087\u3046\uff1a</p>  Python Rust <p> <code>DataFrame</code> <pre><code>weather_by_day = pl.DataFrame(\n    {\n        \"station\": [\"Station \" + str(x) for x in range(1, 11)],\n        \"day_1\": [17, 11, 8, 22, 9, 21, 20, 8, 8, 17],\n        \"day_2\": [15, 11, 10, 8, 7, 14, 18, 21, 15, 13],\n        \"day_3\": [16, 15, 24, 24, 8, 23, 19, 23, 16, 10],\n    }\n)\nprint(weather_by_day)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let stns: Vec&lt;String&gt; = (1..11).map(|i| format!(\"Station {i}\")).collect();\nlet weather_by_day = df!(\n        \"station\" =&gt; &amp;stns,\n        \"day_1\" =&gt; &amp;[17, 11, 8, 22, 9, 21, 20, 8, 8, 17],\n        \"day_2\" =&gt; &amp;[15, 11, 10, 8, 7, 14, 18, 21, 15, 13],\n        \"day_3\" =&gt; &amp;[16, 15, 24, 24, 8, 23, 19, 23, 16, 10],\n)?;\nprintln!(\"{}\", &amp;weather_by_day);\n</code></pre></p> <pre><code>shape: (10, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station    \u2506 day_1 \u2506 day_2 \u2506 day_3 \u2502\n\u2502 ---        \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n\u2502 str        \u2506 i64   \u2506 i64   \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1  \u2506 17    \u2506 15    \u2506 16    \u2502\n\u2502 Station 2  \u2506 11    \u2506 11    \u2506 15    \u2502\n\u2502 Station 3  \u2506 8     \u2506 10    \u2506 24    \u2502\n\u2502 Station 4  \u2506 22    \u2506 8     \u2506 24    \u2502\n\u2502 Station 5  \u2506 9     \u2506 7     \u2506 8     \u2502\n\u2502 Station 6  \u2506 21    \u2506 14    \u2506 23    \u2502\n\u2502 Station 7  \u2506 20    \u2506 18    \u2506 19    \u2502\n\u2502 Station 8  \u2506 8     \u2506 21    \u2506 23    \u2502\n\u2502 Station 9  \u2506 8     \u2506 15    \u2506 16    \u2502\n\u2502 Station 10 \u2506 17    \u2506 13    \u2506 10    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u9762\u767d\u3044\u3053\u3068\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5404\u30b9\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u6e2c\u5b9a\u3055\u308c\u305f\u6e29\u5ea6\u306e\u65e5\u3054\u3068\u306e\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\u30e9\u30f3\u30af\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002Pandas \u3067\u306f <code>rank</code> \u5024\u306e\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Polars \u306f\u3053\u308c\u3092\u76f4\u63a5\u884c\u3046\u7279\u5225\u306a\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5f0f\u304c\u3068\u3066\u3082\u591a\u7528\u9014\u3067\u3042\u308b\u305f\u3081\u3001\u81ea\u5206\u306e\u30d1\u30fc\u30bb\u30f3\u30c6\u30fc\u30b8\u30e9\u30f3\u30af\u5f0f\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p>  Python Rust <p> <code>list.eval</code> <pre><code>rank_pct = (pl.element().rank(descending=True) / pl.col(\"*\").count()).round(2)\n\nout = weather_by_day.with_columns(\n    # create the list of homogeneous data\n    pl.concat_list(pl.all().exclude(\"station\")).alias(\"all_temps\")\n).select(\n    # select all columns except the intermediate list\n    pl.all().exclude(\"all_temps\"),\n    # compute the rank by calling `list.eval`\n    pl.col(\"all_temps\").list.eval(rank_pct, parallel=True).alias(\"temps_rank\"),\n)\n\nprint(out)\n</code></pre></p> <p> <code>list.eval</code> \u00b7  Available on feature list_eval <pre><code>let rank_pct = (col(\"\")\n    .rank(\n        RankOptions {\n            method: RankMethod::Average,\n            descending: true,\n        },\n        None,\n    )\n    .cast(DataType::Float32)\n    / col(\"*\").count().cast(DataType::Float32))\n.round(2);\n\nlet out = weather_by_day\n    .clone()\n    .lazy()\n    .with_columns(\n        // create the list of homogeneous data\n        [concat_list([all().exclude([\"station\"])])?.alias(\"all_temps\")],\n    )\n    .select(\n        // select all columns except the intermediate list\n        [\n            all().exclude([\"all_temps\"]),\n            // compute the rank by calling `list.eval`\n            col(\"all_temps\")\n                .list()\n                .eval(rank_pct, true)\n                .alias(\"temps_rank\"),\n        ],\n    )\n    .collect()?;\n\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (10, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station    \u2506 day_1 \u2506 day_2 \u2506 day_3 \u2506 temps_rank         \u2502\n\u2502 ---        \u2506 ---   \u2506 ---   \u2506 ---   \u2506 ---                \u2502\n\u2502 str        \u2506 i64   \u2506 i64   \u2506 i64   \u2506 list[f64]          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1  \u2506 17    \u2506 15    \u2506 16    \u2506 [0.33, 1.0, 0.67]  \u2502\n\u2502 Station 2  \u2506 11    \u2506 11    \u2506 15    \u2506 [0.83, 0.83, 0.33] \u2502\n\u2502 Station 3  \u2506 8     \u2506 10    \u2506 24    \u2506 [1.0, 0.67, 0.33]  \u2502\n\u2502 Station 4  \u2506 22    \u2506 8     \u2506 24    \u2506 [0.67, 1.0, 0.33]  \u2502\n\u2502 Station 5  \u2506 9     \u2506 7     \u2506 8     \u2506 [0.33, 1.0, 0.67]  \u2502\n\u2502 Station 6  \u2506 21    \u2506 14    \u2506 23    \u2506 [0.67, 1.0, 0.33]  \u2502\n\u2502 Station 7  \u2506 20    \u2506 18    \u2506 19    \u2506 [0.33, 1.0, 0.67]  \u2502\n\u2502 Station 8  \u2506 8     \u2506 21    \u2506 23    \u2506 [1.0, 0.67, 0.33]  \u2502\n\u2502 Station 9  \u2506 8     \u2506 15    \u2506 16    \u2506 [1.0, 0.67, 0.33]  \u2502\n\u2502 Station 10 \u2506 17    \u2506 13    \u2506 10    \u2506 [0.33, 0.67, 1.0]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/lists/#polars-array","title":"Polars <code>Array</code>","text":"<p><code>Array</code> \u306f\u6700\u8fd1\u5c0e\u5165\u3055\u308c\u305f\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3067\u3001\u73fe\u5728\u3082\u6a5f\u80fd\u304c\u9032\u5316\u3057\u3066\u3044\u307e\u3059\u3002<code>List</code> \u3068 <code>Array</code> \u306e\u4e3b\u306a\u9055\u3044\u306f\u3001\u5f8c\u8005\u306f\u884c\u3054\u3068\u306b\u540c\u3058\u6570\u306e\u8981\u7d20\u3092\u6301\u3064\u3053\u3068\u304c\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\u304c\u3001<code>List</code> \u306f\u53ef\u5909\u306e\u8981\u7d20\u6570\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u308c\u3067\u3082\u3001\u5404\u8981\u7d20\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306f\u540c\u3058\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u306e\u3088\u3046\u306b <code>Array</code> \u5217\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>Array</code> <pre><code>array_df = pl.DataFrame(\n    [\n        pl.Series(\"Array_1\", [[1, 3], [2, 5]]),\n        pl.Series(\"Array_2\", [[1, 7, 3], [8, 1, 0]]),\n    ],\n    schema={\n        \"Array_1\": pl.Array(pl.Int64, 2),\n        \"Array_2\": pl.Array(pl.Int64, 3),\n    },\n)\nprint(array_df)\n</code></pre></p> <p> <code>Array</code> <pre><code>let mut col1: ListPrimitiveChunkedBuilder&lt;Int32Type&gt; =\n    ListPrimitiveChunkedBuilder::new(\"Array_1\", 8, 8, DataType::Int32);\ncol1.append_slice(&amp;[1, 3]);\ncol1.append_slice(&amp;[2, 5]);\nlet mut col2: ListPrimitiveChunkedBuilder&lt;Int32Type&gt; =\n    ListPrimitiveChunkedBuilder::new(\"Array_2\", 8, 8, DataType::Int32);\ncol2.append_slice(&amp;[1, 7, 3]);\ncol2.append_slice(&amp;[8, 1, 0]);\nlet array_df = DataFrame::new([col1.finish(), col2.finish()].into())?;\n\nprintln!(\"{}\", &amp;array_df);\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Array_1       \u2506 Array_2       \u2502\n\u2502 ---           \u2506 ---           \u2502\n\u2502 array[i64, 2] \u2506 array[i64, 3] \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 [1, 3]        \u2506 [1, 7, 3]     \u2502\n\u2502 [2, 5]        \u2506 [8, 1, 0]     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u57fa\u672c\u64cd\u4f5c\u304c\u5229\u7528\u53ef\u80fd\u3067\u3059\uff1a</p>  Python Rust <p> <code>Series.arr</code> <pre><code>out = array_df.select(\n    pl.col(\"Array_1\").arr.min().name.suffix(\"_min\"),\n    pl.col(\"Array_2\").arr.sum().name.suffix(\"_sum\"),\n)\nprint(out)\n</code></pre></p> <p> <code>Series.arr</code> <pre><code>let out = array_df\n    .clone()\n    .lazy()\n    .select([\n        col(\"Array_1\").list().min().name().suffix(\"_min\"),\n        col(\"Array_2\").list().sum().name().suffix(\"_sum\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Array_1_min \u2506 Array_2_sum \u2502\n\u2502 ---         \u2506 ---         \u2502\n\u2502 i64         \u2506 i64         \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1           \u2506 11          \u2502\n\u2502 2           \u2506 9           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Polars <code>Array</code> \u306f\u73fe\u5728\u3082\u7a4d\u6975\u7684\u306b\u958b\u767a\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306f\u5c06\u6765\u5909\u66f4\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002</p>"},{"location":"user-guide/expressions/missing-data/","title":"\u6b20\u640d\u30c7\u30fc\u30bf\uff08Missing data\uff09","text":"<p>\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Polars \u306b\u304a\u3051\u308b\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u8868\u73fe\u65b9\u6cd5\u3068\u3001\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u88dc\u5b8c\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/missing-data/#null-nan","title":"<code>null</code> \u3068 <code>NaN</code> \u5024","text":"<p><code>DataFrame</code>\uff08\u307e\u305f\u306f\u540c\u7b49\u306e <code>Series</code>\uff09\u306e\u5404\u30ab\u30e9\u30e0\u306f\u3001Arrow \u914d\u5217\u307e\u305f\u306f Arrow \u914d\u5217\u306e\u96c6\u5408\u3067\u3059\uff08Apache Arrow \u5f62\u5f0f\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\uff09\u3002\u6b20\u640d\u30c7\u30fc\u30bf\u306f\u3001Arrow \u304a\u3088\u3073 Polars \u3067 <code>null</code> \u5024\u3068\u3057\u3066\u8868\u3055\u308c\u307e\u3059\u3002\u3053\u306e <code>null</code> \u5024\u306f\u3001\u6570\u5024\u3092\u542b\u3080\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002</p> <p>Polars \u306f\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u30ab\u30e9\u30e0\u306b\u5bfe\u3057\u3066 <code>NotaNumber</code> \u307e\u305f\u306f <code>NaN</code> \u5024\u3092\u8a31\u5bb9\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e <code>NaN</code> \u5024\u306f\u3001\u6b20\u640d\u30c7\u30fc\u30bf\u3067\u306f\u306a\u304f\u6d6e\u52d5\u5c0f\u6570\u70b9\u30c7\u30fc\u30bf\u306e\u4e00\u7a2e\u3068\u898b\u306a\u3055\u308c\u307e\u3059\u3002<code>NaN</code> \u5024\u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002</p> <p>Python \u306e <code>None</code> \u5024\u3092\u4f7f\u7528\u3057\u3066\u3001\u624b\u52d5\u3067\u6b20\u640d\u5024\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df = pl.DataFrame(\n    {\n        \"value\": [1, None],\n    },\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df = df! (\n    \"value\" =&gt; &amp;[Some(1), None],\n)?;\n\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 value \u2502\n\u2502 ---   \u2502\n\u2502 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1     \u2502\n\u2502 null  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Info</p> <p>pandas \u3067\u306f\u3001\u30ab\u30e9\u30e0\u306e dtype \u306b\u3088\u3063\u3066\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u5024\u304c\u7570\u306a\u308a\u307e\u3059\u3002Polars \u3067\u306f\u3001\u6b20\u640d\u30c7\u30fc\u30bf\u306f\u5e38\u306b <code>null</code> \u5024\u3068\u3057\u3066\u8868\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/missing-data/#_1","title":"\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u30e1\u30bf\u30c7\u30fc\u30bf","text":"<p>Polars \u3067\u4f7f\u7528\u3055\u308c\u308b\u5404 Arrow \u914d\u5217\u306f\u3001\u6b20\u640d\u30c7\u30fc\u30bf\u306b\u95a2\u9023\u3059\u308b\u4e8c\u7a2e\u985e\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u306b\u3088\u308a\u3001Polars \u306f\u6b20\u640d\u5024\u306e\u6570\u3068\u3069\u306e\u5024\u304c\u6b20\u640d\u3057\u3066\u3044\u308b\u304b\u3092\u8fc5\u901f\u306b\u793a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u6700\u521d\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u306f <code>null_count</code> \u3067\u3001\u3053\u308c\u306f\u30ab\u30e9\u30e0\u5185\u306e <code>null</code> \u5024\u3092\u6301\u3064\u884c\u306e\u6570\u3067\u3059\uff1a</p>  Python Rust <p> <code>null_count</code> <pre><code>null_count_df = df.null_count()\nprint(null_count_df)\n</code></pre></p> <p> <code>null_count</code> <pre><code>let null_count_df = df.null_count();\nprintln!(\"{}\", &amp;null_count_df);\n</code></pre></p> <pre><code>shape: (1, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 value \u2502\n\u2502 ---   \u2502\n\u2502 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>null_count</code> \u30e1\u30bd\u30c3\u30c9\u306f <code>DataFrame</code>\u3001<code>DataFrame</code> \u306e\u30ab\u30e9\u30e0\u3001\u307e\u305f\u306f <code>Series</code> \u306b\u5bfe\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002<code>null_count</code> \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u57fa\u672c\u7684\u306a Arrow \u914d\u5217\u3067 <code>null_count</code> \u304c\u3059\u3067\u306b\u8a08\u7b97\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u4f4e\u30b3\u30b9\u30c8\u306e\u64cd\u4f5c\u3067\u3059\u3002</p> <p>\u3082\u3046\u4e00\u3064\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u306f\u3001\u5404\u30c7\u30fc\u30bf\u5024\u304c\u6709\u52b9\u304b\u6b20\u640d\u304b\u3092\u793a\u3059 validity bitmap \u3068\u547c\u3070\u308c\u308b\u914d\u5217\u3067\u3059\u3002 validity bitmap \u306f\u30e1\u30e2\u30ea\u52b9\u7387\u304c\u826f\u3044\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u30d3\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\uff08\u5404\u5024\u306f 0 \u307e\u305f\u306f 1\uff09\u3002\u3053\u306e\u30d3\u30c3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c9\u306b\u3088\u308a\u3001\u914d\u5217\u3054\u3068\u306e\u30e1\u30e2\u30ea\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\uff08\u914d\u5217\u306e\u9577\u3055 / 8\uff09\u30d0\u30a4\u30c8\u306e\u307f\u3067\u3059\u3002validity bitmap \u306f Polars \u306e <code>is_null</code> \u30e1\u30bd\u30c3\u30c9\u3067\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p> <p><code>DataFrame</code> \u307e\u305f\u306f <code>Series</code> \u306e\u30ab\u30e9\u30e0\u306b\u5bfe\u3059\u308b validity bitmap \u3092\u57fa\u306b <code>Series</code> \u3092\u8fd4\u3059\u3053\u3068\u304c\u3001<code>is_null</code> \u30e1\u30bd\u30c3\u30c9\u3067\u53ef\u80fd\u3067\u3059\uff1a</p>  Python Rust <p> <code>is_null</code> <pre><code>is_null_series = df.select(\n    pl.col(\"value\").is_null(),\n)\nprint(is_null_series)\n</code></pre></p> <p> <code>is_null</code> <pre><code>let is_null_series = df\n    .clone()\n    .lazy()\n    .select([col(\"value\").is_null()])\n    .collect()?;\nprintln!(\"{}\", &amp;is_null_series);\n</code></pre></p> <pre><code>shape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 value \u2502\n\u2502 ---   \u2502\n\u2502 bool  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 false \u2502\n\u2502 true  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>is_null</code> \u30e1\u30bd\u30c3\u30c9\u306f\u3001<code>null</code> \u5024\u3092\u5b8c\u5168\u306b\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u4f4e\u30b3\u30b9\u30c8\u306e\u64cd\u4f5c\u3067\u3059\u3002\u3053\u308c\u306f\u3001validity bitmap \u304c\u3059\u3067\u306b\u5b58\u5728\u3057\u3001Boolean \u914d\u5217\u3068\u3057\u3066\u8fd4\u3055\u308c\u308b\u305f\u3081\u3067\u3059\u3002</p>"},{"location":"user-guide/expressions/missing-data/#_2","title":"\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u88dc\u5b8c","text":"<p><code>Series</code> \u306e\u6b20\u640d\u30c7\u30fc\u30bf\u306f\u3001<code>fill_null</code> \u30e1\u30bd\u30c3\u30c9\u3067\u88dc\u5b8c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u3069\u306e\u3088\u3046\u306b\u88dc\u5b8c\u3059\u308b\u304b\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u4e3b\u306a\u65b9\u6cd5\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <ul> <li>\u30ea\u30c6\u30e9\u30eb\uff080 \u3084 \"0\" \u306a\u3069\uff09\u3067\u88dc\u5b8c</li> <li>\u6226\u7565\uff08\u524d\u65b9\u306b\u88dc\u5b8c\u3059\u308b\u306a\u3069\uff09\u3067\u88dc\u5b8c</li> <li>\u5225\u306e\u30ab\u30e9\u30e0\u304b\u3089\u306e\u5024\u3067\u7f6e\u63db\u3059\u308b\u306a\u3069\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3067\u88dc\u5b8c</li> <li>\u88dc\u9593</li> </ul> <p>\u6b20\u640d\u5024\u304c\u3042\u308b <code>col2</code> \u3092\u6301\u3064\u30b7\u30f3\u30d7\u30eb\u306a <code>DataFrame</code> \u3092\u5b9a\u7fa9\u3057\u3066\u3001null \u3092\u88dc\u5b8c\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\uff1a</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df = pl.DataFrame(\n    {\n        \"col1\": [1, 2, 3],\n        \"col2\": [1, None, 3],\n    },\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df = df!(\n        \"col1\" =&gt; &amp;[Some(1), Some(2), Some(3)],\n        \"col2\" =&gt; &amp;[Some(1), None, Some(3)],\n\n)?;\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2502\n\u2502 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2502\n\u2502 2    \u2506 null \u2502\n\u2502 3    \u2506 3    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/missing-data/#_3","title":"\u6307\u5b9a\u3055\u308c\u305f\u30ea\u30c6\u30e9\u30eb\u5024\u3067\u88dc\u5b8c","text":"<p>\u6307\u5b9a\u3055\u308c\u305f\u30ea\u30c6\u30e9\u30eb\u5024\u3067\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u88dc\u5b8c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070 <code>pl.lit</code> \u3092\u4f7f\u3044\u307e\u3059\uff1a</p>  Python Rust <p> <code>fill_null</code> <pre><code>fill_literal_df = df.with_columns(\n    pl.col(\"col2\").fill_null(pl.lit(2)),\n)\nprint(fill_literal_df)\n</code></pre></p> <p> <code>fill_null</code> <pre><code>let fill_literal_df = df\n    .clone()\n    .lazy()\n    .with_columns([col(\"col2\").fill_null(lit(2))])\n    .collect()?;\nprintln!(\"{}\", &amp;fill_literal_df);\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2502\n\u2502 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2502\n\u2502 2    \u2506 2    \u2502\n\u2502 3    \u2506 3    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/missing-data/#_4","title":"\u6226\u7565\u3067\u88dc\u5b8c","text":"<p>\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u6226\u7565\u3067\u88dc\u5b8c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u524d\u65b9\u306b\u88dc\u5b8c\u3059\u308b\u6226\u7565\u3067\u3059\uff1a</p>  Python Rust <p> <code>fill_null</code> <pre><code>fill_forward_df = df.with_columns(\n    pl.col(\"col2\").fill_null(strategy=\"forward\"),\n)\nprint(fill_forward_df)\n</code></pre></p> <p> <code>fill_null</code> <pre><code>let fill_forward_df = df\n    .clone()\n    .lazy()\n    .with_columns([col(\"col2\").forward_fill(None)])\n    .collect()?;\nprintln!(\"{}\", &amp;fill_forward_df);\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2502\n\u2502 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1    \u2502\n\u2502 2    \u2506 1    \u2502\n\u2502 3    \u2506 3    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u4ed6\u306e\u88dc\u5b8c\u6226\u7565\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/missing-data/#_5","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3067\u88dc\u5b8c","text":"<p>\u3088\u308a\u67d4\u8edf\u6027\u3092\u6301\u3063\u3066\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u88dc\u5b8c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001\u305d\u306e\u30ab\u30e9\u30e0\u306e\u4e2d\u592e\u5024\u3067 null \u3092\u88dc\u5b8c\u3057\u307e\u3059\uff1a</p>  Python Rust <p> <code>fill_null</code> <pre><code>fill_median_df = df.with_columns(\n    pl.col(\"col2\").fill_null(pl.median(\"col2\")),\n)\nprint(fill_median_df)\n</code></pre></p> <p> <code>fill_null</code> <pre><code>let fill_median_df = df\n    .clone()\n    .lazy()\n    .with_columns([col(\"col2\").fill_null(median(\"col2\"))])\n    .collect()?;\nprintln!(\"{}\", &amp;fill_median_df);\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2502\n\u2502 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 f64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1.0  \u2502\n\u2502 2    \u2506 2.0  \u2502\n\u2502 3    \u2506 3.0  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u5834\u5408\u3001\u4e2d\u592e\u5024\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u7d71\u8a08\u3067\u3042\u308b\u305f\u3081\u3001\u30ab\u30e9\u30e0\u306f\u6574\u6570\u304b\u3089\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/missing-data/#_6","title":"\u88dc\u9593\u3067\u88dc\u5b8c","text":"<p>\u3055\u3089\u306b\u3001\u88dc\u9593\u3092\u4f7f\u7528\u3057\u3066\uff08<code>fill_null</code> \u95a2\u6570\u3092\u4f7f\u7528\u305b\u305a\u306b\uff09null \u3092\u88dc\u5b8c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>interpolate</code> <pre><code>fill_interpolation_df = df.with_columns(\n    pl.col(\"col2\").interpolate(),\n)\nprint(fill_interpolation_df)\n</code></pre></p> <p> <code>interpolate</code> <pre><code>let fill_interpolation_df = df\n    .clone()\n    .lazy()\n    .with_columns([col(\"col2\").interpolate(InterpolationMethod::Linear)])\n    .collect()?;\nprintln!(\"{}\", &amp;fill_interpolation_df);\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 col1 \u2506 col2 \u2502\n\u2502 ---  \u2506 ---  \u2502\n\u2502 i64  \u2506 f64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 1.0  \u2502\n\u2502 2    \u2506 2.0  \u2502\n\u2502 3    \u2506 3.0  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/missing-data/#notanumber-nan","title":"<code>NotaNumber</code> \u307e\u305f\u306f <code>NaN</code> \u5024","text":"<p><code>Series</code> \u306e\u6b20\u640d\u30c7\u30fc\u30bf\u306b\u306f <code>null</code> \u5024\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u30c7\u30fc\u30bf\u578b\u306e\u30ab\u30e9\u30e0\u3067\u306f <code>NotaNumber</code> \u307e\u305f\u306f <code>NaN</code> \u5024\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u306e <code>NaN</code> \u5024\u306f\u3001Numpy \u306e <code>np.nan</code> \u307e\u305f\u306f\u30cd\u30a4\u30c6\u30a3\u30d6 Python \u306e <code>float('nan')</code> \u304b\u3089\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>DataFrame</code> <pre><code>nan_df = pl.DataFrame(\n    {\n        \"value\": [1.0, np.nan, float(\"nan\"), 3.0],\n    },\n)\nprint(nan_df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let nan_df = df!(\n        \"value\" =&gt; [1.0, f64::NAN, f64::NAN, 3.0],\n)?;\nprintln!(\"{}\", &amp;nan_df);\n</code></pre></p> <pre><code>shape: (4, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 value \u2502\n\u2502 ---   \u2502\n\u2502 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.0   \u2502\n\u2502 NaN   \u2502\n\u2502 NaN   \u2502\n\u2502 3.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Info</p> <p>pandas \u3067\u306f\u3001\u6574\u6570\u30ab\u30e9\u30e0\u306e <code>NaN</code> \u5024\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30ab\u30e9\u30e0\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u307e\u3059\u3002\u3053\u308c\u306f Polars \u3067\u306f\u8d77\u3053\u3089\u305a\u3001\u4ee3\u308f\u308a\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002</p> <p><code>NaN</code> \u5024\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u30c7\u30fc\u30bf\u306e\u4e00\u7a2e\u3068\u898b\u306a\u3055\u308c\u3001Polars \u3067\u306f\u6b20\u640d\u30c7\u30fc\u30bf\u3068\u306f\u898b\u306a\u3055\u308c\u307e\u305b\u3093\u3002\u3064\u307e\u308a\uff1a</p> <ul> <li><code>NaN</code> \u5024\u306f <code>null_count</code> \u30e1\u30bd\u30c3\u30c9\u3067\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u305b\u3093</li> <li><code>NaN</code> \u5024\u306f <code>fill_nan</code> \u30e1\u30bd\u30c3\u30c9\u3067\u88dc\u5b8c\u3055\u308c\u307e\u3059\u304c\u3001<code>fill_null</code> \u30e1\u30bd\u30c3\u30c9\u3067\u306f\u88dc\u5b8c\u3055\u308c\u307e\u305b\u3093</li> </ul> <p>Polars \u306b\u306f <code>is_nan</code> \u3068 <code>fill_nan</code> \u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001<code>is_null</code> \u3068 <code>fill_null</code> \u306e\u30e1\u30bd\u30c3\u30c9\u3068\u540c\u69d8\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002<code>NaN</code> \u5024\u306b\u306f\u4e8b\u524d\u8a08\u7b97\u3055\u308c\u305f validity bitmap \u304c\u306a\u3044\u305f\u3081\u3001<code>is_nan</code> \u30e1\u30bd\u30c3\u30c9\u7528\u306b\u3053\u308c\u3092\u8a08\u7b97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p><code>null</code> \u3068 <code>NaN</code> \u5024\u306e\u3082\u3046\u4e00\u3064\u306e\u9055\u3044\u306f\u3001<code>null</code> \u5024\u3092\u542b\u3080\u30ab\u30e9\u30e0\u306e\u5e73\u5747\u3092\u53d6\u308b\u5834\u5408\u3001<code>null</code> \u5024\u306f\u8a08\u7b97\u304b\u3089\u9664\u5916\u3055\u308c\u307e\u3059\u304c\u3001<code>NaN</code> \u5024\u3092\u542b\u3080\u5834\u5408\u3001\u5e73\u5747\u3092\u53d6\u308b\u3068 <code>NaN</code> \u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u6319\u52d5\u306f\u3001<code>NaN</code> \u5024\u3092 <code>null</code> \u5024\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u56de\u907f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>fill_nan</code> <pre><code>mean_nan_df = nan_df.with_columns(\n    pl.col(\"value\").fill_nan(None).alias(\"value\"),\n).mean()\nprint(mean_nan_df)\n</code></pre></p> <p> <code>fill_nan</code> <pre><code>let mean_nan_df = nan_df\n    .clone()\n    .lazy()\n    .with_columns([col(\"value\").fill_nan(lit(NULL)).alias(\"value\")])\n    .mean()\n    .collect()?;\nprintln!(\"{}\", &amp;mean_nan_df);\n</code></pre></p> <pre><code>shape: (1, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 value \u2502\n\u2502 ---   \u2502\n\u2502 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/numpy/","title":"Numpy","text":"<p>Polars \u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f NumPy ufuncs\uff08\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\uff09 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b NumPy \u95a2\u6570\u306e\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u3053\u308c\u306f\u3001Polars \u304c\u63d0\u4f9b\u3057\u3066\u3044\u306a\u3044\u95a2\u6570\u304c\u3042\u308b\u5834\u5408\u3001NumPy \u3092\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u3001NumPy API \u3092\u901a\u3058\u3066\u9ad8\u901f\u306a\u5217\u64cd\u4f5c\u304c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/numpy/#_1","title":"\u4f8b","text":"Python <p> <code>DataFrame</code> \u00b7 <code>log</code> \u00b7  Available on feature numpy <pre><code>import polars as pl\nimport numpy as np\n\ndf = pl.DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n\nout = df.select(np.log(pl.all()).name.suffix(\"_log\"))\nprint(out)\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a_log    \u2506 b_log    \u2502\n\u2502 ---      \u2506 ---      \u2502\n\u2502 f64      \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0.0      \u2506 1.386294 \u2502\n\u2502 0.693147 \u2506 1.609438 \u2502\n\u2502 1.098612 \u2506 1.791759 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/numpy/#_2","title":"\u76f8\u4e92\u904b\u7528\u6027","text":"<p>Polars <code>Series</code> \u306f NumPy \u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\uff08ufuncs\uff09\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002<code>np.exp()</code>\u3001<code>np.cos()</code>\u3001<code>np.div()</code> \u306a\u3069\u306e\u8981\u7d20\u3054\u3068\u306e\u95a2\u6570\u306f\u3001\u307b\u3068\u3093\u3069\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u3057\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <p>\u305f\u3060\u3057\u3001Polars \u56fa\u6709\u306e\u6ce8\u8a18\u3068\u3057\u3066\uff1a\u6b20\u640d\u5024\u306f\u5225\u306e\u30d3\u30c3\u30c8\u30de\u30b9\u30af\u3067\u3042\u308a\u3001NumPy \u306b\u306f\u898b\u3048\u307e\u305b\u3093\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u7a93\u95a2\u6570\u3084 <code>np.convolve()</code> \u304c\u4e0d\u5b8c\u5168\u306a\u7d50\u679c\u3084\u8aa4\u3063\u305f\u7d50\u679c\u3092\u3082\u305f\u3089\u3059\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>Polars <code>Series</code> \u3092 NumPy \u914d\u5217\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3001<code>.to_numpy()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u5909\u63db\u4e2d\u306b\u6b20\u640d\u5024\u306f <code>np.nan</code> \u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/operators/","title":"\u57fa\u672c\u6f14\u7b97\u5b50\uff08Basic operators\uff09","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u57fa\u672c\u6f14\u7b97\u5b50\uff08\u4f8b\u3048\u3070\u3001\u52a0\u7b97\u3001\u6e1b\u7b97\u306a\u3069\uff09\u3092\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u3001\u7570\u306a\u308b\u30c6\u30fc\u30de\u3092\u4f7f\u7528\u3057\u305f\u69d8\u3005\u306a\u4f8b\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <p>Note</p> <p>Rust \u3084 Python \u3067\u306f\u3001\u8a00\u8a9e\u304c\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u8a31\u53ef\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u76f4\u63a5\u6f14\u7b97\u5b50\uff08<code>+ - * / &lt; &gt;</code> \u306a\u3069\uff09\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u6f14\u7b97\u5b50 <code>+</code> \u306f <code>.add()</code> \u30e1\u30bd\u30c3\u30c9\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u597d\u307f\u306e\u65b9\u6cd5\u3092\u9078\u629e\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df = pl.DataFrame(\n    {\n        \"nrs\": [1, 2, 3, None, 5],\n        \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", None],\n        \"random\": np.random.rand(5),\n        \"groups\": [\"A\", \"A\", \"B\", \"C\", \"B\"],\n    }\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>use rand::{thread_rng, Rng};\n\nlet mut arr = [0f64; 5];\nthread_rng().fill(&amp;mut arr);\n\nlet df = df! (\n    \"nrs\" =&gt; &amp;[Some(1), Some(2), Some(3), None, Some(5)],\n    \"names\" =&gt; &amp;[Some(\"foo\"), Some(\"ham\"), Some(\"spam\"), Some(\"eggs\"), None],\n    \"random\" =&gt; &amp;arr,\n    \"groups\" =&gt; &amp;[\"A\", \"A\", \"B\", \"C\", \"B\"],\n)?;\n\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs  \u2506 names \u2506 random   \u2506 groups \u2502\n\u2502 ---  \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n\u2502 i64  \u2506 str   \u2506 f64      \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 foo   \u2506 0.154163 \u2506 A      \u2502\n\u2502 2    \u2506 ham   \u2506 0.74005  \u2506 A      \u2502\n\u2502 3    \u2506 spam  \u2506 0.263315 \u2506 B      \u2502\n\u2502 null \u2506 egg   \u2506 0.533739 \u2506 C      \u2502\n\u2502 5    \u2506 null  \u2506 0.014575 \u2506 B      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/operators/#_1","title":"\u6570\u5024\u6f14\u7b97","text":"Python Rust <p> <code>operators</code> <pre><code>df_numerical = df.select(\n    (pl.col(\"nrs\") + 5).alias(\"nrs + 5\"),\n    (pl.col(\"nrs\") - 5).alias(\"nrs - 5\"),\n    (pl.col(\"nrs\") * pl.col(\"random\")).alias(\"nrs * random\"),\n    (pl.col(\"nrs\") / pl.col(\"random\")).alias(\"nrs / random\"),\n)\nprint(df_numerical)\n</code></pre></p> <p> <code>operators</code> <pre><code>let df_numerical = df\n    .clone()\n    .lazy()\n    .select([\n        (col(\"nrs\") + lit(5)).alias(\"nrs + 5\"),\n        (col(\"nrs\") - lit(5)).alias(\"nrs - 5\"),\n        (col(\"nrs\") * col(\"random\")).alias(\"nrs * random\"),\n        (col(\"nrs\") / col(\"random\")).alias(\"nrs / random\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;df_numerical);\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs + 5 \u2506 nrs - 5 \u2506 nrs * random \u2506 nrs / random \u2502\n\u2502 ---     \u2506 ---     \u2506 ---          \u2506 ---          \u2502\n\u2502 i64     \u2506 i64     \u2506 f64          \u2506 f64          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6       \u2506 -4      \u2506 0.154163     \u2506 6.486647     \u2502\n\u2502 7       \u2506 -3      \u2506 1.480099     \u2506 2.702521     \u2502\n\u2502 8       \u2506 -2      \u2506 0.789945     \u2506 11.393198    \u2502\n\u2502 null    \u2506 null    \u2506 null         \u2506 null         \u2502\n\u2502 10      \u2506 0       \u2506 0.072875     \u2506 343.054056   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/operators/#_2","title":"\u8ad6\u7406\u6f14\u7b97","text":"Python Rust <p> <code>operators</code> <pre><code>df_logical = df.select(\n    (pl.col(\"nrs\") &gt; 1).alias(\"nrs &gt; 1\"),\n    (pl.col(\"random\") &lt;= 0.5).alias(\"random &lt;= .5\"),\n    (pl.col(\"nrs\") != 1).alias(\"nrs != 1\"),\n    (pl.col(\"nrs\") == 1).alias(\"nrs == 1\"),\n    ((pl.col(\"random\") &lt;= 0.5) &amp; (pl.col(\"nrs\") &gt; 1)).alias(\"and_expr\"),  # and\n    ((pl.col(\"random\") &lt;= 0.5) | (pl.col(\"nrs\") &gt; 1)).alias(\"or_expr\"),  # or\n)\nprint(df_logical)\n</code></pre></p> <p> <code>operators</code> <pre><code>let df_logical = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"nrs\").gt(1).alias(\"nrs &gt; 1\"),\n        col(\"random\").lt_eq(0.5).alias(\"random &lt; .5\"),\n        col(\"nrs\").neq(1).alias(\"nrs != 1\"),\n        col(\"nrs\").eq(1).alias(\"nrs == 1\"),\n        (col(\"random\").lt_eq(0.5))\n            .and(col(\"nrs\").gt(1))\n            .alias(\"and_expr\"), // and\n        (col(\"random\").lt_eq(0.5))\n            .or(col(\"nrs\").gt(1))\n            .alias(\"or_expr\"), // or\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;df_logical);\n</code></pre></p> <pre><code>shape: (5, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs &gt; 1 \u2506 random &lt;= .5 \u2506 nrs != 1 \u2506 nrs == 1 \u2506 and_expr \u2506 or_expr \u2502\n\u2502 ---     \u2506 ---          \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---     \u2502\n\u2502 bool    \u2506 bool         \u2506 bool     \u2506 bool     \u2506 bool     \u2506 bool    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 false   \u2506 true         \u2506 false    \u2506 true     \u2506 false    \u2506 true    \u2502\n\u2502 true    \u2506 false        \u2506 true     \u2506 false    \u2506 false    \u2506 true    \u2502\n\u2502 true    \u2506 true         \u2506 true     \u2506 false    \u2506 true     \u2506 true    \u2502\n\u2502 null    \u2506 false        \u2506 null     \u2506 null     \u2506 false    \u2506 null    \u2502\n\u2502 true    \u2506 true         \u2506 true     \u2506 false    \u2506 true     \u2506 true    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/plugins/","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u30d7\u30e9\u30b0\u30a4\u30f3\uff08Expression plugins\uff09","text":"<p>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 \u30d7\u30e9\u30b0\u30a4\u30f3\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u512a\u5148\u3055\u308c\u308b\u65b9\u6cd5\u3067\u3059\u3002 Rust \u95a2\u6570\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3001\u305d\u308c\u3092 Polars \u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3068\u3057\u3066\u767b\u9332\u3067\u304d\u307e\u3059\u3002 Polars \u30a8\u30f3\u30b8\u30f3\u306f\u30e9\u30f3\u30bf\u30a4\u30e0\u3067\u95a2\u6570\u3092\u52d5\u7684\u306b\u30ea\u30f3\u30af\u3057\u3001\u3042\u306a\u305f\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3068\u307b\u307c\u540c\u3058\u901f\u5ea6\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 Python \u306e\u4ecb\u5165\u306a\u3057\u3067\u3053\u308c\u304c\u6a5f\u80fd\u3059\u308b\u305f\u3081\u3001GIL \u7af6\u5408\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u3053\u308c\u3089\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3068\u540c\u3058\u5229\u70b9\u3092\u4eab\u53d7\u3057\u307e\u3059\uff1a</p> <ul> <li>\u6700\u9069\u5316</li> <li>\u4e26\u5217\u51e6\u7406</li> <li>Rust \u30cd\u30a4\u30c6\u30a3\u30d6\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9</li> </ul> <p>\u30ab\u30b9\u30bf\u30e0\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3082\u306e\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"user-guide/expressions/plugins/#pig-latin","title":"\u6700\u521d\u306e\u30ab\u30b9\u30bf\u30e0\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\uff1aPig Latin","text":"<p>\u6700\u521d\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3068\u3057\u3066\u3001\u30d4\u30b0 \u30e9\u30c6\u30f3\u5909\u63db\u5668\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u30d4\u30b0 \u30e9\u30c6\u30f3\u306f\u3001\u5404\u5358\u8a9e\u306e\u6700\u521d\u306e\u6587\u5b57\u3092\u53d6\u308a\u9664\u304d\u3001\u5f8c\u308d\u306b\u8ffd\u52a0\u3057\u3001\u6700\u5f8c\u306b \"ay\" \u3092\u8ffd\u52a0\u3059\u308b\u3001\u611a\u304b\u306a\u8a00\u8a9e\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u300cpig\u300d\u306f\u300cigpay\u300d\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002</p> <p>\u3082\u3061\u308d\u3093\u3001\u65e2\u5b58\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3067\u3082\u3053\u308c\u3092\u884c\u3046\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\u3001 \u5c02\u7528\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u5411\u4e0a\u3057\u3001\u30d7\u30e9\u30b0\u30a4\u30f3\u306b\u3064\u3044\u3066\u5b66\u3076\u6a5f\u4f1a\u306b\u3082\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/plugins/#_1","title":"\u8a2d\u5b9a","text":"<p>\u6b21\u306e\u3088\u3046\u306a\u65b0\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 <code>Cargo.toml</code> \u30d5\u30a1\u30a4\u30eb\u3067\u59cb\u3081\u307e\u3059\u3002</p> <pre><code>[package]\nname = \"expression_lib\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[lib]\nname = \"expression_lib\"\ncrate-type = [\"cdylib\"]\n\n[dependencies]\npolars = { version = \"*\" }\npyo3 = { version = \"*\", features = [\"extension-module\", \"abi-py38\"] }\npyo3-polars = { version = \"*\", features = [\"derive\"] }\nserde = { version = \"*\", features = [\"derive\"] }\n</code></pre>"},{"location":"user-guide/expressions/plugins/#_2","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u4f5c\u6210","text":"<p>\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u3001<code>&amp;str</code> \u3092\u30d4\u30b0 \u30e9\u30c6\u30f3\u306b\u5909\u63db\u3059\u308b\u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3068\u3057\u3066\u516c\u958b\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u95a2\u6570\u3092\u516c\u958b\u3059\u308b\u305f\u3081\u306b\u306f\u3001<code>#[polars_expr(output_type=DataType)]</code> \u5c5e\u6027\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001 \u95a2\u6570\u306f\u5e38\u306b <code>inputs: &amp;[Series]</code> \u3092\u6700\u521d\u306e\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code>// src/expressions.rs\nuse polars::prelude::*;\nuse pyo3_polars::derive::polars_expr;\nuse std::fmt::Write;\n\nfn pig_latin_str(value: &amp;str, output: &amp;mut String) {\n    if let Some(first_char) = value.chars().next() {\n        write!(output, \"{}{}ay\", &amp;value[1..], first_char).unwrap()\n    }\n}\n\n#[polars_expr(output_type=String)]\nfn pig_latinnify(inputs: &amp;[Series]) -&gt; PolarsResult&lt;Series&gt; {\n    let ca = inputs[0].str()?;\n    let out: StringChunked = ca.apply_to_buffer(pig_latin_str);\n    Ok(out.into_series())\n}\n</code></pre> <p>Rust \u5074\u3067\u5fc5\u8981\u306a\u306e\u306f\u3053\u308c\u3060\u3051\u3067\u3059\u3002Python \u5074\u3067\u306f\u3001<code>Cargo.toml</code> \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u540d\u524d\u3068\u540c\u3058\u540d\u524d\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002 \u3053\u306e\u5834\u5408\u300cexpression_lib\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u3059\u3002Rust \u306e <code>src</code> \u30d5\u30a9\u30eb\u30c0\u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b <code>expression_lib</code> \u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3001<code>expression_lib/__init__.py</code> \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u69cb\u9020\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>\u251c\u2500\u2500 \ud83d\udcc1 expression_lib/  # name must match \"lib.name\" in Cargo.toml\n|   \u2514\u2500\u2500 __init__.py\n|\n\u251c\u2500\u2500 \ud83d\udcc1src/\n|   \u251c\u2500\u2500 lib.rs\n|   \u2514\u2500\u2500 expressions.rs\n|\n\u251c\u2500\u2500 Cargo.toml\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>\u6b21\u306b\u3001\u65b0\u3057\u3044\u30af\u30e9\u30b9 <code>Language</code> \u3092\u4f5c\u6210\u3057\u3001\u65b0\u3057\u3044 <code>expr.language</code> \u540d\u524d\u7a7a\u9593\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002 \u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u95a2\u6570\u540d\u306f\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u540d\u524d\u304c\u6b63\u78ba\u3067\u3042\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002 \u305d\u3046\u3067\u306a\u3044\u3068\u3001\u4e3b\u8981\u306a Polars \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u95a2\u6570\u540d\u3092\u89e3\u6c7a\u3067\u304d\u307e\u305b\u3093\u3002 \u3055\u3089\u306b\u3001\u3053\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u304c\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u8aac\u660e\u3059\u308b\u8ffd\u52a0\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u5834\u5408\u3001\u3053\u306e\u95a2\u6570\u306f\u8981\u7d20\u3054\u3068\u306b\u52d5\u4f5c\u3059\u308b\u305f\u3081\u3001Polars \u306f\u3053\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u30d0\u30c3\u30c1\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ed6\u306e\u64cd\u4f5c\u3067\u306f\u3053\u308c\u304c\u8a31\u3055\u308c\u306a\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30bd\u30fc\u30c8\u3084\u30b9\u30e9\u30a4\u30b9\u306e\u5834\u5408\u3067\u3059\u3002</p> <pre><code># expression_lib/__init__.py\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING\n\nimport polars as pl\nfrom polars.plugins import register_plugin_function\nfrom polars.type_aliases: IntoExpr\n\n\ndef pig_latinnify(expr: IntoExpr) -&gt; pl.Expr:\n    \"\"\"Pig-latinnify expression.\"\"\"\n    return register_plugin_function(\n        plugin_path=Path(__file__).parent,\n        function_name=\"pig_latinnify\",\n        args=expr,\n        is_elementwise=True,\n    )\n</code></pre> <p>\u74b0\u5883\u306b <code>maturin</code> \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066 <code>maturin develop --release</code> \u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u3059\u3002</p> <p>\u305d\u308c\u3060\u3051\u3067\u3059\u3002\u4f7f\u7528\u3059\u308b\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\uff01</p> <pre><code>import polars as pl\nfrom expression_lib import pig_latinnify\n\ndf = pl.DataFrame(\n    {\n        \"convert\": [\"pig\", \"latin\", \"is\", \"silly\"],\n    }\n)\nout = df.with_columns(pig_latin=pig_latinnify(\"convert\"))\n</code></pre> <p>\u307e\u305f\u3001\u30ab\u30b9\u30bf\u30e0\u540d\u524d\u7a7a\u9593\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>out = df.with_columns(\n    pig_latin=pl.col(\"convert\").language.pig_latinnify(),\n)\n</code></pre>"},{"location":"user-guide/expressions/plugins/#_3","title":"\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u306e\u53d7\u3051\u5165\u308c","text":"<p>Polars \u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3067 <code>kwargs</code>\uff08\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\uff09\u3092\u53d7\u3051\u5165\u308c\u305f\u3044\u5834\u5408\u3001 Rust \u306e <code>struct</code> \u3092\u5b9a\u7fa9\u3057\u3001\u305d\u308c\u304c <code>serde::Deserialize</code> \u3092\u5c0e\u51fa\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3060\u3051\u3067\u3059\u3002</p> <pre><code>/// Provide your own kwargs struct with the proper schema and accept that type\n/// in your plugin expression.\n#[derive(Deserialize)]\npub struct MyKwargs {\n    float_arg: f64,\n    integer_arg: i64,\n    string_arg: String,\n    boolean_arg: bool,\n}\n\n/// If you want to accept `kwargs`. You define a `kwargs` argument\n/// on the second position in you plugin. You can provide any custom struct that is deserializable\n/// with the pickle protocol (on the Rust side).\n#[polars_expr(output_type=String)]\nfn append_kwargs(input: &amp;[Series], kwargs: MyKwargs) -&gt; PolarsResult&lt;Series&gt; {\n    let input = &amp;input[0];\n    let input = input.cast(&amp;DataType::String)?;\n    let ca = input.str().unwrap();\n\n    Ok(ca\n        .apply_to_buffer(|val, buf| {\n            write!(\n                buf,\n                \"{}-{}-{}-{}-{}\",\n                val, kwargs.float_arg, kwargs.integer_arg, kwargs.string_arg, kwargs.boolean_arg\n            )\n                .unwrap()\n        })\n        .into_series())\n}\n</code></pre> <p>Python \u5074\u3067 kwargs \u3092\u767b\u9332\u3059\u308b\u3068\u304d\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <pre><code>def append_args(\n    expr: IntoExpr,\n    float_arg: float,\n    integer_arg: int,\n    string_arg: str,\n    boolean_arg: bool,\n) -&gt; pl.Expr:\n    \"\"\"\n    This example shows how arguments other than `Series` can be used.\n    \"\"\"\n    return register_plugin_function(\n        plugin_path=Path(__file__).parent,\n        function_name=\"append_kwargs\",\n        args=expr,\n        kwargs={\n            \"float_arg\": float_arg,\n            \"integer_arg\": integer_arg,\n            \"string_arg\": string_arg,\n            \"boolean_arg\": boolean_arg,\n        },\n        is_elementwise=True,\n    )\n</code></pre>"},{"location":"user-guide/expressions/plugins/#_4","title":"\u51fa\u529b\u30c7\u30fc\u30bf\u578b","text":"<p>\u3082\u3061\u308d\u3093\u3001\u51fa\u529b\u30c7\u30fc\u30bf\u578b\u306f\u56fa\u5b9a\u3055\u308c\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u305d\u308c\u3089\u306f\u901a\u5e38\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u5165\u529b\u30bf\u30a4\u30d7\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002 \u3053\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b\u3001<code>#[polars_expr()]</code> \u30de\u30af\u30ed\u306b <code>output_type_func</code> \u5f15\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3001\u305d\u306e\u95a2\u6570\u304c\u5165\u529b\u30d5\u30a3\u30fc\u30eb\u30c9 <code>&amp;[Field]</code> \u3092\u51fa\u529b <code>Field</code>\uff08\u540d\u524d\u3068\u30c7\u30fc\u30bf\u578b\uff09\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u95a2\u6570\u3092\u6307\u3057\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u306f\u3001\u3053\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u88dc\u52a9\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3 <code>FieldsMapper</code> \u3092\u4f7f\u7528\u3059\u308b\u4f8b\u3067\u3059\u3002</p> <pre><code>use polars_plan::dsl::FieldsMapper;\n\nfn haversine_output(input_fields: &amp;[Field]) -&gt; PolarsResult&lt;Field&gt; {\n    FieldsMapper::new(input_fields).map_to_float_dtype()\n}\n\n#[polars_expr(output_type_func=haversine_output)]\nfn haversine(inputs: &amp;[Series]) -&gt; PolarsResult&lt;Series&gt; {\n    let out = match inputs[0].dtype() {\n        DataType::Float32 =&gt; {\n            let start_lat = inputs[0].f32().unwrap();\n            let start_long = inputs[1].f32().unwrap();\n            let end_lat = inputs[2].f32().unwrap();\n            let end_long = inputs[3].f32().unwrap();\n            crate::distances::naive_haversine(start_lat, start_long, end_lat, end_long)?\n                .into_series()\n        }\n        DataType::Float64 =&gt; {\n            let start_lat = inputs[0].f64().unwrap();\n            let start_long = inputs[1].f64().unwrap();\n            let end_lat = inputs[2].f64().unwrap();\n            let end_long = inputs[3].f64().unwrap();\n            crate::distances::naive_haversine(start_lat, start_long, end_lat, end_long)?\n                .into_series()\n        }\n        _ =&gt; polars_bail!(InvalidOperation: \"only supported for float types\"),\n    };\n    Ok(out)\n}\n</code></pre> <p>\u59cb\u3081\u308b\u305f\u3081\u306b\u77e5\u3063\u3066\u304a\u304f\u3079\u304d\u3053\u3068\u306f\u3053\u308c\u3060\u3051\u3067\u3059\u3002\u3053\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u898b\u3066\u3001\u3069\u306e\u3088\u3046\u306b\u3059\u3079\u3066\u304c\u7d44\u307f\u5408\u308f\u3055\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3001 \u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u3088\u308a\u5fb9\u5e95\u7684\u306a\u7406\u89e3\u3092\u5f97\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/expressions/plugins/#_5","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3 \u30d7\u30e9\u30b0\u30a4\u30f3","text":"<p>\u4ee5\u4e0b\u306f\u3001\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u304c\u5b9f\u88c5\u3057\u305f\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u53b3\u9078\uff08\u7121\u5c3d\u8535\u3067\u306f\u306a\u3044\uff09\u30ea\u30b9\u30c8\u3067\u3059\u3002</p> <ul> <li>polars-xdt \u30e1\u30a4\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7bc4\u56f2\u5185\u3067\u306f\u306a\u3044\u8ffd\u52a0\u306e\u65e5\u4ed8\u95a2\u9023\u6a5f\u80fd\u3092\u5099\u3048\u305f   Polars \u30d7\u30e9\u30b0\u30a4\u30f3</li> <li>polars-distance Polars \u30d7\u30e9\u30b0\u30a4\u30f3 for pairwaise distance functions</li> <li>polars-ds \u4e00\u822c\u7684\u306a\u6570\u5024/\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u5206\u6790\u624b\u9806\u3092\u7c21\u7d20\u5316\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f Polars \u62e1\u5f35</li> <li>polars-hash Polars \u7528\u306e\u5b89\u5b9a\u3057\u305f\u975e\u6697\u53f7\u7684\u304a\u3088\u3073\u6697\u53f7\u7684\u30cf\u30c3\u30b7\u30e5\u95a2\u6570</li> <li>polars-reverse-geocode \u4e0e\u3048\u3089\u308c\u305f\uff08\u7def\u5ea6\u3001\u7d4c\u5ea6\uff09\u30da\u30a2\u306b\u6700\u3082\u8fd1\u3044\u90fd\u5e02\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306e   \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30d0\u30fc\u30b9\u30b8\u30aa\u30b3\u30fc\u30c0\u30fc</li> </ul>"},{"location":"user-guide/expressions/plugins/#_6","title":"\u305d\u306e\u4ed6\u306e\u8cc7\u6599","text":"<ul> <li>Ritchie Vink - Polars Plugins\u306b\u95a2\u3059\u308b\u57fa\u8abf\u8b1b\u6f14</li> <li>Polars plugins \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u7c21\u5358\u3067\u6700\u5c0f\u9650\u306e\u4f8b\u3092\u901a\u3057\u3066   \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u4f5c\u6210\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059</li> <li>cookiecutter-polars-plugin Polars Plugins\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8</li> </ul>"},{"location":"user-guide/expressions/strings/","title":"\u6587\u5b57\u5217\uff08Strings\uff09","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001<code>DataFrame</code> \u3092\u6271\u3046\u969b\u306b\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b <code>DataType</code> \u3067\u3042\u308b <code>String</code> \u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u308b\u64cd\u4f5c\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u6587\u5b57\u5217\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u306f\u3001\u305d\u306e\u4e88\u6e2c\u4e0d\u53ef\u80fd\u306a\u30e1\u30e2\u30ea\u30fc\u30b5\u30a4\u30ba\u306e\u305f\u3081\u306b\u3057\u3070\u3057\u3070\u975e\u52b9\u7387\u7684\u3067\u3042\u308a\u3001CPU \u304c\u591a\u304f\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u30e1\u30e2\u30ea\u30fc\u4f4d\u7f6e\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u3092\u8981\u6c42\u3057\u307e\u3059\u3002\u3053\u306e\u554f\u984c\u306b\u5bfe\u51e6\u3059\u308b\u305f\u3081\u3001Polars \u306f\u305d\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u3057\u3066 Arrow \u3092\u4f7f\u7528\u3057\u3001\u3059\u3079\u3066\u306e\u6587\u5b57\u5217\u3092\u9023\u7d9a\u3057\u305f\u30e1\u30e2\u30ea\u30fc\u30d6\u30ed\u30c3\u30af\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\u305d\u306e\u7d50\u679c\u3001\u6587\u5b57\u5217\u306e\u30c8\u30e9\u30d0\u30fc\u30b5\u30eb\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u6700\u9069\u3067\u3042\u308a\u3001CPU \u306b\u3068\u3063\u3066\u4e88\u6e2c\u53ef\u80fd\u3067\u3059\u3002</p> <p>\u6587\u5b57\u5217\u51e6\u7406\u95a2\u6570\u306f <code>str</code> \u540d\u524d\u7a7a\u9593\u3067\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002</p>"},{"location":"user-guide/expressions/strings/#_1","title":"\u6587\u5b57\u5217\u540d\u524d\u7a7a\u9593\u3078\u306e\u30a2\u30af\u30bb\u30b9","text":"<p><code>str</code> \u540d\u524d\u7a7a\u9593\u306f\u3001<code>String</code> \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306e\u30ab\u30e9\u30e0\u306e <code>.str</code> \u5c5e\u6027\u3092\u901a\u3058\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u6b21\u306e\u4f8b\u3067\u306f\u3001<code>animal</code> \u3068\u3044\u3046\u540d\u524d\u306e\u30ab\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3001\u30ab\u30e9\u30e0\u5185\u306e\u5404\u8981\u7d20\u306e\u30d0\u30a4\u30c8\u6570\u304a\u3088\u3073\u6587\u5b57\u6570\u3067\u306e\u9577\u3055\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002ASCII \u30c6\u30ad\u30b9\u30c8\u3092\u6271\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u3053\u308c\u3089\u4e8c\u3064\u306e\u8a08\u7b97\u306e\u7d50\u679c\u306f\u540c\u3058\u306b\u306a\u308a\u3001\u3088\u308a\u901f\u3044 <code>lengths</code> \u306e\u4f7f\u7528\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002</p>  Python Rust <p> <code>str.len_bytes</code> \u00b7 <code>str.len_chars</code> <pre><code>df = pl.DataFrame({\"animal\": [\"Crab\", \"cat and dog\", \"rab$bit\", None]})\n\nout = df.select(\n    pl.col(\"animal\").str.len_bytes().alias(\"byte_count\"),\n    pl.col(\"animal\").str.len_chars().alias(\"letter_count\"),\n)\nprint(out)\n</code></pre></p> <p> <code>str.len_bytes</code> \u00b7 <code>str.len_chars</code> <pre><code>let df = df! (\n        \"animal\" =&gt; &amp;[Some(\"Crab\"), Some(\"cat and dog\"), Some(\"rab$bit\"), None],\n)?;\n\nlet out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"animal\").str().len_bytes().alias(\"byte_count\"),\n        col(\"animal\").str().len_chars().alias(\"letter_count\"),\n    ])\n    .collect()?;\n\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (4, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 byte_count \u2506 letter_count \u2502\n\u2502 ---        \u2506 ---          \u2502\n\u2502 u32        \u2506 u32          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 4          \u2506 4            \u2502\n\u2502 11         \u2506 11           \u2502\n\u2502 7          \u2506 7            \u2502\n\u2502 null       \u2506 null         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/strings/#_2","title":"\u6587\u5b57\u5217\u306e\u89e3\u6790","text":"<p>Polars \u306f\u3001\u6587\u5b57\u5217\u306e\u8981\u7d20\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u89e3\u6790\u3059\u308b\u305f\u3081\u306e\u8907\u6570\u306e\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u307e\u305a\u3001<code>contains</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u90e8\u5206\u6587\u5b57\u5217\u5185\u306b\u7279\u5b9a\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u3053\u308c\u3089\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u62bd\u51fa\u3057\u3066\u4ed6\u306e\u65b9\u6cd5\u3067\u7f6e\u63db\u3059\u308b\u3053\u3068\u304c\u3001\u4eca\u5f8c\u306e\u4f8b\u3067\u793a\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/strings/#_3","title":"\u30d1\u30bf\u30fc\u30f3\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af","text":"<p>\u6587\u5b57\u5217\u5185\u306b\u30d1\u30bf\u30fc\u30f3\u304c\u5b58\u5728\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306b\u306f\u3001<code>contains</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002<code>contains</code> \u30e1\u30bd\u30c3\u30c9\u306f\u3001<code>literal</code> \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u5024\u306b\u5fdc\u3058\u3066\u3001\u901a\u5e38\u306e\u90e8\u5206\u6587\u5b57\u5217\u307e\u305f\u306f\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306e\u3044\u305a\u308c\u304b\u3092\u53d7\u3051\u5165\u308c\u307e\u3059\u3002\u79c1\u305f\u3061\u304c\u63a2\u3057\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\u304c\u6587\u5b57\u5217\u306e\u59cb\u307e\u308a\u307e\u305f\u306f\u7d42\u308f\u308a\u306b\u4f4d\u7f6e\u3059\u308b\u5358\u7d14\u306a\u90e8\u5206\u6587\u5b57\u5217\u3067\u3042\u308b\u5834\u5408\u3001\u4ee3\u308f\u308a\u306b <code>starts_with</code> \u304a\u3088\u3073 <code>ends_with</code> \u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>str.contains</code> \u00b7 <code>str.starts_with</code> \u00b7 <code>str.ends_with</code> <pre><code>out = df.select(\n    pl.col(\"animal\"),\n    pl.col(\"animal\").str.contains(\"cat|bit\").alias(\"regex\"),\n    pl.col(\"animal\").str.contains(\"rab$\", literal=True).alias(\"literal\"),\n    pl.col(\"animal\").str.starts_with(\"rab\").alias(\"starts_with\"),\n    pl.col(\"animal\").str.ends_with(\"dog\").alias(\"ends_with\"),\n)\nprint(out)\n</code></pre></p> <p> <code>str.contains</code> \u00b7 <code>str.starts_with</code> \u00b7 <code>str.ends_with</code> \u00b7  Available on feature regex <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"animal\"),\n        col(\"animal\")\n            .str()\n            .contains(lit(\"cat|bit\"), false)\n            .alias(\"regex\"),\n        col(\"animal\")\n            .str()\n            .contains_literal(lit(\"rab$\"))\n            .alias(\"literal\"),\n        col(\"animal\")\n            .str()\n            .starts_with(lit(\"rab\"))\n            .alias(\"starts_with\"),\n        col(\"animal\").str().ends_with(lit(\"dog\")).alias(\"ends_with\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (4, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 animal      \u2506 regex \u2506 literal \u2506 starts_with \u2506 ends_with \u2502\n\u2502 ---         \u2506 ---   \u2506 ---     \u2506 ---         \u2506 ---       \u2502\n\u2502 str         \u2506 bool  \u2506 bool    \u2506 bool        \u2506 bool      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Crab        \u2506 false \u2506 false   \u2506 false       \u2506 false     \u2502\n\u2502 cat and dog \u2506 true  \u2506 false   \u2506 false       \u2506 true      \u2502\n\u2502 rab$bit     \u2506 true  \u2506 true    \u2506 true        \u2506 false     \u2502\n\u2502 null        \u2506 null  \u2506 null    \u2506 null        \u2506 null      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/strings/#_4","title":"\u30d1\u30bf\u30fc\u30f3\u306e\u62bd\u51fa","text":"<p><code>extract</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u6307\u5b9a\u3055\u308c\u305f\u6587\u5b57\u5217\u304b\u3089\u30d1\u30bf\u30fc\u30f3\u3092\u62bd\u51fa\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u65b9\u6cd5\u3067\u306f\u3001\u30d1\u30bf\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u4e00\u3064\u4ee5\u4e0a\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u30b0\u30eb\u30fc\u30d7\uff08\u30d1\u30bf\u30fc\u30f3\u5185\u306e\u62ec\u5f27 <code>()</code> \u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\uff09\u3092\u542b\u3080\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u3092\u53d6\u308a\u307e\u3059\u3002\u30b0\u30eb\u30fc\u30d7\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u3001\u3069\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u30b0\u30eb\u30fc\u30d7\u3092\u51fa\u529b\u3059\u308b\u304b\u3092\u793a\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>str.extract</code> <pre><code>df = pl.DataFrame(\n    {\n        \"a\": [\n            \"http://vote.com/ballon_dor?candidate=messi&amp;ref=polars\",\n            \"http://vote.com/ballon_dor?candidat=jorginho&amp;ref=polars\",\n            \"http://vote.com/ballon_dor?candidate=ronaldo&amp;ref=polars\",\n        ]\n    }\n)\nout = df.select(\n    pl.col(\"a\").str.extract(r\"candidate=(\\w+)\", group_index=1),\n)\nprint(out)\n</code></pre></p> <p> <code>str.extract</code> <pre><code>let df = df!(\n        \"a\" =&gt;  &amp;[\n            \"http://vote.com/ballon_dor?candidate=messi&amp;ref=polars\",\n            \"http://vote.com/ballon_dor?candidat=jorginho&amp;ref=polars\",\n            \"http://vote.com/ballon_dor?candidate=ronaldo&amp;ref=polars\",\n        ]\n)?;\nlet out = df\n    .clone()\n    .lazy()\n    .select([col(\"a\").str().extract(lit(r\"candidate=(\\w+)\"), 1)])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a       \u2502\n\u2502 ---     \u2502\n\u2502 str     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 messi   \u2502\n\u2502 null    \u2502\n\u2502 ronaldo \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u6587\u5b57\u5217\u5185\u306e\u30d1\u30bf\u30fc\u30f3\u306e\u3059\u3079\u3066\u306e\u51fa\u73fe\u3092\u62bd\u51fa\u3059\u308b\u306b\u306f\u3001<code>extract_all</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3 <code>(\\d+)</code> \u3092\u4f7f\u7528\u3057\u3066\u6587\u5b57\u5217\u304b\u3089\u3059\u3079\u3066\u306e\u6570\u5b57\u3092\u62bd\u51fa\u3057\u3001\u4e00\u3064\u4ee5\u4e0a\u306e\u6570\u5b57\u306b\u4e00\u81f4\u3057\u307e\u3059\u3002<code>extract_all</code> \u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3068\u3057\u3066\u51fa\u529b\u3055\u308c\u308b\u306e\u306f\u3001\u6587\u5b57\u5217\u5185\u306e\u4e00\u81f4\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u306e\u3059\u3079\u3066\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u542b\u3080\u30ea\u30b9\u30c8\u3067\u3059\u3002</p>  Python Rust <p> <code>str.extract_all</code> <pre><code>df = pl.DataFrame({\"foo\": [\"123 bla 45 asd\", \"xyz 678 910t\"]})\nout = df.select(\n    pl.col(\"foo\").str.extract_all(r\"(\\d+)\").alias(\"extracted_nrs\"),\n)\nprint(out)\n</code></pre></p> <p> <code>str.extract_all</code> <pre><code>let df = df!(\"foo\"=&gt; &amp;[\"123 bla 45 asd\", \"xyz 678 910t\"])?;\nlet out = df\n    .clone()\n    .lazy()\n    .select([col(\"foo\")\n        .str()\n        .extract_all(lit(r\"(\\d+)\"))\n        .alias(\"extracted_nrs\")])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 extracted_nrs  \u2502\n\u2502 ---            \u2502\n\u2502 list[str]      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 [\"123\", \"45\"]  \u2502\n\u2502 [\"678\", \"910\"] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/strings/#_5","title":"\u30d1\u30bf\u30fc\u30f3\u306e\u7f6e\u63db","text":"<p>\u3053\u308c\u307e\u3067\u306b\u30d1\u30bf\u30fc\u30f3\u306e\u4e00\u81f4\u3068\u62bd\u51fa\u306e\u4e8c\u3064\u306e\u65b9\u6cd5\u3092\u8b70\u8ad6\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u5ea6\u306f\u6587\u5b57\u5217\u5185\u3067\u30d1\u30bf\u30fc\u30f3\u3092\u7f6e\u63db\u3059\u308b\u65b9\u6cd5\u3092\u63a2\u308a\u307e\u3059\u3002<code>extract</code> \u3068 <code>extract_all</code> \u3068\u540c\u69d8\u306b\u3001Polars \u306f\u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u306b <code>replace</code> \u3068 <code>replace_all</code> \u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u5358\u8a9e\u306e\u7d42\u308f\u308a\uff08<code>\\b</code>\uff09\u306b\u3042\u308b <code>abc</code> \u306e\u4e00\u3064\u306e\u4e00\u81f4\u3092 <code>ABC</code> \u306b\u7f6e\u304d\u63db\u3048\u3001<code>a</code> \u306e\u3059\u3079\u3066\u306e\u51fa\u73fe\u3092 <code>-</code> \u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002</p>  Python Rust <p> <code>str.replace</code> \u00b7 <code>str.replace_all</code> <pre><code>df = pl.DataFrame({\"id\": [1, 2], \"text\": [\"123abc\", \"abc456\"]})\nout = df.with_columns(\n    pl.col(\"text\").str.replace(r\"abc\\b\", \"ABC\"),\n    pl.col(\"text\").str.replace_all(\"a\", \"-\", literal=True).alias(\"text_replace_all\"),\n)\nprint(out)\n</code></pre></p> <p> <code>str.replace</code> \u00b7 <code>str.replace_all</code> \u00b7  Available on feature regex <pre><code>let df = df!(\"id\"=&gt; &amp;[1, 2], \"text\"=&gt; &amp;[\"123abc\", \"abc456\"])?;\nlet out = df\n    .clone()\n    .lazy()\n    .with_columns([\n        col(\"text\").str().replace(lit(r\"abc\\b\"), lit(\"ABC\"), false),\n        col(\"text\")\n            .str()\n            .replace_all(lit(\"a\"), lit(\"-\"), false)\n            .alias(\"text_replace_all\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 text   \u2506 text_replace_all \u2502\n\u2502 --- \u2506 ---    \u2506 ---              \u2502\n\u2502 i64 \u2506 str    \u2506 str              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 123ABC \u2506 123-bc           \u2502\n\u2502 2   \u2506 abc456 \u2506 -bc456           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/strings/#api","title":"API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<p>\u4e0a\u8a18\u3067\u30ab\u30d0\u30fc\u3055\u308c\u305f\u4f8b\u306b\u52a0\u3048\u3066\u3001Polars \u306f\u66f8\u5f0f\u8a2d\u5b9a\u3001\u30b9\u30c8\u30ea\u30c3\u30d4\u30f3\u30b0\u3001\u5206\u5272\u306a\u3069\u306e\u30bf\u30b9\u30af\u306e\u305f\u3081\u306e\u3055\u307e\u3056\u307e\u306a\u4ed6\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u8ffd\u52a0\u7684\u306a\u65b9\u6cd5\u3092\u63a2\u308b\u305f\u3081\u306b\u306f\u3001\u3042\u306a\u305f\u304c\u9078\u3093\u3060\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e Polars \u306e API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/structs/","title":"<code>Struct</code> \u30c7\u30fc\u30bf\u578b\uff08The Struct datatype\uff09","text":"<p>Polars \u306e <code>Struct</code> \u306f\u3001\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u6271\u3046\u969b\u306e\u6163\u7528\u7684\u306a\u65b9\u6cd5\u3067\u3059\u3002\u307e\u305f\u3001\"\u7121\u6599\"\u306e\u64cd\u4f5c\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u30ab\u30e9\u30e0\u3092 <code>Struct</code> \u306b\u79fb\u52d5\u3057\u3066\u3082\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\u306f\u884c\u308f\u308c\u307e\u305b\u3093\uff01</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u7c73\u56fd\u306e\u3044\u304f\u3064\u304b\u306e\u5dde\u3067\u306e\u6620\u753b\u306e\u5e73\u5747\u8a55\u4fa1\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b <code>DataFrame</code> \u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>ratings = pl.DataFrame(\n    {\n        \"Movie\": [\"Cars\", \"IT\", \"ET\", \"Cars\", \"Up\", \"IT\", \"Cars\", \"ET\", \"Up\", \"ET\"],\n        \"Theatre\": [\"NE\", \"ME\", \"IL\", \"ND\", \"NE\", \"SD\", \"NE\", \"IL\", \"IL\", \"SD\"],\n        \"Avg_Rating\": [4.5, 4.4, 4.6, 4.3, 4.8, 4.7, 4.7, 4.9, 4.7, 4.6],\n        \"Count\": [30, 27, 26, 29, 31, 28, 28, 26, 33, 26],\n    }\n)\nprint(ratings)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let ratings = df!(\n        \"Movie\"=&gt; &amp;[\"Cars\", \"IT\", \"ET\", \"Cars\", \"Up\", \"IT\", \"Cars\", \"ET\", \"Up\", \"ET\"],\n        \"Theatre\"=&gt; &amp;[\"NE\", \"ME\", \"IL\", \"ND\", \"NE\", \"SD\", \"NE\", \"IL\", \"IL\", \"SD\"],\n        \"Avg_Rating\"=&gt; &amp;[4.5, 4.4, 4.6, 4.3, 4.8, 4.7, 4.7, 4.9, 4.7, 4.6],\n        \"Count\"=&gt; &amp;[30, 27, 26, 29, 31, 28, 28, 26, 33, 26],\n\n)?;\nprintln!(\"{}\", &amp;ratings);\n</code></pre></p> <pre><code>shape: (10, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Movie \u2506 Theatre \u2506 Avg_Rating \u2506 Count \u2502\n\u2502 ---   \u2506 ---     \u2506 ---        \u2506 ---   \u2502\n\u2502 str   \u2506 str     \u2506 f64        \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Cars  \u2506 NE      \u2506 4.5        \u2506 30    \u2502\n\u2502 IT    \u2506 ME      \u2506 4.4        \u2506 27    \u2502\n\u2502 ET    \u2506 IL      \u2506 4.6        \u2506 26    \u2502\n\u2502 Cars  \u2506 ND      \u2506 4.3        \u2506 29    \u2502\n\u2502 Up    \u2506 NE      \u2506 4.8        \u2506 31    \u2502\n\u2502 IT    \u2506 SD      \u2506 4.7        \u2506 28    \u2502\n\u2502 Cars  \u2506 NE      \u2506 4.7        \u2506 28    \u2502\n\u2502 ET    \u2506 IL      \u2506 4.9        \u2506 26    \u2502\n\u2502 Up    \u2506 IL      \u2506 4.7        \u2506 33    \u2502\n\u2502 ET    \u2506 SD      \u2506 4.6        \u2506 26    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/structs/#struct","title":"<code>Struct</code> \u578b\u3068\u306e\u906d\u9047","text":"<p><code>Struct</code> \u30ab\u30e9\u30e0\u306b\u306a\u308b\u4e00\u822c\u7684\u306a\u64cd\u4f5c\u306f\u3001\u63a2\u7d22\u7684\u30c7\u30fc\u30bf\u5206\u6790\u3067\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b <code>value_counts</code> \u95a2\u6570\u3067\u3059\u3002\u5dde\u304c\u30c7\u30fc\u30bf\u306b\u3069\u308c\u3060\u3051\u767b\u5834\u3059\u308b\u304b\u3092\u8abf\u3079\u308b\u65b9\u6cd5\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002</p>  Python Rust <p> <code>value_counts</code> <pre><code>out = ratings.select(pl.col(\"Theatre\").value_counts(sort=True))\nprint(out)\n</code></pre></p> <p> <code>value_counts</code> \u00b7  Available on feature dtype-struct <pre><code>let out = ratings\n    .clone()\n    .lazy()\n    .select([col(\"Theatre\").value_counts(true, true)])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Theatre   \u2502\n\u2502 ---       \u2502\n\u2502 struct[2] \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 {\"NE\",3}  \u2502\n\u2502 {\"IL\",3}  \u2502\n\u2502 {\"SD\",2}  \u2502\n\u2502 {\"ME\",1}  \u2502\n\u2502 {\"ND\",1}  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u7279\u306b\u3053\u308c\u307e\u3067\u306e\u30c4\u30fc\u30eb\u3067\u306f\u898b\u3089\u308c\u306a\u304b\u3063\u305f\u30c7\u30fc\u30bf\u578b\u304b\u3089\u6765\u308b\u4e88\u671f\u305b\u306c\u51fa\u529b\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u56f0\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u3088\u308a\u99b4\u67d3\u307f\u306e\u3042\u308b\u51fa\u529b\u306b\u623b\u308b\u305f\u3081\u306b\u306f\u3001<code>Struct</code> \u30ab\u30e9\u30e0\u3092\u69cb\u6210\u3059\u308b\u30ab\u30e9\u30e0\u306b <code>unnest</code> \u3059\u308b\u3060\u3051\u3067\u3059\u3002</p>  Python Rust <p> <code>unnest</code> <pre><code>out = ratings.select(pl.col(\"Theatre\").value_counts(sort=True)).unnest(\"Theatre\")\nprint(out)\n</code></pre></p> <p> <code>unnest</code> <pre><code>let out = ratings\n    .clone()\n    .lazy()\n    .select([col(\"Theatre\").value_counts(true, true)])\n    .unnest([\"Theatre\"])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Theatre \u2506 count \u2502\n\u2502 ---     \u2506 ---   \u2502\n\u2502 str     \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 NE      \u2506 3     \u2502\n\u2502 IL      \u2506 3     \u2502\n\u2502 SD      \u2506 2     \u2502\n\u2502 ME      \u2506 1     \u2502\n\u2502 ND      \u2506 1     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>value_counts</code> \u304c <code>Struct</code> \u3092\u8fd4\u3059\u7406\u7531</p> <p>Polars \u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u5e38\u306b <code>Fn(Series) -&gt; Series</code> \u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u6301\u3061\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u5165\u51fa\u529b\u3068\u3057\u3066\u8907\u6570\u306e\u30ab\u30e9\u30e0\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306b <code>Struct</code> \u304c\u30c7\u30fc\u30bf\u578b\u3068\u3057\u3066\u4f7f\u308f\u308c\u307e\u3059\u3002\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\u3059\u3079\u3066\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f <code>Series</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001<code>Struct</code> \u306f\u305d\u306e\u8981\u6c42\u3092\u6e80\u305f\u3059\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/structs/#dict-structs","title":"<code>dict</code> \u3068\u3057\u3066\u306e <code>Structs</code>","text":"<p>Polars \u306f <code>Series</code> \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u9001\u3089\u308c\u305f <code>dict</code> \u3092 <code>Struct</code> \u3068\u3057\u3066\u89e3\u91c8\u3057\u307e\u3059\uff1a</p>  Python Rust <p> <code>Series</code> <pre><code>rating_series = pl.Series(\n    \"ratings\",\n    [\n        {\"Movie\": \"Cars\", \"Theatre\": \"NE\", \"Avg_Rating\": 4.5},\n        {\"Movie\": \"Toy Story\", \"Theatre\": \"ME\", \"Avg_Rating\": 4.9},\n    ],\n)\nprint(rating_series)\n</code></pre></p> <p> <code>Series</code> <pre><code>// Don't think we can make it the same way in rust, but this works\nlet rating_series = df!(\n    \"Movie\" =&gt; &amp;[\"Cars\", \"Toy Story\"],\n    \"Theatre\" =&gt; &amp;[\"NE\", \"ME\"],\n    \"Avg_Rating\" =&gt; &amp;[4.5, 4.9],\n)?\n.into_struct(\"ratings\")\n.into_series();\nprintln!(\"{}\", &amp;rating_series);\n</code></pre></p> <pre><code>shape: (2,)\nSeries: 'ratings' [struct[3]]\n[\n    {\"Cars\",\"NE\",4.5}\n    {\"Toy Story\",\"ME\",4.9}\n]\n</code></pre> <p><code>Series</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u69cb\u7bc9</p> <p>\u3053\u3053\u3067\u306f <code>Series</code> \u304c\u6700\u521d\u306b <code>name</code>\u3001\u305d\u306e\u5f8c\u306b <code>values</code> \u3067\u69cb\u7bc9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5f8c\u8005\u3092\u6700\u521d\u306b\u63d0\u4f9b\u3059\u308b\u3053\u3068\u306f Polars \u3067\u306f\u30a2\u30f3\u30c1\u30d1\u30bf\u30fc\u30f3\u3068\u3055\u308c\u3001\u907f\u3051\u308b\u3079\u304d\u3067\u3059\u3002</p>"},{"location":"user-guide/expressions/structs/#struct_1","title":"<code>Struct</code> \u306e\u500b\u3005\u306e\u5024\u3092\u62bd\u51fa\u3059\u308b","text":"<p>\u4e0a\u8a18\u3067\u4f5c\u6210\u3057\u305f <code>Series</code> \u306e <code>movie</code> \u5024\u3060\u3051\u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u3001<code>field</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a</p>  Python Rust <p> <code>struct.field</code> <pre><code>out = rating_series.struct.field(\"Movie\")\nprint(out)\n</code></pre></p> <p> <code>struct.field_by_name</code> <pre><code>let out = rating_series.struct_()?.field_by_name(\"Movie\")?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (2,)\nSeries: 'Movie' [str]\n[\n    \"Cars\"\n    \"Toy Story\"\n]\n</code></pre>"},{"location":"user-guide/expressions/structs/#struct_2","title":"<code>Struct</code> \u306e\u500b\u3005\u306e\u30ad\u30fc\u3092\u30ea\u30cd\u30fc\u30e0\u3059\u308b","text":"<p><code>Struct</code> \u30ab\u30e9\u30e0\u306e\u500b\u3005\u306e <code>field</code> \u3092\u30ea\u30cd\u30fc\u30e0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001\u307e\u305a <code>rating_series</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 <code>DataFrame</code> \u306b\u5909\u63db\u3057\u3066\u5909\u66f4\u3092\u7c21\u5358\u306b\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3001\u305d\u306e\u5f8c <code>rename_fields</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p>  Python Rust <p> <code>struct.rename_fields</code> <pre><code>out = (\n    rating_series.to_frame()\n    .select(pl.col(\"ratings\").struct.rename_fields([\"Film\", \"State\", \"Value\"]))\n    .unnest(\"ratings\")\n)\nprint(out)\n</code></pre></p> <p> <code>struct.rename_fields</code> <pre><code>let out = DataFrame::new([rating_series].into())?\n    .lazy()\n    .select([col(\"ratings\")\n        .struct_()\n        .rename_fields([\"Film\".into(), \"State\".into(), \"Value\".into()].to_vec())])\n    .unnest([\"ratings\"])\n    .collect()?;\n\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Film      \u2506 State \u2506 Value \u2502\n\u2502 ---       \u2506 ---   \u2506 ---   \u2502\n\u2502 str       \u2506 str   \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Cars      \u2506 NE    \u2506 4.5   \u2502\n\u2502 Toy Story \u2506 ME    \u2506 4.9   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/structs/#struct_3","title":"<code>Struct</code> \u30ab\u30e9\u30e0\u306e\u5b9f\u7528\u7684\u306a\u4f7f\u7528\u4f8b","text":""},{"location":"user-guide/expressions/structs/#_1","title":"\u91cd\u8907\u884c\u306e\u7279\u5b9a","text":"<p><code>ratings</code> \u30c7\u30fc\u30bf\u306b\u623b\u308a\u307e\u3059\u3002<code>Movie</code> \u3068 <code>Theatre</code> \u30ec\u30d9\u30eb\u3067\u91cd\u8907\u304c\u3042\u308b\u5834\u5408\u3092\u7279\u5b9a\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u3053\u3053\u3067 <code>Struct</code> \u30c7\u30fc\u30bf\u578b\u304c\u5149\u308a\u307e\u3059\uff1a</p>  Python Rust <p> <code>is_duplicated</code> \u00b7 <code>struct</code> <pre><code>out = ratings.filter(pl.struct(\"Movie\", \"Theatre\").is_duplicated())\nprint(out)\n</code></pre></p> <p> <code>is_duplicated</code> \u00b7 <code>Struct</code> \u00b7  Available on feature dtype-struct <pre><code>let out = ratings\n    .clone()\n    .lazy()\n    // .filter(as_struct(&amp;[col(\"Movie\"), col(\"Theatre\")]).is_duplicated())\n    // Error: .is_duplicated() not available if you try that\n    // https://github.com/pola-rs/polars/issues/3803\n    .filter(len().over([col(\"Movie\"), col(\"Theatre\")]).gt(lit(1)))\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Movie \u2506 Theatre \u2506 Avg_Rating \u2506 Count \u2502\n\u2502 ---   \u2506 ---     \u2506 ---        \u2506 ---   \u2502\n\u2502 str   \u2506 str     \u2506 f64        \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Cars  \u2506 NE      \u2506 4.5        \u2506 30    \u2502\n\u2502 ET    \u2506 IL      \u2506 4.6        \u2506 26    \u2502\n\u2502 Cars  \u2506 NE      \u2506 4.7        \u2506 28    \u2502\n\u2502 ET    \u2506 IL      \u2506 4.9        \u2506 26    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u30ec\u30d9\u30eb\u3067\u3082 <code>is_unique</code> \u3092\u4f7f\u7528\u3057\u3066\u30e6\u30cb\u30fc\u30af\u306a\u30b1\u30fc\u30b9\u3092\u7279\u5b9a\u3067\u304d\u307e\u3059\uff01</p>"},{"location":"user-guide/expressions/structs/#_2","title":"\u8907\u6570\u30ab\u30e9\u30e0\u306e\u30e9\u30f3\u30ad\u30f3\u30b0","text":"<p>\u91cd\u8907\u304c\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u3069\u306e\u30e9\u30f3\u30af\u3092\u512a\u5148\u3055\u305b\u308b\u304b\u3092\u6c7a\u3081\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u8a55\u4fa1\u306e <code>Count</code> \u3092 <code>Avg_Rating</code> \u81ea\u4f53\u3088\u308a\u3082\u91cd\u8981\u3068\u3057\u3001\u30bf\u30a4\u30d6\u30ec\u30fc\u30af\u306b\u306e\u307f\u4f7f\u7528\u3057\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306b\u884c\u3048\u307e\u3059\uff1a</p>  Python Rust <p> <code>is_duplicated</code> \u00b7 <code>struct</code> <pre><code>out = ratings.with_columns(\n    pl.struct(\"Count\", \"Avg_Rating\")\n    .rank(\"dense\", descending=True)\n    .over(\"Movie\", \"Theatre\")\n    .alias(\"Rank\")\n).filter(pl.struct(\"Movie\", \"Theatre\").is_duplicated())\nprint(out)\n</code></pre></p> <p> <code>is_duplicated</code> \u00b7 <code>Struct</code> \u00b7  Available on feature dtype-struct <pre><code>let out = ratings\n    .clone()\n    .lazy()\n    .with_columns([as_struct(vec![col(\"Count\"), col(\"Avg_Rating\")])\n        .rank(\n            RankOptions {\n                method: RankMethod::Dense,\n                descending: false,\n            },\n            None,\n        )\n        .over([col(\"Movie\"), col(\"Theatre\")])\n        .alias(\"Rank\")])\n    // .filter(as_struct(&amp;[col(\"Movie\"), col(\"Theatre\")]).is_duplicated())\n    // Error: .is_duplicated() not available if you try that\n    // https://github.com/pola-rs/polars/issues/3803\n    .filter(len().over([col(\"Movie\"), col(\"Theatre\")]).gt(lit(1)))\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (4, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Movie \u2506 Theatre \u2506 Avg_Rating \u2506 Count \u2506 Rank \u2502\n\u2502 ---   \u2506 ---     \u2506 ---        \u2506 ---   \u2506 ---  \u2502\n\u2502 str   \u2506 str     \u2506 f64        \u2506 i64   \u2506 u32  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Cars  \u2506 NE      \u2506 4.5        \u2506 30    \u2506 1    \u2502\n\u2502 ET    \u2506 IL      \u2506 4.6        \u2506 26    \u2506 2    \u2502\n\u2502 Cars  \u2506 NE      \u2506 4.7        \u2506 28    \u2506 2    \u2502\n\u2502 ET    \u2506 IL      \u2506 4.9        \u2506 26    \u2506 1    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Polars \u3067\u3068\u3066\u3082\u30a8\u30ec\u30ac\u30f3\u30c8\u306b\u5b9f\u73fe\u3067\u304d\u308b\u304b\u306a\u308a\u8907\u96d1\u306a\u8981\u6c42\u306e\u30bb\u30c3\u30c8\u3067\u3059\uff01</p>"},{"location":"user-guide/expressions/structs/#_3","title":"\u8907\u6570\u30ab\u30e9\u30e0\u9069\u7528\u306e\u4f7f\u7528","text":"<p>\u3053\u308c\u306f\u524d\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570 \u3067\u8b70\u8ad6\u3055\u308c\u307e\u3057\u305f\u3002</p>"},{"location":"user-guide/expressions/user-defined-functions/","title":"\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u95a2\u6570\uff08User-defined functions\uff09","text":"<p>Polars \u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u975e\u5e38\u306b\u5f37\u529b\u3067\u67d4\u8edf\u3067\u3042\u308b\u305f\u3081\u3001 \u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3088\u308a\u3082\u30ab\u30b9\u30bf\u30e0 Python \u95a2\u6570\u306e\u5fc5\u8981\u6027\u306f\u306f\u308b\u304b\u306b\u5c11\u306a\u3044\u3068\u3053\u3053\u307e\u3067\u3067\u7d0d\u5f97\u3057\u3066\u3044\u305f\u3060\u3051\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002</p> <p>\u305d\u308c\u3067\u3082\u306a\u304a\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u72b6\u614b\u3092\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u6e21\u3059\u3001 \u307e\u305f\u306f Polars \u3067\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u6a5f\u80fd\u304c\u5fc5\u8981\u3067\u3059\u3002</p> <p>\u3053\u306e\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059:</p> <ul> <li><code>map_batches</code></li> <li><code>map_elements</code></li> </ul>"},{"location":"user-guide/expressions/user-defined-functions/#map_batches-map_elements","title":"<code>map_batches</code> \u304b\u3001\u305d\u308c\u3068\u3082 <code>map_elements</code> \u304b\u3002","text":"<p>\u3053\u308c\u3089\u306e\u95a2\u6570\u306b\u306f\u3001\u3069\u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3001\u305d\u3057\u3066\u305d\u306e\u7d50\u679c\u3068\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u306b\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u304b\u3068\u3044\u3046\u91cd\u8981\u306a\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002</p> <p><code>map_batches</code> \u306f\u3001\u305d\u306e\u307e\u307e\u306e <code>Series</code> \u3092 <code>expression</code> \u306b\u6e21\u3057\u307e\u3059\u3002</p> <p><code>map_batches</code> \u306f\u3001<code>select</code> \u3068 <code>group_by</code> \u306e\u4e21\u5f0f\u3067\u540c\u3058\u30eb\u30fc\u30eb\u306b\u5f93\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u3001<code>Series</code> \u304c <code>DataFrame</code> \u306e\u30ab\u30e9\u30e0\u3092\u8868\u3059\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002 <code>group_by</code> \u5f0f\u3067\u306f\u3001 \u305d\u306e\u30ab\u30e9\u30e0\u306f\u307e\u3060\u96c6\u7d04\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff01</p> <p><code>map_batches</code> \u306e\u4f7f\u7528\u4f8b\u3068\u3057\u3066\u306f\u3001\u4f8b\u3048\u3070\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u30ab\u30e9\u30e0\u3092\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u6e21\u3059\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002 \u4ee5\u4e0b\u306b\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30e2\u30c7\u30eb\u306b\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u30ab\u30e9\u30e0\u3092\u6e21\u3059\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\u3002</p>  Python <p> <code>map_batches</code></p> <pre><code>df.with_columns([\n    pl.col(\"features\").map_batches(lambda s: MyNeuralNetwork.forward(s.to_numpy())).alias(\"activations\")\n])\n</code></pre>  Rust <pre><code>df.with_columns([\n    col(\"features\").map(|s| Ok(my_nn.forward(s))).alias(\"activations\")\n])\n</code></pre> <p><code>group_by</code> \u5f0f\u3067 <code>map_batches</code> \u3092\u4f7f\u7528\u3059\u308b\u30b1\u30fc\u30b9\u306f\u9650\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u4e0a\u306e\u7406\u7531\u304b\u3089\u306e\u307f\u4f7f\u7528\u3055\u308c\u3001\u7c21\u5358\u306b\u8aa4\u3063\u305f\u7d50\u679c\u3092\u3082\u305f\u3089\u3059\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u7406\u7531\u3092\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\u3002</p>  Python Rust <pre><code>df = pl.DataFrame(\n    {\n        \"keys\": [\"a\", \"a\", \"b\"],\n        \"values\": [10, 7, 1],\n    }\n)\nprint(df)\n</code></pre> <pre><code>let df = df!(\n    \"keys\" =&gt; &amp;[\"a\", \"a\", \"b\"],\n    \"values\" =&gt; &amp;[10, 7, 1],\n)?;\nprintln!(\"{}\", df);\n</code></pre> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 keys \u2506 values \u2502\n\u2502 ---  \u2506 ---    \u2502\n\u2502 str  \u2506 i64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a    \u2506 10     \u2502\n\u2502 a    \u2506 7      \u2502\n\u2502 b    \u2506 1      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u4e0a\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f\u3001<code>\"keys\"</code> \u30ab\u30e9\u30e0\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u6b21\u306e\u3088\u3046\u306a\u30b0\u30eb\u30fc\u30d7\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>\"a\" -&gt; [10, 7]\n\"b\" -&gt; [1]\n</code></pre> <p>\u305d\u306e\u5f8c\u3001\u53f3\u3078\u306e <code>shift</code> \u64cd\u4f5c\u3092\u9069\u7528\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\uff1a</p> <pre><code>\"a\" -&gt; [null, 10]\n\"b\" -&gt; [null]\n</code></pre> <p>\u305d\u308c\u3092\u8a66\u3057\u3066\u307f\u3066\u3001\u4f55\u304c\u5f97\u3089\u308c\u308b\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p>  Python Rust <pre><code>out = df.group_by(\"keys\", maintain_order=True).agg(\n    pl.col(\"values\")\n    .map_batches(lambda s: s.shift(), is_elementwise=True)\n    .alias(\"shift_map_batches\"),\n    pl.col(\"values\").shift().alias(\"shift_expression\"),\n)\nprint(out)\n</code></pre> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .group_by([\"keys\"])\n    .agg([\n        col(\"values\")\n            .map(|s| Ok(Some(s.shift(1))), GetOutput::default())\n            // note: the `'shift_map_batches'` alias is just there to show how you\n            // get the same output as in the Python API example.\n            .alias(\"shift_map_batches\"),\n        col(\"values\").shift(lit(1)).alias(\"shift_expression\"),\n    ])\n    .collect()?;\n\nprintln!(\"{}\", out);\n</code></pre> <pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 keys \u2506 shift_map_batches \u2506 shift_expression \u2502\n\u2502 ---  \u2506 ---               \u2506 ---              \u2502\n\u2502 str  \u2506 list[i64]         \u2506 list[i64]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a    \u2506 [null, 10]        \u2506 [null, 10]       \u2502\n\u2502 b    \u2506 [7]               \u2506 [null]           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3042\u3061\u3083\u30fc\u3001\u660e\u3089\u304b\u306b\u9593\u9055\u3063\u305f\u7d50\u679c\u304c\u51fa\u307e\u3057\u305f\u306d\u3002\u30b0\u30eb\u30fc\u30d7 <code>\"b\"</code> \u306f\u30b0\u30eb\u30fc\u30d7 <code>\"a\"</code> \u304b\u3089\u5024\u3092\u5f97\u3066\u3057\u307e\u3044\u307e\u3057\u305f \ud83d\ude35\u3002</p> <p>\u3053\u308c\u306f\u3001\u96c6\u7d04\u3059\u308b\u524d\u306b <code>map_batches</code> \u304c\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u3001\u3072\u3069\u304f\u9593\u9055\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3059\u3002\u305d\u308c\u306f\u3064\u307e\u308a\u3001\u5168\u30ab\u30e9\u30e0 <code>[10, 7, 1]</code> \u304c\u30b7\u30d5\u30c8\u3055\u308c\u3066 <code>[null, 10, 7]</code> \u306b\u306a\u308a\u3001\u305d\u306e\u5f8c\u3067\u96c6\u7d04\u3055\u308c\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002</p> <p>\u3060\u304b\u3089\u79c1\u306e\u30a2\u30c9\u30d0\u30a4\u30b9\u306f\u3001<code>map_batches</code> \u3092 <code>group_by</code> \u5f0f\u3067\u4f7f\u7528\u3057\u306a\u3044\u3053\u3068\u3067\u3059\u3002\u305d\u308c\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u3092\u77e5\u3063\u3066\u3044\u308b\u5834\u5408\u3092\u9664\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/user-defined-functions/#map_elements","title":"<code>map_elements</code> \u3092\u4f7f\u3046","text":"<p>\u5e78\u3044\u3001\u524d\u306e\u4f8b\u306f <code>map_elements</code> \u3067\u4fee\u6b63\u3067\u304d\u307e\u3059\u3002 <code>map_elements</code> \u306f\u3001\u305d\u306e\u64cd\u4f5c\u306e\u305f\u3081\u306e\u6700\u5c0f\u8ad6\u7406\u8981\u7d20\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <p>\u3064\u307e\u308a\uff1a</p> <ul> <li><code>select context</code> -&gt; \u5358\u4e00\u8981\u7d20</li> <li><code>group by context</code> -&gt; \u5358\u4e00\u30b0\u30eb\u30fc\u30d7</li> </ul> <p>\u3057\u305f\u304c\u3063\u3066\u3001<code>map_elements</code> \u3092\u4f7f\u3048\u3070\u3001\u79c1\u305f\u3061\u306e\u4f8b\u3092\u4fee\u6b63\u3067\u304d\u308b\u306f\u305a\u3067\u3059\uff1a</p>  Python <p> <code>map_elements</code></p>  Python Rust <pre><code>out = df.group_by(\"keys\", maintain_order=True).agg(\n    pl.col(\"values\")\n    .map_elements(lambda s: s.shift(), return_dtype=pl.List(int))\n    .alias(\"shift_map_elements\"),\n    pl.col(\"values\").shift().alias(\"shift_expression\"),\n)\nprint(out)\n</code></pre> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .group_by([col(\"keys\")])\n    .agg([\n        col(\"values\")\n            .apply(|s| Ok(Some(s.shift(1))), GetOutput::default())\n            // note: the `'shift_map_elements'` alias is just there to show how you\n            // get the same output as in the Python API example.\n            .alias(\"shift_map_elements\"),\n        col(\"values\").shift(lit(1)).alias(\"shift_expression\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre> <pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 keys \u2506 shift_map_elements \u2506 shift_expression \u2502\n\u2502 ---  \u2506 ---                \u2506 ---              \u2502\n\u2502 str  \u2506 list[i64]          \u2506 list[i64]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a    \u2506 [null, 10]         \u2506 [null, 10]       \u2502\n\u2502 b    \u2506 [null]             \u2506 [null]           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u305d\u3057\u3066\u89b3\u5bdf\u3059\u308b\u3068\u3001\u6709\u52b9\u306a\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\uff01 \ud83c\udf89</p>"},{"location":"user-guide/expressions/user-defined-functions/#map_elements-select","title":"<code>map_elements</code> \u306e <code>select</code> \u5f0f\u3067\u306e\u4f7f\u7528","text":"<p><code>select</code> \u5f0f\u3067\u306f\u3001<code>map_elements</code> \u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f\u30ab\u30e9\u30e0\u306e\u8981\u7d20\u3092 Python \u95a2\u6570\u306b\u6e21\u3057\u307e\u3059\u3002</p> <p>\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f Python \u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u9045\u304f\u306a\u308a\u307e\u3059\u3002</p> <p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u6700\u521d\u306b\u5b9a\u7fa9\u3057\u305f <code>DataFrame</code> \u3067\u7d9a\u3051\u3066\u3001 <code>map_elements</code> \u95a2\u6570\u306e\u4f8b\u3068\u540c\u3058\u76ee\u6a19\u3092\u9054\u6210\u3059\u308b\u305f\u3081\u306b\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 API \u3092\u4f7f\u7528\u3059\u308b\u53cd\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"user-guide/expressions/user-defined-functions/#_1","title":"\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u8ffd\u52a0","text":"<p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306a <code>counter</code> \u3092\u4f5c\u6210\u3057\u3001\u51e6\u7406\u3055\u308c\u308b\u5404\u8981\u7d20\u306b\u6574\u6570 <code>1</code> \u3092\u52a0\u3048\u307e\u3059\u3002 \u5404\u53cd\u5fa9\u3067\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u7d50\u679c\u304c\u8981\u7d20\u5024\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002</p> <p>\u6ce8\uff1a\u3053\u306e\u4f8b\u306f Rust \u3067\u306f\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u7406\u7531\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u306a <code>counter</code> \u5024\u304c\u4e26\u884c\u8a55\u4fa1\u3055\u308c\u308b\u3068\u304d\u306b\u30c7\u30fc\u30bf\u7af6\u5408\u3092\u5f15\u304d\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002\u305d\u308c\u3092 <code>Mutex</code> \u3067\u30e9\u30c3\u30d7\u3057\u3066\u5909\u6570\u3092\u4fdd\u8b77\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u4f8b\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u66d6\u6627\u306b\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001Python Global Interpreter Lock \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u304c\u3044\u304f\u3064\u304b\u306e\u5b89\u5168\u4fdd\u969c\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>  Python Rust <pre><code>counter = 0\n\n\ndef add_counter(val: int) -&gt; int:\n    global counter\n    counter += 1\n    return counter + val\n\n\nout = df.select(\n    pl.col(\"values\").map_elements(add_counter).alias(\"solution_map_elements\"),\n    (pl.col(\"values\") + pl.int_range(1, pl.len() + 1)).alias(\"solution_expr\"),\n)\nprint(out)\n</code></pre> <pre><code>\n</code></pre> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 solution_map_elements \u2506 solution_expr \u2502\n\u2502 ---                   \u2506 ---           \u2502\n\u2502 i64                   \u2506 i64           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 11                    \u2506 11            \u2502\n\u2502 9                     \u2506 9             \u2502\n\u2502 4                     \u2506 4             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/user-defined-functions/#_2","title":"\u8907\u6570\u306e\u30ab\u30e9\u30e0\u5024\u306e\u7d44\u307f\u5408\u308f\u305b","text":"<p>\u5358\u4e00\u306e <code>map_elements</code> \u95a2\u6570\u30b3\u30fc\u30eb\u3067\u7570\u306a\u308b\u30ab\u30e9\u30e0\u306e\u5024\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\u5834\u5408\u3001 <code>struct</code> \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306f\u3001<code>struct</code> \u5185\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u3057\u3066\u305d\u308c\u3089\u306e\u30ab\u30e9\u30e0\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001<code>\"keys\"</code> \u3068 <code>\"values\"</code> \u306e\u30ab\u30e9\u30e0\u304b\u3089 struct \u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a struct \u8981\u7d20\u304c\u5f97\u3089\u308c\u307e\u3059\uff1a</p> <pre><code>[\n    {\"keys\": \"a\", \"values\": 10},\n    {\"keys\": \"a\", \"values\": 7},\n    {\"keys\": \"b\", \"values\": 1},\n]\n</code></pre> <p>Python \u3067\u306f\u3001\u3053\u308c\u3089\u306f\u547c\u3073\u51fa\u3057\u5143\u306e Python \u95a2\u6570\u306b <code>dict</code> \u3068\u3057\u3066\u6e21\u3055\u308c\u3001<code>field: str</code> \u306b\u3088\u3063\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3055\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Rust \u3067\u306f\u3001<code>Struct</code> \u30bf\u30a4\u30d7\u306e <code>Series</code> \u3092\u53d6\u5f97\u3057\u307e\u3059\u3002struct \u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5316\u3055\u308c\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <pre><code>out = df.select(\n    pl.struct([\"keys\", \"values\"])\n    .map_elements(lambda x: len(x[\"keys\"]) + x[\"values\"])\n    .alias(\"solution_map_elements\"),\n    (pl.col(\"keys\").str.len_bytes() + pl.col(\"values\")).alias(\"solution_expr\"),\n)\nprint(out)\n</code></pre> <pre><code>let out = df\n    .lazy()\n    .select([\n        // pack to struct to get access to multiple fields in a custom `apply/map`\n        as_struct(vec![col(\"keys\"), col(\"values\")])\n            // we will compute the len(a) + b\n            .apply(\n                |s| {\n                    // downcast to struct\n                    let ca = s.struct_()?;\n\n                    // get the fields as Series\n                    let s_a = &amp;ca.fields()[0];\n                    let s_b = &amp;ca.fields()[1];\n\n                    // downcast the `Series` to their known type\n                    let ca_a = s_a.str()?;\n                    let ca_b = s_b.i32()?;\n\n                    // iterate both `ChunkedArrays`\n                    let out: Int32Chunked = ca_a\n                        .into_iter()\n                        .zip(ca_b)\n                        .map(|(opt_a, opt_b)| match (opt_a, opt_b) {\n                            (Some(a), Some(b)) =&gt; Some(a.len() as i32 + b),\n                            _ =&gt; None,\n                        })\n                        .collect();\n\n                    Ok(Some(out.into_series()))\n                },\n                GetOutput::from_type(DataType::Int32),\n            )\n            // note: the `'solution_map_elements'` alias is just there to show how you\n            // get the same output as in the Python API example.\n            .alias(\"solution_map_elements\"),\n        (col(\"keys\").str().count_matches(lit(\".\"), true) + col(\"values\"))\n            .alias(\"solution_expr\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 solution_map_elements \u2506 solution_expr \u2502\n\u2502 ---                   \u2506 ---           \u2502\n\u2502 i64                   \u2506 i64           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 11                    \u2506 11            \u2502\n\u2502 8                     \u2506 8             \u2502\n\u2502 2                     \u2506 2             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>Structs</code> \u306b\u3064\u3044\u3066\u306f\u6b21\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/expressions/user-defined-functions/#_3","title":"\u623b\u308a\u5024\u306f\uff1f","text":"<p>\u30ab\u30b9\u30bf\u30e0 Python \u95a2\u6570\u306f Polars \u306b\u3068\u3063\u3066\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3067\u3059\u3002 \u3067\u3059\u306e\u3067\u3001\u3042\u306a\u305f\u304c\u4f55\u3092\u610f\u56f3\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u63a8\u6e2c\u3057\u3001\u6700\u5584\u3092\u5c3d\u304f\u3057\u3066\u7406\u89e3\u3057\u3088\u3046\u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30e6\u30fc\u30b6\u30fc\u3068\u3057\u3066\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u95a2\u6570\u3092\u3088\u308a\u3088\u304f\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u79c1\u305f\u3061\u304c\u4f55\u3092\u3059\u308b\u304b\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306f\u81ea\u52d5\u7684\u306b\u63a8\u6e2c\u3055\u308c\u307e\u3059\u3002\u79c1\u305f\u3061\u306f\u6700\u521d\u306e\u975e null \u5024\u3092\u5f85\u3061\u3001 \u305d\u306e\u5024\u3092\u4f7f\u7528\u3057\u3066 <code>Series</code> \u306e\u30bf\u30a4\u30d7\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002</p> <p>Python \u306e\u578b\u304b\u3089 Polars \u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li><code>int</code> -&gt; <code>Int64</code></li> <li><code>float</code> -&gt; <code>Float64</code></li> <li><code>bool</code> -&gt; <code>Boolean</code></li> <li><code>str</code> -&gt; <code>String</code></li> <li><code>list[tp]</code> -&gt; <code>List[tp]</code> (\u5185\u90e8\u30bf\u30a4\u30d7\u306f\u540c\u3058\u30eb\u30fc\u30eb\u3067\u63a8\u6e2c)</li> <li><code>dict[str, [tp]]</code> -&gt; <code>struct</code></li> <li><code>Any</code> -&gt; <code>object</code> (\u3053\u308c\u306f\u5e38\u306b\u907f\u3051\u3066\u304f\u3060\u3055\u3044)</li> </ul> <p>Rust \u306e\u578b\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li><code>i32</code> \u307e\u305f\u306f <code>i64</code> -&gt; <code>Int64</code></li> <li><code>f32</code> \u307e\u305f\u306f <code>f64</code> -&gt; <code>Float64</code></li> <li><code>bool</code> -&gt; <code>Boolean</code></li> <li><code>String</code> \u307e\u305f\u306f <code>str</code> -&gt; <code>String</code></li> <li><code>Vec&lt;tp&gt;</code> -&gt; <code>List[tp]</code> (\u5185\u90e8\u30bf\u30a4\u30d7\u306f\u540c\u3058\u30eb\u30fc\u30eb\u3067\u63a8\u6e2c)</li> </ul>"},{"location":"user-guide/expressions/window/","title":"\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\uff08Window functions\uff09","text":"<p>\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u306f\u30b9\u30fc\u30d1\u30fc\u30d1\u30ef\u30fc\u3092\u6301\u3064\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3067\u3059\u3002\u3053\u308c\u3089\u3092\u4f7f\u7528\u3057\u3066\u3001 <code>select</code> \u5f0f\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5bfe\u3057\u3066\u96c6\u8a08\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u610f\u5473\u3092\u611f\u3058\u53d6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u307e\u305a\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u8aad\u307f\u8fbc\u307e\u308c\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u306f\u3001\u30dd\u30b1\u30e2\u30f3\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>  Python Rust <p> <code>read_csv</code> <pre><code>import polars as pl\n\n# then let's load some csv data with information about pokemon\ndf = pl.read_csv(\n    \"https://gist.githubusercontent.com/ritchie46/cac6b337ea52281aa23c049250a4ff03/raw/89a957ff3919d90e6ef2d34235e6bf22304f3366/pokemon.csv\"\n)\nprint(df.head())\n</code></pre></p> <p> <code>CsvReader</code> \u00b7  Available on feature csv <pre><code>use polars::prelude::*;\nuse reqwest::blocking::Client;\n\nlet data: Vec&lt;u8&gt; = Client::new()\n    .get(\"https://gist.githubusercontent.com/ritchie46/cac6b337ea52281aa23c049250a4ff03/raw/89a957ff3919d90e6ef2d34235e6bf22304f3366/pokemon.csv\")\n    .send()?\n    .text()?\n    .bytes()\n    .collect();\n\nlet df = CsvReader::new(std::io::Cursor::new(data))\n    .has_header(true)\n    .finish()?;\n\nprintln!(\"{}\", df);\n</code></pre></p> <pre><code>shape: (5, 13)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 #   \u2506 Name                  \u2506 Type 1 \u2506 Type 2 \u2506 \u2026 \u2506 Sp. Def \u2506 Speed \u2506 Generation \u2506 Legendary \u2502\n\u2502 --- \u2506 ---                   \u2506 ---    \u2506 ---    \u2506   \u2506 ---     \u2506 ---   \u2506 ---        \u2506 ---       \u2502\n\u2502 i64 \u2506 str                   \u2506 str    \u2506 str    \u2506   \u2506 i64     \u2506 i64   \u2506 i64        \u2506 bool      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 Bulbasaur             \u2506 Grass  \u2506 Poison \u2506 \u2026 \u2506 65      \u2506 45    \u2506 1          \u2506 false     \u2502\n\u2502 2   \u2506 Ivysaur               \u2506 Grass  \u2506 Poison \u2506 \u2026 \u2506 80      \u2506 60    \u2506 1          \u2506 false     \u2502\n\u2502 3   \u2506 Venusaur              \u2506 Grass  \u2506 Poison \u2506 \u2026 \u2506 100     \u2506 80    \u2506 1          \u2506 false     \u2502\n\u2502 3   \u2506 VenusaurMega Venusaur \u2506 Grass  \u2506 Poison \u2506 \u2026 \u2506 120     \u2506 80    \u2506 1          \u2506 false     \u2502\n\u2502 4   \u2506 Charmander            \u2506 Fire   \u2506 null   \u2506 \u2026 \u2506 50      \u2506 65    \u2506 1          \u2506 false     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/window/#_1","title":"\u9078\u629e\u306b\u304a\u3051\u308b\u30b0\u30eb\u30fc\u30d7\u5225\u96c6\u8a08","text":"<p>\u4ee5\u4e0b\u3067\u306f\u3001\u7570\u306a\u308b\u30ab\u30e9\u30e0\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001\u305d\u308c\u3089\u306b\u96c6\u8a08\u3092\u884c\u3046\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u306e\u4f7f\u7528\u65b9\u6cd5\u3092\u793a\u3057\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u308a\u3001\u5358\u4e00\u306e\u30af\u30a8\u30ea\u3092\u4f7f\u7528\u3057\u3066\u8907\u6570\u306e\u30b0\u30eb\u30fc\u30d7\u5225\u64cd\u4f5c\u3092\u4e26\u884c\u3057\u3066\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002 \u96c6\u8a08\u306e\u7d50\u679c\u306f\u5143\u306e\u884c\u306b\u6295\u5f71\u3055\u308c\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u306f\u901a\u5e38\u3001\u5143\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306e DataFrame \u3092\u751f\u6210\u3057\u307e\u3059\u3002</p> <p>\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u304c <code>DataFrame</code> \u306e\u884c\u6570\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u306b\u3064\u3044\u3066\u306f\u5f8c\u3067\u8b70\u8ad6\u3057\u307e\u3059\u3002</p> <p><code>.over(\"Type 1\")</code> \u3068 <code>.over([\"Type 1\", \"Type 2\"])</code> \u3092\u547c\u3073\u51fa\u3059\u65b9\u6cd5\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u5358\u4e00\u306e <code>select</code> \u547c\u3073\u51fa\u3057\u3067\u7570\u306a\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u96c6\u8a08\u3067\u304d\u307e\u3059\uff01Rust \u3067\u306f\u3001<code>over()</code> \u3078\u306e\u5f15\u6570\u306e\u30bf\u30a4\u30d7\u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\u30011\u3064\u306e\u30ab\u30e9\u30e0\u306e\u307f\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3067\u3082\u3001\u305d\u308c\u3092\u914d\u5217\u3067\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u6700\u826f\u306e\u90e8\u5206\u306f\u3001\u3053\u308c\u306b\u3088\u308b\u8ffd\u52a0\u30b3\u30b9\u30c8\u306f\u4e00\u5207\u3042\u308a\u307e\u305b\u3093\u3002\u8a08\u7b97\u3055\u308c\u305f\u30b0\u30eb\u30fc\u30d7\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3001\u7570\u306a\u308b <code>window</code> \u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u9593\u3067\u5171\u6709\u3055\u308c\u307e\u3059\u3002</p>  Python Rust <p> <code>over</code> <pre><code>out = df.select(\n    \"Type 1\",\n    \"Type 2\",\n    pl.col(\"Attack\").mean().over(\"Type 1\").alias(\"avg_attack_by_type\"),\n    pl.col(\"Defense\")\n    .mean()\n    .over([\"Type 1\", \"Type 2\"])\n    .alias(\"avg_defense_by_type_combination\"),\n    pl.col(\"Attack\").mean().alias(\"avg_attack\"),\n)\nprint(out)\n</code></pre></p> <p> <code>over</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"Type 1\"),\n        col(\"Type 2\"),\n        col(\"Attack\")\n            .mean()\n            .over([\"Type 1\"])\n            .alias(\"avg_attack_by_type\"),\n        col(\"Defense\")\n            .mean()\n            .over([\"Type 1\", \"Type 2\"])\n            .alias(\"avg_defense_by_type_combination\"),\n        col(\"Attack\").mean().alias(\"avg_attack\"),\n    ])\n    .collect()?;\n\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (163, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Type 1  \u2506 Type 2 \u2506 avg_attack_by_type \u2506 avg_defense_by_type_combinatio\u2026 \u2506 avg_attack \u2502\n\u2502 ---     \u2506 ---    \u2506 ---                \u2506 ---                             \u2506 ---        \u2502\n\u2502 str     \u2506 str    \u2506 f64                \u2506 f64                             \u2506 f64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Grass   \u2506 Poison \u2506 72.923077          \u2506 67.8                            \u2506 75.349693  \u2502\n\u2502 Grass   \u2506 Poison \u2506 72.923077          \u2506 67.8                            \u2506 75.349693  \u2502\n\u2502 Grass   \u2506 Poison \u2506 72.923077          \u2506 67.8                            \u2506 75.349693  \u2502\n\u2502 Grass   \u2506 Poison \u2506 72.923077          \u2506 67.8                            \u2506 75.349693  \u2502\n\u2502 Fire    \u2506 null   \u2506 88.642857          \u2506 58.3                            \u2506 75.349693  \u2502\n\u2502 \u2026       \u2506 \u2026      \u2506 \u2026                  \u2506 \u2026                               \u2506 \u2026          \u2502\n\u2502 Fire    \u2506 Flying \u2506 88.642857          \u2506 82.0                            \u2506 75.349693  \u2502\n\u2502 Dragon  \u2506 null   \u2506 94.0               \u2506 55.0                            \u2506 75.349693  \u2502\n\u2502 Dragon  \u2506 null   \u2506 94.0               \u2506 55.0                            \u2506 75.349693  \u2502\n\u2502 Dragon  \u2506 Flying \u2506 94.0               \u2506 95.0                            \u2506 75.349693  \u2502\n\u2502 Psychic \u2506 null   \u2506 53.875             \u2506 51.428571                       \u2506 75.349693  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/expressions/window/#_2","title":"\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u64cd\u4f5c","text":"<p>\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u306f\u96c6\u8a08\u4ee5\u4e0a\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>group</code> \u5185\u3067\u5024\u3092 <code>sort</code> \u3057\u305f\u3044\u5834\u5408\u3001 <code>col(\"value\").sort().over(\"group\")</code> \u3068\u8a18\u8ff0\u3057\u3001voil\u00e0\uff01\u30b0\u30eb\u30fc\u30d7\u5225\u306b\u30bd\u30fc\u30c8\u3057\u307e\u3057\u305f\uff01</p> <p>\u3053\u308c\u3092\u3082\u3046\u5c11\u3057\u660e\u78ba\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u3044\u304f\u3064\u304b\u306e\u884c\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u9664\u5916\u3057\u307e\u3057\u3087\u3046\u3002</p>  Python Rust <p> <code>filter</code> <pre><code>filtered = df.filter(pl.col(\"Type 2\") == \"Psychic\").select(\n    \"Name\",\n    \"Type 1\",\n    \"Speed\",\n)\nprint(filtered)\n</code></pre></p> <p> <code>filter</code> <pre><code>let filtered = df\n    .clone()\n    .lazy()\n    .filter(col(\"Type 2\").eq(lit(\"Psychic\")))\n    .select([col(\"Name\"), col(\"Type 1\"), col(\"Speed\")])\n    .collect()?;\n\nprintln!(\"{}\", filtered);\n</code></pre></p> <pre><code>shape: (7, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Name                \u2506 Type 1 \u2506 Speed \u2502\n\u2502 ---                 \u2506 ---    \u2506 ---   \u2502\n\u2502 str                 \u2506 str    \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Slowpoke            \u2506 Water  \u2506 15    \u2502\n\u2502 Slowbro             \u2506 Water  \u2506 30    \u2502\n\u2502 SlowbroMega Slowbro \u2506 Water  \u2506 30    \u2502\n\u2502 Exeggcute           \u2506 Grass  \u2506 40    \u2502\n\u2502 Exeggutor           \u2506 Grass  \u2506 55    \u2502\n\u2502 Starmie             \u2506 Water  \u2506 115   \u2502\n\u2502 Jynx                \u2506 Ice    \u2506 95    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>Type 1</code> \u306e\u30ab\u30e9\u30e0\u306b\u3042\u308b <code>Water</code> \u30b0\u30eb\u30fc\u30d7\u304c\u9023\u7d9a\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u305d\u306e\u9593\u306b <code>Grass</code> \u306e2\u884c\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u5404\u30dd\u30b1\u30e2\u30f3\u306f <code>Speed</code> \u306b\u3088\u3063\u3066\u6607\u9806\u3067\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u6b8b\u5ff5\u306a\u304c\u3089\u3001\u3053\u306e\u4f8b\u3067\u306f\u964d\u9806\u3067\u30bd\u30fc\u30c8\u3057\u305f\u3044\u306e\u3067\u3059\u3002\u5e78\u3044\u306a\u3053\u3068\u306b\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308c\u3070\u3053\u308c\u306f\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>over</code> <pre><code>out = filtered.with_columns(\n    pl.col([\"Name\", \"Speed\"]).sort_by(\"Speed\", descending=True).over(\"Type 1\"),\n)\nprint(out)\n</code></pre></p> <p> <code>over</code> <pre><code>let out = filtered\n    .lazy()\n    .with_columns([cols([\"Name\", \"Speed\"])\n        .sort_by(\n            [\"Speed\"],\n            SortMultipleOptions::default().with_order_descending(true),\n        )\n        .over([\"Type 1\"])])\n    .collect()?;\nprintln!(\"{}\", out);\n</code></pre></p> <pre><code>shape: (7, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Name                \u2506 Type 1 \u2506 Speed \u2502\n\u2502 ---                 \u2506 ---    \u2506 ---   \u2502\n\u2502 str                 \u2506 str    \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Starmie             \u2506 Water  \u2506 115   \u2502\n\u2502 Slowbro             \u2506 Water  \u2506 30    \u2502\n\u2502 SlowbroMega Slowbro \u2506 Water  \u2506 30    \u2502\n\u2502 Exeggutor           \u2506 Grass  \u2506 55    \u2502\n\u2502 Exeggcute           \u2506 Grass  \u2506 40    \u2502\n\u2502 Slowpoke            \u2506 Water  \u2506 15    \u2502\n\u2502 Jynx                \u2506 Ice    \u2506 95    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Polars \u306f\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u4f4d\u7f6e\u3092\u8ffd\u8de1\u3057\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u9069\u5207\u306a\u884c\u4f4d\u7f6e\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u5358\u4e00\u306e <code>select</code> \u5185\u3067\u7570\u306a\u308b\u30b0\u30eb\u30fc\u30d7\u306b\u5bfe\u3057\u3066\u3082\u6a5f\u80fd\u3057\u307e\u3059\u3002</p> <p>\u30a6\u30a3\u30f3\u30c9\u30a6\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u529b\u306f\u3001<code>group_by -&gt; explode</code> \u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u4e0d\u8981\u3067\u3001\u30ed\u30b8\u30c3\u30af\u3092\u5358\u4e00\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u70b9\u3067\u3059\u3002\u307e\u305f\u3001API \u3092\u3088\u308a\u30af\u30ea\u30fc\u30f3\u306b\u3057\u307e\u3059\u3002\u9069\u5207\u306b\u4f7f\u7528\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <ul> <li><code>group_by</code> -&gt; \u30b0\u30eb\u30fc\u30d7\u304c\u96c6\u7d04\u3055\u308c\u3001\u30b5\u30a4\u30ba\u304c <code>n_groups</code> \u306e DataFrame \u3092\u671f\u5f85\u3059\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059</li> <li><code>over</code> -&gt; \u30b0\u30eb\u30fc\u30d7\u5185\u3067\u4f55\u304b\u3092\u8a08\u7b97\u3057\u305f\u3044\u3053\u3068\u3092\u793a\u3057\u3001\u7279\u5b9a\u306e\u30b1\u30fc\u30b9\u3092\u9664\u3044\u3066\u5143\u306e DataFrame \u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3057\u307e\u305b\u3093</li> </ul>"},{"location":"user-guide/expressions/window/#dataframe","title":"\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u7d50\u679c\u3092 DataFrame \u306e\u884c\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b","text":"<p>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u304c\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u8907\u6570\u306e\u5024\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u306b\u306f\u5024\u3092 DataFrame \u306e\u884c\u306b\u30ea\u30f3\u30af\u3059\u308b\u305f\u3081\u306e3\u3064\u306e\u6226\u7565\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li> <p><code>mapping_strategy = 'group_to_rows'</code> -&gt; \u5404\u5024\u306f1\u884c\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u307e\u3059\u3002\u8fd4\u3055\u308c\u308b\u5024\u306e\u6570\u306f\u884c\u6570\u306b\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> </li> <li> <p><code>mapping_strategy = 'join'</code> -&gt; \u5024\u306f\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u3089\u308c\u3001\u305d\u306e\u30ea\u30b9\u30c8\u304c\u3059\u3079\u3066\u306e\u884c\u306b\u7e70\u308a\u8fd4\u3057\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u30e1\u30e2\u30ea\u3092\u591a\u304f\u6d88\u8cbb\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> </li> <li> <p><code>mapping_strategy = 'explode'</code> -&gt; \u5024\u304c\u65b0\u3057\u3044\u884c\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u64cd\u4f5c\u306f\u884c\u6570\u3092\u5909\u66f4\u3057\u307e\u3059\u3002</p> </li> </ul>"},{"location":"user-guide/expressions/window/#_3","title":"\u30a6\u30a3\u30f3\u30c9\u30a6\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u30eb\u30fc\u30eb","text":"<p>\u30a6\u30a3\u30f3\u30c9\u30a6\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306e\u8a55\u4fa1\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff08<code>pl.Int32</code> \u5217\u306b\u9069\u7528\u3059\u308b\u5834\u5408\u3092\u60f3\u5b9a\uff09\uff1a</p>  Python Rust <p> <code>over</code> <pre><code># aggregate and broadcast within a group\n# output type: -&gt; Int32\npl.sum(\"foo\").over(\"groups\")\n\n# sum within a group and multiply with group elements\n# output type: -&gt; Int32\n(pl.col(\"x\").sum() * pl.col(\"y\")).over(\"groups\")\n\n# sum within a group and multiply with group elements\n# and aggregate the group to a list\n# output type: -&gt; List(Int32)\n(pl.col(\"x\").sum() * pl.col(\"y\")).over(\"groups\", mapping_strategy=\"join\")\n\n# sum within a group and multiply with group elements\n# and aggregate the group to a list\n# then explode the list to multiple rows\n\n# This is the fastest method to do things over groups when the groups are sorted\n(pl.col(\"x\").sum() * pl.col(\"y\")).over(\"groups\", mapping_strategy=\"explode\")\n</code></pre></p> <p> <code>over</code> <pre><code>// aggregate and broadcast within a group\n// output type: -&gt; i32\nlet _ = sum(\"foo\").over([col(\"groups\")]);\n// sum within a group and multiply with group elements\n// output type: -&gt; i32\nlet _ = (col(\"x\").sum() * col(\"y\"))\n    .over([col(\"groups\")])\n    .alias(\"x1\");\n// sum within a group and multiply with group elements\n// and aggregate the group to a list\n// output type: -&gt; ChunkedArray&lt;i32&gt;\nlet _ = (col(\"x\").sum() * col(\"y\"))\n    .over([col(\"groups\")])\n    .alias(\"x2\");\n// note that it will require an explicit `list()` call\n// sum within a group and multiply with group elements\n// and aggregate the group to a list\n// the flatten call explodes that list\n\n// This is the fastest method to do things over groups when the groups are sorted\nlet _ = (col(\"x\").sum() * col(\"y\"))\n    .over([col(\"groups\")])\n    .flatten()\n    .alias(\"x3\");\n</code></pre></p>"},{"location":"user-guide/expressions/window/#_4","title":"\u3055\u3089\u306a\u308b\u4f8b","text":"<p>\u3055\u3089\u306b\u7df4\u7fd2\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u95a2\u6570\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <ul> <li>\u3059\u3079\u3066\u306e\u30dd\u30b1\u30e2\u30f3\u3092\u30bf\u30a4\u30d7\u5225\u306b\u30bd\u30fc\u30c8\u3059\u308b</li> <li>\u30bf\u30a4\u30d7 <code>\"Type 1\"</code> \u3054\u3068\u306b\u6700\u521d\u306e <code>3</code> \u30dd\u30b1\u30e2\u30f3\u3092\u9078\u629e\u3059\u308b</li> <li>\u30bf\u30a4\u30d7\u5185\u306e\u30dd\u30b1\u30e2\u30f3\u3092\u30b9\u30d4\u30fc\u30c9\u306e\u964d\u9806\u3067\u30bd\u30fc\u30c8\u3057\u3001\u6700\u521d\u306e <code>3</code> \u3092 <code>\"fastest/group\"</code> \u3068\u3057\u3066\u9078\u629e\u3059\u308b</li> <li>\u30bf\u30a4\u30d7\u5185\u306e\u30dd\u30b1\u30e2\u30f3\u3092\u653b\u6483\u529b\u306e\u964d\u9806\u3067\u30bd\u30fc\u30c8\u3057\u3001\u6700\u521d\u306e <code>3</code> \u3092 <code>\"strongest/group\"</code> \u3068\u3057\u3066\u9078\u629e\u3059\u308b</li> <li>\u30bf\u30a4\u30d7\u5185\u306e\u30dd\u30b1\u30e2\u30f3\u3092\u540d\u524d\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3001\u6700\u521d\u306e <code>3</code> \u3092 <code>\"sorted_by_alphabet\"</code> \u3068\u3057\u3066\u9078\u629e\u3059\u308b</li> </ul>  Python Rust <p> <code>over</code> \u00b7 <code>implode</code> <pre><code>out = df.sort(\"Type 1\").select(\n    pl.col(\"Type 1\").head(3).over(\"Type 1\", mapping_strategy=\"explode\"),\n    pl.col(\"Name\")\n    .sort_by(pl.col(\"Speed\"), descending=True)\n    .head(3)\n    .over(\"Type 1\", mapping_strategy=\"explode\")\n    .alias(\"fastest/group\"),\n    pl.col(\"Name\")\n    .sort_by(pl.col(\"Attack\"), descending=True)\n    .head(3)\n    .over(\"Type 1\", mapping_strategy=\"explode\")\n    .alias(\"strongest/group\"),\n    pl.col(\"Name\")\n    .sort()\n    .head(3)\n    .over(\"Type 1\", mapping_strategy=\"explode\")\n    .alias(\"sorted_by_alphabet\"),\n)\nprint(out)\n</code></pre></p> <p> <code>over</code> \u00b7 <code>implode</code> <pre><code>let out = df\n    .clone()\n    .lazy()\n    .select([\n        col(\"Type 1\").head(Some(3)).over([\"Type 1\"]).flatten(),\n        col(\"Name\")\n            .sort_by(\n                [\"Speed\"],\n                SortMultipleOptions::default().with_order_descending(true),\n            )\n            .head(Some(3))\n            .over([\"Type 1\"])\n            .flatten()\n            .alias(\"fastest/group\"),\n        col(\"Name\")\n            .sort_by(\n                [\"Attack\"],\n                SortMultipleOptions::default().with_order_descending(true),\n            )\n            .head(Some(3))\n            .over([\"Type 1\"])\n            .flatten()\n            .alias(\"strongest/group\"),\n        col(\"Name\")\n            .sort(Default::default())\n            .head(Some(3))\n            .over([\"Type 1\"])\n            .flatten()\n            .alias(\"sorted_by_alphabet\"),\n    ])\n    .collect()?;\nprintln!(\"{:?}\", out);\n</code></pre></p> <pre><code>shape: (43, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Type 1 \u2506 fastest/group         \u2506 strongest/group       \u2506 sorted_by_alphabet        \u2502\n\u2502 ---    \u2506 ---                   \u2506 ---                   \u2506 ---                       \u2502\n\u2502 str    \u2506 str                   \u2506 str                   \u2506 str                       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Bug    \u2506 BeedrillMega Beedrill \u2506 PinsirMega Pinsir     \u2506 Beedrill                  \u2502\n\u2502 Bug    \u2506 Scyther               \u2506 BeedrillMega Beedrill \u2506 BeedrillMega Beedrill     \u2502\n\u2502 Bug    \u2506 PinsirMega Pinsir     \u2506 Pinsir                \u2506 Butterfree                \u2502\n\u2502 Dragon \u2506 Dragonite             \u2506 Dragonite             \u2506 Dragonair                 \u2502\n\u2502 Dragon \u2506 Dragonair             \u2506 Dragonair             \u2506 Dragonite                 \u2502\n\u2502 \u2026      \u2506 \u2026                     \u2506 \u2026                     \u2506 \u2026                         \u2502\n\u2502 Rock   \u2506 Aerodactyl            \u2506 Golem                 \u2506 AerodactylMega Aerodactyl \u2502\n\u2502 Rock   \u2506 Kabutops              \u2506 Kabutops              \u2506 Geodude                   \u2502\n\u2502 Water  \u2506 Starmie               \u2506 GyaradosMega Gyarados \u2506 Blastoise                 \u2502\n\u2502 Water  \u2506 Tentacruel            \u2506 Kingler               \u2506 BlastoiseMega Blastoise   \u2502\n\u2502 Water  \u2506 Poliwag               \u2506 Gyarados              \u2506 Cloyster                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/io/","title":"\u5165\u51fa\u529b","text":"<p>\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3068\u3063\u3066\u3001\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u306f\u91cd\u8981\u3067\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001Polars\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u69d8\u3005\u306a\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3078\u306e\u8aad\u307f\u66f8\u304d\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3073\u307e\u3059\u3002</p> <ul> <li>CSV</li> <li>Excel</li> <li>Parquet</li> <li>Json</li> <li>Multiple</li> <li>Database</li> <li>Cloud storage</li> <li>Google Big Query</li> </ul>"},{"location":"user-guide/io/bigquery/","title":"Google BigQuery","text":"<p>GBQ\u304b\u3089\u8aad\u307f\u66f8\u308a\u3059\u308b\u306b\u306f\u3001\u8ffd\u52a0\u306e\u4f9d\u5b58\u95a2\u4fc2\u304c\u5fc5\u8981\u3067\u3059:</p>  Python <pre><code>$ pip install google-cloud-bigquery\n</code></pre>"},{"location":"user-guide/io/bigquery/#_1","title":"\u8aad\u307f\u8fbc\u307f","text":"<p>\u30af\u30a8\u30ea\u3092 <code>DataFrame</code> \u306b\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p>  Python <p> <code>from_arrow</code> \u00b7  Available on feature fsspec \u00b7  Available on feature pyarrow <pre><code>import polars as pl\nfrom google.cloud import bigquery\n\nclient = bigquery.Client()\n\n# Perform a query.\nQUERY = (\n    'SELECT name FROM `bigquery-public-data.usa_names.usa_1910_2013` '\n    'WHERE state = \"TX\" '\n    'LIMIT 100')\nquery_job = client.query(QUERY)  # API request\nrows = query_job.result()  # Waits for query to finish\n\ndf = pl.from_arrow(rows.to_arrow())\n</code></pre></p>"},{"location":"user-guide/io/bigquery/#_2","title":"\u66f8\u304d\u8fbc\u307f","text":"Python <pre><code>from google.cloud import bigquery\n\nclient = bigquery.Client()\n\n# Write DataFrame to stream as parquet file; does not hit disk\nwith io.BytesIO() as stream:\n    df.write_parquet(stream)\n    stream.seek(0)\n    job = client.load_table_from_file(\n        stream,\n        destination='tablename',\n        project='projectname',\n        job_config=bigquery.LoadJobConfig(\n            source_format=bigquery.SourceFormat.PARQUET,\n        ),\n    )\njob.result()  # Waits for the job to complete\n</code></pre>"},{"location":"user-guide/io/cloud-storage/","title":"\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8","text":"<p>Polars \u306f AWS S3\u3001Azure Blob Storage\u3001Google Cloud Storage \u306e\u8aad\u307f\u66f8\u304d\u304c\u53ef\u80fd\u3067\u3059\u3002 \u3053\u308c\u3089\u306e3\u3064\u306e\u30b9\u30c8\u30ec\u30fc\u30b8\u30d7\u30ed\u30d0\u30a4\u30c0\u306b\u5bfe\u3059\u308bAPI\u306f\u540c\u3058\u3067\u3059\u3002</p> <p>\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u304b\u3089\u8aad\u307f\u53d6\u308b\u5834\u5408\u3001\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3084\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u30d7\u30ed\u30d0\u30a4\u30c0\u306b\u3088\u3063\u3066\u306f\u3001\u8ffd\u52a0\u306e\u4f9d\u5b58\u95a2\u4fc2\u304c\u5fc5\u8981\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python Rust <pre><code>$ pip install fsspec s3fs adlfs gcsfs\n</code></pre> <pre><code>$ cargo add aws_sdk_s3 aws_config tokio --features tokio/full\n</code></pre>"},{"location":"user-guide/io/cloud-storage/#_2","title":"\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>Polars \u306f\u3001eager \u30e2\u30fc\u30c9\u3067 CSV\u3001IPC\u3001\u307e\u305f\u306f Parquet \u30d5\u30a1\u30a4\u30eb\u3092\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>read_parquet</code> \u00b7 <code>read_csv</code> \u00b7 <code>read_ipc</code> <pre><code>import polars as pl\n\nsource = \"s3://bucket/*.parquet\"\n\ndf = pl.read_parquet(source)\n</code></pre></p> <p> <code>ParquetReader</code> \u00b7 <code>CsvReader</code> \u00b7 <code>IpcReader</code> \u00b7  Available on feature parquet \u00b7  Available on feature ipc \u00b7  Available on feature csv <pre><code>use aws_config::BehaviorVersion;\nuse polars::prelude::*;\n\n#[tokio::main]\nasync fn main() {\n    let bucket = \"&lt;YOUR_BUCKET&gt;\";\n    let path = \"&lt;YOUR_PATH&gt;\";\n\n    let config = aws_config::load_defaults(BehaviorVersion::latest()).await;\n    let client = aws_sdk_s3::Client::new(&amp;config);\n\n    let object = client\n        .get_object()\n        .bucket(bucket)\n        .key(path)\n        .send()\n        .await\n        .unwrap();\n\n    let bytes = object.body.collect().await.unwrap().into_bytes();\n\n    let cursor = std::io::Cursor::new(bytes);\n    let df = CsvReader::new(cursor).finish().unwrap();\n\n    println!(\"{:?}\", df);\n}\n</code></pre></p> <p>\u3053\u306e eager \u30af\u30a8\u30ea\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u30e1\u30e2\u30ea\u5185\u306e\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u305d\u3053\u304b\u3089 <code>DataFrame</code> \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002Polars \u306f\u5185\u90e8\u3067 <code>fsspec</code> \u3092\u4f7f\u3063\u3066\u3053\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u7ba1\u7406\u3057\u3066\u304a\u308a\u3001\u3059\u3079\u3066\u306e\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/io/cloud-storage/#_3","title":"\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u304b\u3089\u306e\u30af\u30a8\u30ea\u6700\u9069\u5316\u4ed8\u304d\u30b9\u30ad\u30e3\u30f3","text":"<p>Polars \u306f\u3001\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u304b\u3089 Parquet \u30d5\u30a1\u30a4\u30eb\u3092\u30ec\u30a4\u30b8\u30fc\u30e2\u30fc\u30c9\u3067\u30b9\u30ad\u30e3\u30f3\u3067\u304d\u307e\u3059\u3002\u30bd\u30fc\u30b9URL\u306e\u4ed6\u306b\u3001\u8a8d\u8a3c\u60c5\u5831\u3084\u30b9\u30c8\u30ec\u30fc\u30b8\u30ea\u30fc\u30b8\u30e7\u30f3\u306a\u3069\u306e\u8a73\u7d30\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 Polars\u306f\u74b0\u5883\u5909\u6570\u3067\u3053\u308c\u3089\u3092\u691c\u7d22\u3057\u307e\u3059\u304c\u3001 <code>storage_options</code> \u5f15\u6570\u3068\u3057\u3066 <code>dict</code> \u3092\u6e21\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>scan_parquet</code> <pre><code>import polars as pl\n\nsource = \"s3://bucket/*.parquet\"\n\nstorage_options = {\n    \"aws_access_key_id\": \"&lt;secret&gt;\",\n    \"aws_secret_access_key\": \"&lt;secret&gt;\",\n    \"aws_region\": \"us-east-1\",\n}\ndf = pl.scan_parquet(source, storage_options=storage_options)\n</code></pre></p> <p> <code>scan_parquet</code> \u00b7  Available on feature parquet <pre><code>\n</code></pre></p> <p>\u3053\u306e\u30af\u30a8\u30ea\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u305b\u305a\u306b <code>LazyFrame</code> \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 <code>LazyFrame</code> \u3067\u306f\u3001\u30b9\u30ad\u30fc\u30de\u306a\u3069\u306e\u30d5\u30a1\u30a4\u30eb\u30e1\u30bf\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002 Polars \u306f\u5185\u90e8\u3067 <code>object_store.rs</code> \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u30d7\u30ed\u30d0\u30a4\u30c0\u3068\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30af\u30e9\u30a6\u30c9 Parquet \u30d5\u30a1\u30a4\u30eb\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u305f\u3081\u306bPython\u3067\u8ffd\u52a0\u306e\u4f9d\u5b58\u95a2\u4fc2\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002</p> <p>\u8ff0\u8a9e\u3068\u5c04\u5f71\u306e\u30d7\u30c3\u30b7\u30e5\u30c0\u30a6\u30f3\u3092\u4f7f\u3063\u3066\u30ec\u30a4\u30b8\u30fc\u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u308b\u524d\u306b\u30af\u30a8\u30ea\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u304c\u9069\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u30c7\u30fc\u30bf\u91cf\u3092\u5927\u5e45\u306b\u524a\u6e1b\u3067\u304d\u307e\u3059\u3002\u30af\u30a8\u30ea\u306e\u8a55\u4fa1\u306f <code>collect</code> \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u958b\u59cb\u3055\u308c\u307e\u3059\u3002</p>  Python Rust <pre><code>import polars as pl\n\nsource = \"s3://bucket/*.parquet\"\n\n\ndf = pl.scan_parquet(source).filter(pl.col(\"id\") &lt; 100).select(\"id\",\"value\").collect()\n</code></pre> <pre><code>\n</code></pre>"},{"location":"user-guide/io/cloud-storage/#pythonpyarrow","title":"Python\u30a2\u30ed\u30fc(PyArrow)\u306b\u3088\u308b\u30b9\u30ad\u30e3\u30f3","text":"<p>PyArrow\u3092\u4f7f\u3063\u3066\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u304b\u3089\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001Hive\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30cb\u30f3\u30b0\u306a\u3069\u306e\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u7279\u306b\u4fbf\u5229\u3067\u3059\u3002</p> <p>\u307e\u305a\u3001PyArrow\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u5f8c\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089<code>LazyFrame</code>\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>scan_pyarrow_dataset</code> <pre><code>import polars as pl\nimport pyarrow.dataset as ds\n\ndset = ds.dataset(\"s3://my-partitioned-folder/\", format=\"parquet\")\n(\n    pl.scan_pyarrow_dataset(dset)\n    .filter(pl.col(\"foo\") == \"a\")\n    .select([\"foo\", \"bar\"])\n    .collect()\n)\n</code></pre></p> <p> <code>scan_pyarrow_dataset</code> <pre><code>\n</code></pre></p>"},{"location":"user-guide/io/cloud-storage/#_4","title":"\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u3078\u306e\u66f8\u304d\u8fbc\u307f","text":"<p>Python \u3067 s3fs (S3 \u7528)\u3001adlfs (Azure Blob Storage \u7528)\u3001gcsfs (Google Cloud Storage \u7528) \u3092\u4f7f\u3063\u3066\u3001<code>DataFrame</code> \u3092\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u4f8b\u3067\u306f\u3001Parquet \u30d5\u30a1\u30a4\u30eb\u3092 S3 \u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002</p>  Python Rust <p> <code>write_parquet</code> <pre><code>import polars as pl\nimport s3fs\n\ndf = pl.DataFrame({\n    \"foo\": [\"a\", \"b\", \"c\", \"d\", \"d\"],\n    \"bar\": [1, 2, 3, 4, 5],\n})\n\nfs = s3fs.S3FileSystem()\ndestination = \"s3://bucket/my_file.parquet\"\n\n# write parquet\nwith fs.open(destination, mode='wb') as f:\n    df.write_parquet(f)\n</code></pre></p> <p> <code>ParquetWriter</code> \u00b7  Available on feature parquet <pre><code>\n</code></pre></p>"},{"location":"user-guide/io/csv/","title":"Csv","text":""},{"location":"user-guide/io/csv/#_1","title":"\u8aad\u307f\u66f8\u304d","text":"<p>CSV \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u884c\u3044\u307e\u3059:</p>  Python Rust <p> <code>read_csv</code> <pre><code>df = pl.read_csv(\"docs/data/path.csv\")\n</code></pre></p> <p> <code>CsvReader</code> \u00b7  Available on feature csv <pre><code>use polars::prelude::*;\n\nlet df = CsvReader::from_path(\"docs/data/path.csv\")\n    .unwrap()\n    .finish()\n    .unwrap();\n</code></pre></p> <p>CSV \u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057\u306f <code>write_csv</code> \u95a2\u6570\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u884c\u3044\u307e\u3059:</p>  Python Rust <p> <code>write_csv</code> <pre><code>df = pl.DataFrame({\"foo\": [1, 2, 3], \"bar\": [None, \"bak\", \"baz\"]})\ndf.write_csv(\"docs/data/path.csv\")\n</code></pre></p> <p> <code>CsvWriter</code> \u00b7  Available on feature csv <pre><code>let mut df = df!(\n    \"foo\" =&gt; &amp;[1, 2, 3],\n    \"bar\" =&gt; &amp;[None, Some(\"bak\"), Some(\"baz\")],\n)\n.unwrap();\n\nlet mut file = std::fs::File::create(\"docs/data/path.csv\").unwrap();\nCsvWriter::new(&amp;mut file).finish(&amp;mut df).unwrap();\n</code></pre></p>"},{"location":"user-guide/io/csv/#_2","title":"\u30b9\u30ad\u30e3\u30f3","text":"<p>Polars \u3067\u306f CSV \u5165\u529b\u3092 \u30b9\u30ad\u30e3\u30f3 \u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5b9f\u969b\u306e\u89e3\u6790\u3092\u9045\u5ef6\u3055\u305b\u3001\u4ee3\u308f\u308a\u306b\u9045\u5ef6\u8a08\u7b97\u30db\u30eb\u30c0\u30fc\u3067\u3042\u308b <code>LazyFrame</code> \u3092\u8fd4\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>scan_csv</code> <pre><code>df = pl.scan_csv(\"docs/data/path.csv\")\n</code></pre></p> <p> <code>LazyCsvReader</code> \u00b7  Available on feature csv <pre><code>let lf = LazyCsvReader::new(\"./test.csv\").finish().unwrap();\n</code></pre></p> <p>\u306a\u305c\u3053\u308c\u304c\u671b\u307e\u3057\u3044\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u3001Polars \u306e\u6700\u9069\u5316\u306b\u3064\u3044\u3066 \u3053\u3061\u3089 \u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/io/database/","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9","text":""},{"location":"user-guide/io/database/#_2","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u3080","text":"<p>Polars \u306f <code>pl.read_database_uri</code> \u304a\u3088\u3073 <code>pl.read_database</code> \u95a2\u6570\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/io/database/#read_database_uri-read_database","title":"<code>read_database_uri</code> \u3068 <code>read_database</code> \u306e\u9055\u3044","text":"<p>\u63a5\u7d9a\u6587\u5b57\u5217\uff08URI\uff09\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f <code>pl.read_database_uri</code> \u3092\u4f7f\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u306f\u3001Postgres \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e <code>foo</code> \u30c6\u30fc\u30d6\u30eb\u306e\u3059\u3079\u3066\u306e\u5217\u3092\u8aad\u307f\u8fbc\u3080\u4f8b\u3067\u3001URI \u3092\u4f7f\u3063\u3066\u63a5\u7d9a\u3057\u3066\u3044\u307e\u3059:</p>  Python <p> <code>read_database_uri</code> <pre><code>import polars as pl\n\nuri = \"postgresql://username:password@server:port/database\"\nquery = \"SELECT * FROM foo\"\n\npl.read_database_uri(query=query, uri=uri)\n</code></pre></p> <p>\u4e00\u65b9\u3001SQLAlchemy \u306e\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u4f5c\u6210\u3057\u305f\u63a5\u7d9a\u30a8\u30f3\u30b8\u30f3\u3092\u4f7f\u3063\u3066\u63a5\u7d9a\u3057\u305f\u3044\u5834\u5408\u306f <code>pl.read_database</code> \u3092\u4f7f\u3044\u307e\u3059\u3002</p>  Python <p> <code>read_database</code> <pre><code>import polars as pl\nfrom sqlalchemy import create_engine\n\nconn = create_engine(f\"sqlite:///test.db\")\n\nquery = \"SELECT * FROM foo\"\n\npl.read_database(query=query, connection=conn.connect())\n</code></pre></p> <p><code>pl.read_database_uri</code> \u306f\u3001SQLAlchemy \u3084 DBAPI2 \u63a5\u7d9a\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001 <code>pl.read_database</code> \u3088\u308a\u3082\u9ad8\u901f\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u3053\u308c\u3089\u306e\u63a5\u7d9a\u3067\u306f\u30c7\u30fc\u30bf\u304c\u307e\u305aPython\u306e\u884c\u5358\u4f4d\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3001\u305d\u306e\u5f8c\u5217\u5358\u4f4d\u306eApache Arrow\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u30b3\u30d4\u30fc\u3055\u308c\u308b\u305f\u3081\u3067\u3059\u3002</p>"},{"location":"user-guide/io/database/#_3","title":"\u30a8\u30f3\u30b8\u30f3","text":"<p>Polars \u306f\u81ea\u8eab\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u306e\u63a5\u7d9a\u3084\u30c7\u30fc\u30bf\u8ee2\u9001\u3092\u7ba1\u7406\u3057\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\uff08\u300c \u30a8\u30f3\u30b8\u30f3 \u300d\u3068\u547c\u3070\u308c\u308b\uff09\u304c\u3053\u308c\u3092\u51e6\u7406\u3057\u307e\u3059\u3002</p> <p><code>pl.read_database</code> \u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u3001\u63a5\u7d9a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b\u30a8\u30f3\u30b8\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002<code>pl.read_database_uri</code> \u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u30012\u3064\u306e\u30a8\u30f3\u30b8\u30f3\u306e\u3044\u305a\u308c\u304b\u3092\u6307\u5b9a\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p> <ul> <li>ConnectorX</li> <li>ADBC</li> </ul> <p>\u4e21\u65b9\u306e\u30a8\u30f3\u30b8\u30f3\u306f Apache Arrow \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30b5\u30dd\u30fc\u30c8\u3092\u6301\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u306a\u304f Polars \u306e <code>DataFrame</code> \u306b\u76f4\u63a5\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/io/database/#connectorx","title":"ConnectorX","text":"<p>ConnectorX \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30f3\u30b8\u30f3\u3067\u3001Postgres\u3001Mysql\u3001SQL Server\u3001Redshift \u306a\u3069\u591a\u6570\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002ConnectorX \u306f Rust \u3067\u66f8\u304b\u308c\u3066\u304a\u308a\u3001Polars \u3078\u306e zero-copy \u3092\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u306b Arrow \u5f62\u5f0f\u3067\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002</p> <p><code>ConnectorX</code> \u3092\u4f7f\u3063\u3066\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u8aad\u307f\u53d6\u308b\u306b\u306f\u3001Polars \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u969b\u306b\u8ffd\u52a0\u306e\u4f9d\u5b58\u95a2\u4fc2 <code>ConnectorX</code> \u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3001\u624b\u52d5\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059:</p> <pre><code>$ pip install connectorx\n</code></pre>"},{"location":"user-guide/io/database/#adbc","title":"ADBC","text":"<p>ADBC\uff08Arrow Database Connectivity\uff09\u306f\u3001Apache Arrow \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30a8\u30f3\u30b8\u30f3\u3067\u3059\u3002ADBC \u306f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306e API \u6a19\u6e96\u3068\u3001\u3053\u306e\u6a19\u6e96\u3092\u5b9f\u88c5\u3057\u305f\u3055\u307e\u3056\u307e\u306a\u8a00\u8a9e\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>ADBC \u306f\u307e\u3060\u521d\u671f\u6bb5\u968e\u306a\u306e\u3067\u3001\u3055\u307e\u3056\u307e\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u5bfe\u5fdc\u306f\u9650\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u73fe\u6642\u70b9\u3067\u306f\u3001ADBC \u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u306f Postgres\u3001SQLite\u3001Snowflake \u3067\u306e\u307f\u5229\u7528\u53ef\u80fd\u3067\u3059\u3002ADBC \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306b\u306f\u3001\u304a\u4f7f\u3044\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7528\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001SQLite \u7528\u306e\u30c9\u30e9\u30a4\u30d0\u30fc\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u307e\u3059:</p> <pre><code>$ pip install adbc-driver-sqlite\n</code></pre> <p>ADBC \u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a8\u30f3\u30b8\u30f3\u3067\u306f\u306a\u3044\u305f\u3081\u3001<code>pl.read_database_uri</code> \u306e\u5f15\u6570\u3067\u30a8\u30f3\u30b8\u30f3\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python <p> <code>read_database_uri</code> <pre><code>uri = \"postgresql://username:password@server:port/database\"\nquery = \"SELECT * FROM foo\"\n\npl.read_database_uri(query=query, uri=uri, engine=\"adbc\")\n</code></pre></p>"},{"location":"user-guide/io/database/#_4","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u66f8\u304d\u8fbc\u307f","text":"<p>Polars \u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u66f8\u304d\u8fbc\u3080\u306b\u306f\u3001<code>pl.write_database</code> \u95a2\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/io/database/#_5","title":"\u30a8\u30f3\u30b8\u30f3","text":"<p>\u4e0a\u8a18\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u3068\u540c\u69d8\u306b\u3001Polars \u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306b\u3082 \u30a8\u30f3\u30b8\u30f3 \u3092\u4f7f\u3044\u307e\u3059\u3002\u73fe\u5728\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30a8\u30f3\u30b8\u30f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059:</p> <ul> <li>SQLAlchemy</li> <li>Arrow Database Connectivity (ADBC)</li> </ul>"},{"location":"user-guide/io/database/#sqlalchemy","title":"SQLAlchemy","text":"<p>\u30c7\u30d5\u30a9\u30eb\u30c8\u306e SQLAlchemy \u30a8\u30f3\u30b8\u30f3\u3092\u4f7f\u3048\u3070\u3001SQLAlchemy \u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3042\u3089\u3086\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30a8\u30f3\u30b8\u30f3\u3092\u4f7f\u3046\u306b\u306f\u3001SQLAlchemy \u3068 Pandas \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code>$ pip install SQLAlchemy pandas\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>DataFrame</code> \u3092 <code>records</code> \u3068\u3044\u3046\u30c6\u30fc\u30d6\u30eb\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002</p>  Python <p> <code>write_database</code> <pre><code>uri = \"postgresql://username:password@server:port/database\"\ndf = pl.DataFrame({\"foo\": [1, 2, 3]})\n\ndf.write_database(table_name=\"records\",  connection=uri)\n</code></pre></p> <p>SQLAlchemy \u30a2\u30d7\u30ed\u30fc\u30c1\u3067\u306f\u3001Polars \u304c <code>DataFrame</code> \u3092 PyArrow \u652f\u63f4\u306e Pandas <code>DataFrame</code> \u306b\u5909\u63db\u3057\u3001\u305d\u306e\u5f8c Pandas <code>DataFrame</code> \u306e SQLAlchemy \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002</p>"},{"location":"user-guide/io/database/#adbc_1","title":"ADBC","text":"<p>ADBC \u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u66f8\u304d\u8fbc\u307f\u306f\u3001ADBC \u3067\u8aad\u307f\u53d6\u308a\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u540c\u3058\u3082\u306e\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4e0a\u8ff0\u306e\u3088\u3046\u306b\u3001\u304a\u4f7f\u3044\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7528\u306e\u9069\u5207\u306a ADBC \u30c9\u30e9\u30a4\u30d0\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python <p> <code>write_database</code> <pre><code>uri = \"postgresql://username:password@server:port/database\"\ndf = pl.DataFrame({\"foo\": [1, 2, 3]})\n\ndf.write_database(table_name=\"records\", connection=uri, engine=\"adbc\")\n</code></pre></p>"},{"location":"user-guide/io/excel/","title":"Excel","text":"<p>Polars \u306f Python \u304b\u3089 Excel \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u304c\u3067\u304d\u307e\u3059\u3002 \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u89b3\u70b9\u304b\u3089\u3001\u53ef\u80fd\u3067\u3042\u308c\u3070 Parquet \u3084 CSV \u30d5\u30a1\u30a4\u30eb\u306a\u3069\u306e\u4ed6\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u4f7f\u3046\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/io/excel/#_1","title":"\u8aad\u307f\u8fbc\u307f","text":"<p>Polars \u306b\u306f Excel \u30ea\u30fc\u30c0\u30fc\u304c\u30cd\u30a4\u30c6\u30a3\u30d6\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u3001Excel \u30d5\u30a1\u30a4\u30eb\u3092Polars \u304c\u89e3\u6790\u3067\u304d\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u5229\u7528\u53ef\u80fd\u306a\u30a8\u30f3\u30b8\u30f3\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059:</p> <ul> <li>xlsx2csv: \u3053\u308c\u304c\u73fe\u5728\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3059\u3002</li> <li>openpyxl: xls2csv \u3068\u6bd4\u3079\u3066\u901a\u5e38\u306f\u9045\u3044\u3067\u3059\u304c\u3001\u89e3\u6790\u304c\u96e3\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066\u3088\u308a\u67d4\u8edf\u306a\u5bfe\u5fdc\u304c\u3067\u304d\u307e\u3059\u3002</li> <li>pyxlsb: \u30d0\u30a4\u30ca\u30ea\u306e Excel \u30d5\u30a1\u30a4\u30eb (xlsb) \u306e\u8aad\u307f\u8fbc\u307f\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</li> <li>fastexcel: \u3053\u306e\u30ea\u30fc\u30c0\u30fc\u306f calamine \u306b\u57fa\u3065\u3044\u3066\u304a\u308a\u3001\u901a\u5e38\u6700\u3082\u9ad8\u901f\u3067\u3059\u304c\u3001xls2csv \u307b\u3069\u306e\u6a5f\u80fd\u306f\u3042\u308a\u307e\u305b\u3093\u3002</li> </ul> <p>fastexcel \u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u307e\u305a\u306f fastexcel \u3092\u8a66\u3057\u3066\u307f\u3066\u3001\u554f\u984c\u304c\u3042\u308b\u5834\u5408\u306f xlsx2csv \u3084 openpyxl \u3092\u4f7f\u3046\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u30a8\u30f3\u30b8\u30f3\u3092\u4f7f\u3046\u306b\u306f\u3001\u5bfe\u5fdc\u3059\u308b Python \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python <pre><code>$ pip install xlsx2csv openpyxl pyxlsb fastexcel\n</code></pre> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u306e Excel \u30ea\u30fc\u30c0\u30fc\u306f xlsx2csv \u3067\u3059\u3002 \u3053\u308c\u306f Excel \u30d5\u30a1\u30a4\u30eb\u3092 CSV \u30d5\u30a1\u30a4\u30eb\u306b\u5909\u63db\u3057\u3001Polars \u306e\u30cd\u30a4\u30c6\u30a3\u30d6 CSV \u30ea\u30fc\u30c0\u30fc\u3067\u305d\u308c\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002 <code>read_excel</code> \u3092\u4f7f\u3063\u3066 Excel \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059:</p>  Python <p> <code>read_excel</code> <pre><code>df = pl.read_excel(\"docs/data/path.xlsx\")\n</code></pre></p> <p><code>sheet_name</code> \u5f15\u6570\u3092\u4f7f\u3063\u3066\u3001\u8aad\u307f\u8fbc\u3080\u30b7\u30fc\u30c8\u540d\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u30b7\u30fc\u30c8\u540d\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u6700\u521d\u306e\u30b7\u30fc\u30c8\u304c\u8aad\u307f\u8fbc\u307e\u308c\u307e\u3059\u3002</p>  Python <p> <code>read_excel</code> <pre><code>df = pl.read_excel(\"docs/data/path.xlsx\", sheet_name=\"Sales\")\n</code></pre></p>"},{"location":"user-guide/io/excel/#_2","title":"\u66f8\u304d\u8fbc\u307f","text":"<p>Excel \u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u306b\u306f\u3001\u8ffd\u52a0\u306e\u4f9d\u5b58\u95a2\u4fc2\u3068\u3057\u3066 xlswriter \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python <pre><code>$ pip install xlsxwriter\n</code></pre> <p>Rust Polars \u3067\u306f\u73fe\u5728 Excel \u30d5\u30a1\u30a4\u30eb\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306f\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u304c\u3001 \u3053\u306e\u30af\u30ec\u30fc\u30c8 \u3092\u4f7f\u3063\u3066 Rust \u304b\u3089 Excel \u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u3002</p> <p><code>DataFrame</code> \u3092 Excel \u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\u306b\u306f <code>write_excel</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059:</p>  Python <p> <code>write_excel</code> <pre><code>df = pl.DataFrame({\"foo\": [1, 2, 3], \"bar\": [None, \"bak\", \"baz\"]})\ndf.write_excel(\"docs/data/path.xlsx\")\n</code></pre></p> <p>\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u306e\u540d\u524d\u306f <code>worksheet</code> \u5f15\u6570\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002</p>  Python <p> <code>write_excel</code> <pre><code>df = pl.DataFrame({\"foo\": [1, 2, 3], \"bar\": [None, \"bak\", \"baz\"]})\ndf.write_excel(\"docs/data/path.xlsx\", worksheet=\"Sales\")\n</code></pre></p> <p>Polars \u3067\u306f\u3001\u8907\u6570\u306e\u30b7\u30fc\u30c8\u3084\u66f8\u5f0f\u8a2d\u5b9a\u3092\u6301\u3064\u8c4a\u304b\u306a Excel \u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306f <code>write_excel</code> \u306e API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/io/json/","title":"JSON \u30d5\u30a1\u30a4\u30eb","text":"<p>Polars \u306f\u3001\u6a19\u6e96\u306e JSON \u3068\u6539\u884c\u533a\u5207\u308a JSON (NDJSON) \u306e\u4e21\u65b9\u3092\u8aad\u307f\u66f8\u304d\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/io/json/#_1","title":"\u8aad\u307f\u8fbc\u307f","text":""},{"location":"user-guide/io/json/#json_1","title":"JSON","text":"<p>JSON \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\u306f\u3001\u304a\u99b4\u67d3\u307f\u306e\u64cd\u4f5c\u3067\u3059:</p>  Python Rust <p> <code>read_json</code> <pre><code>df = pl.read_json(\"docs/data/path.json\")\n</code></pre></p> <p> <code>JsonReader</code> \u00b7  Available on feature json <pre><code>use polars::prelude::*;\n\nlet mut file = std::fs::File::open(\"docs/data/path.json\").unwrap();\nlet df = JsonReader::new(&amp;mut file).finish().unwrap();\n</code></pre></p>"},{"location":"user-guide/io/json/#json_2","title":"\u6539\u884c\u533a\u5207\u308a JSON","text":"<p>\u6539\u884c\u3067\u533a\u5207\u3089\u308c\u305f JSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u6a19\u6e96\u306e JSON \u3088\u308a\u3082\u9ad8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306a\u65b9\u6cd5\u3067 Polars \u306b\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>Polars \u306f <code>read_ndjson</code> \u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001NDJSON \u30d5\u30a1\u30a4\u30eb\u3092 <code>DataFrame</code> \u306b\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p>  Python Rust <p> <code>read_ndjson</code> <pre><code>df = pl.read_ndjson(\"docs/data/path.json\")\n</code></pre></p> <p> <code>JsonLineReader</code> \u00b7  Available on feature json <pre><code>let mut file = std::fs::File::open(\"docs/data/path.json\").unwrap();\nlet df = JsonLineReader::new(&amp;mut file).finish().unwrap();\n</code></pre></p>"},{"location":"user-guide/io/json/#_2","title":"\u66f8\u304d\u51fa\u3057","text":"Python Rust <p> <code>write_json</code> \u00b7 <code>write_ndjson</code> <pre><code>df = pl.DataFrame({\"foo\": [1, 2, 3], \"bar\": [None, \"bak\", \"baz\"]})\ndf.write_json(\"docs/data/path.json\")\n</code></pre></p> <p> <code>JsonWriter</code> \u00b7 <code>JsonWriter</code> \u00b7  Available on feature json <pre><code>let mut df = df!(\n    \"foo\" =&gt; &amp;[1, 2, 3],\n    \"bar\" =&gt; &amp;[None, Some(\"bak\"), Some(\"baz\")],\n)\n.unwrap();\n\nlet mut file = std::fs::File::create(\"docs/data/path.json\").unwrap();\n\n// json\nJsonWriter::new(&amp;mut file)\n    .with_json_format(JsonFormat::Json)\n    .finish(&amp;mut df)\n    .unwrap();\n\n// ndjson\nJsonWriter::new(&amp;mut file)\n    .with_json_format(JsonFormat::JsonLines)\n    .finish(&amp;mut df)\n    .unwrap();\n</code></pre></p>"},{"location":"user-guide/io/json/#_3","title":"\u30b9\u30ad\u30e3\u30f3","text":"<p>Polars \u3067\u306f\u3001 \u6539\u884c\u533a\u5207\u308a JSON \u306e\u5165\u529b\u3092 \u30b9\u30ad\u30e3\u30f3 \u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5b9f\u969b\u306e\u89e3\u6790\u3092\u9045\u5ef6\u3055\u305b\u3001\u4ee3\u308f\u308a\u306b <code>LazyFrame</code> \u3068\u547c\u3070\u308c\u308b\u9045\u5ef6\u8a08\u7b97\u306e\u30db\u30eb\u30c0\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>scan_ndjson</code> <pre><code>df = pl.scan_ndjson(\"docs/data/path.json\")\n</code></pre></p> <p> <code>LazyJsonLineReader</code> \u00b7  Available on feature json <pre><code>let lf = LazyJsonLineReader::new(\"docs/data/path.json\")\n    .finish()\n    .unwrap();\n</code></pre></p>"},{"location":"user-guide/io/multiple/","title":"Multiple","text":""},{"location":"user-guide/io/multiple/#_1","title":"\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u6271\u3044","text":"<p>Polars \u306f\u3001\u30cb\u30fc\u30ba\u3068\u30e1\u30e2\u30ea\u8ca0\u8377\u306b\u5fdc\u3058\u3066\u3001\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7570\u306a\u308b\u65b9\u6cd5\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3044\u304f\u3064\u304b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3001\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u4e0e\u3048\u307e\u3057\u3087\u3046:</p>  Python <p> <code>write_csv</code> <pre><code>import polars as pl\n\ndf = pl.DataFrame({\"foo\": [1, 2, 3], \"bar\": [None, \"ham\", \"spam\"]})\n\nfor i in range(5):\n    df.write_csv(f\"docs/data/my_many_files_{i}.csv\")\n</code></pre></p>"},{"location":"user-guide/io/multiple/#dataframe","title":"\u5358\u4e00\u306e <code>DataFrame</code> \u3078\u306e\u8aad\u307f\u8fbc\u307f","text":"<p>\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u5358\u4e00\u306e <code>DataFrame</code> \u306b\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001\u30b0\u30ed\u30d6\u30d1\u30bf\u30fc\u30f3\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p>  Python <p> <code>read_csv</code> <pre><code>df = pl.read_csv(\"docs/data/my_many_files_*.csv\")\nprint(df)\n</code></pre></p> <pre><code>shape: (15, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar  \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 i64 \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 null \u2502\n\u2502 2   \u2506 ham  \u2502\n\u2502 3   \u2506 spam \u2502\n\u2502 1   \u2506 null \u2502\n\u2502 2   \u2506 ham  \u2502\n\u2502 \u2026   \u2506 \u2026    \u2502\n\u2502 2   \u2506 ham  \u2502\n\u2502 3   \u2506 spam \u2502\n\u2502 1   \u2506 null \u2502\n\u2502 2   \u2506 ham  \u2502\n\u2502 3   \u2506 spam \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002 \u4e0b\u8a18\u306e\u3088\u3046\u306b\u3001\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u500b\u5225\u306b\u8aad\u307f\u8fbc\u307e\u308c\u3001\u5358\u4e00\u306e <code>DataFrame</code> \u306b\u30b3\u30f3\u30ad\u30e3\u30c6\u30cd\u30fc\u30c8\u3055\u308c\u307e\u3059\u3002 Polars \u306f\u3053\u306e\u8aad\u307f\u8fbc\u307f\u3092\u4e26\u5217\u5316\u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002</p>  Python <p> <code>show_graph</code> <pre><code>pl.scan_csv(\"docs/data/my_many_files_*.csv\").show_graph()\n</code></pre></p> <p></p>"},{"location":"user-guide/io/multiple/#_2","title":"\u4e26\u5217\u3067\u306e\u8aad\u307f\u53d6\u308a\u3068\u51e6\u7406","text":"<p>\u30d5\u30a1\u30a4\u30eb\u3092\u5358\u4e00\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u5165\u308c\u308b\u5fc5\u8981\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u5404\u30d5\u30a1\u30a4\u30eb\u306e\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u3092\u69cb\u7bc9\u3057\u3001Polars \u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u3067\u4e26\u5217\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p> <p>\u3059\u3079\u3066\u306e\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u5b9f\u884c\u306f\u5b8c\u5168\u306b\u4e26\u5217\u5316\u3055\u308c\u3066\u304a\u308a\u3001\u901a\u4fe1\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002</p>  Python <p> <code>scan_csv</code> <pre><code>import glob\n\nimport polars as pl\n\nqueries = []\nfor file in glob.glob(\"docs/data/my_many_files_*.csv\"):\n    q = pl.scan_csv(file).group_by(\"bar\").agg(pl.len(), pl.sum(\"foo\"))\n    queries.append(q)\n\ndataframes = pl.collect_all(queries)\nprint(dataframes)\n</code></pre></p> <pre><code>[shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 bar  \u2506 len \u2506 foo \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 str  \u2506 u32 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 ham  \u2506 1   \u2506 2   \u2502\n\u2502 spam \u2506 1   \u2506 3   \u2502\n\u2502 null \u2506 1   \u2506 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518, shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 bar  \u2506 len \u2506 foo \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 str  \u2506 u32 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 spam \u2506 1   \u2506 3   \u2502\n\u2502 null \u2506 1   \u2506 1   \u2502\n\u2502 ham  \u2506 1   \u2506 2   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518, shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 bar  \u2506 len \u2506 foo \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 str  \u2506 u32 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 spam \u2506 1   \u2506 3   \u2502\n\u2502 ham  \u2506 1   \u2506 2   \u2502\n\u2502 null \u2506 1   \u2506 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518, shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 bar  \u2506 len \u2506 foo \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 str  \u2506 u32 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 null \u2506 1   \u2506 1   \u2502\n\u2502 ham  \u2506 1   \u2506 2   \u2502\n\u2502 spam \u2506 1   \u2506 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518, shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 bar  \u2506 len \u2506 foo \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 str  \u2506 u32 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 spam \u2506 1   \u2506 3   \u2502\n\u2502 ham  \u2506 1   \u2506 2   \u2502\n\u2502 null \u2506 1   \u2506 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518]\n</code></pre>"},{"location":"user-guide/io/parquet/","title":"Parquet","text":"<p>Polars \u306e <code>DataFrame</code> \u30e1\u30e2\u30ea\u4e0a\u306e\u30c7\u30fc\u30bf\u30ec\u30a4\u30a2\u30a6\u30c8\u304c Parquet \u30d5\u30a1\u30a4\u30eb\u306e\u30c7\u30a3\u30b9\u30af\u4e0a\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u306b\u591a\u304f\u306e\u70b9\u3067\u4f3c\u3066\u3044\u308b\u305f\u3081\u3001 <code>Parquet</code> \u30d5\u30a1\u30a4\u30eb \u306e\u8aad\u307f\u8fbc\u307f\u3084\u66f8\u304d\u8fbc\u307f\u306f\u9ad8\u901f\u3067\u3059\u3002</p> <p>CSV \u3068\u306f\u7570\u306a\u308a\u3001Parquet \u306f\u30ab\u30e9\u30e0\u578b\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u30c7\u30fc\u30bf\u304c\u30ed\u30fc\u5358\u4f4d\u3067\u306f\u306a\u304f\u30ab\u30e9\u30e0\u5358\u4f4d\u3067\u683c\u7d0d\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u30c7\u30fc\u30bf\u306e\u5727\u7e2e\u3068\u9ad8\u901f\u306a\u30c7\u30fc\u30bf\u30a2\u30af\u30bb\u30b9\u3092\u53ef\u80fd\u306b\u3059\u308b\u3001\u3088\u308a\u52b9\u7387\u7684\u306a\u65b9\u6cd5\u3067\u3059\u3002</p>"},{"location":"user-guide/io/parquet/#_1","title":"\u8aad\u307f\u8fbc\u307f","text":"<p><code>read_parquet</code> \u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001 <code>Parquet</code> \u30d5\u30a1\u30a4\u30eb\u3092 <code>DataFrame</code> \u306b\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p>  Python Rust <p> <code>read_parquet</code> <pre><code>df = pl.read_parquet(\"docs/data/path.parquet\")\n</code></pre></p> <p> <code>ParquetReader</code> \u00b7  Available on feature parquet <pre><code>let mut file = std::fs::File::open(\"docs/data/path.parquet\").unwrap();\n\nlet df = ParquetReader::new(&amp;mut file).finish().unwrap();\n</code></pre></p>"},{"location":"user-guide/io/parquet/#_2","title":"\u66f8\u304d\u8fbc\u307f","text":"Python Rust <p> <code>write_parquet</code> <pre><code>df = pl.DataFrame({\"foo\": [1, 2, 3], \"bar\": [None, \"bak\", \"baz\"]})\ndf.write_parquet(\"docs/data/path.parquet\")\n</code></pre></p> <p> <code>ParquetWriter</code> \u00b7  Available on feature parquet <pre><code>let mut df = df!(\n    \"foo\" =&gt; &amp;[1, 2, 3],\n    \"bar\" =&gt; &amp;[None, Some(\"bak\"), Some(\"baz\")],\n)\n.unwrap();\n\nlet mut file = std::fs::File::create(\"docs/data/path.parquet\").unwrap();\nParquetWriter::new(&amp;mut file).finish(&amp;mut df).unwrap();\n</code></pre></p>"},{"location":"user-guide/io/parquet/#_3","title":"\u30b9\u30ad\u30e3\u30f3","text":"<p>Polars \u3067\u306f\u3001 <code>Parquet</code> \u5165\u529b\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5b9f\u969b\u306e\u89e3\u6790\u304c\u9045\u5ef6\u3055\u308c\u3001\u4ee3\u308f\u308a\u306b <code>LazyFrame</code> \u3068\u547c\u3070\u308c\u308b\u9045\u5ef6\u8a08\u7b97\u30db\u30eb\u30c0\u30fc\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002</p>  Python Rust <p> <code>scan_parquet</code> <pre><code>df = pl.scan_parquet(\"docs/data/path.parquet\")\n</code></pre></p> <p> <code>scan_parquet</code> \u00b7  Available on feature parquet <pre><code>let args = ScanArgsParquet::default();\nlet lf = LazyFrame::scan_parquet(\"./file.parquet\", args).unwrap();\n</code></pre></p> <p>\u306a\u305c\u3053\u308c\u304c\u671b\u307e\u3057\u3044\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u3001Polars \u306e\u6700\u9069\u5316\u306b\u3064\u3044\u3066 \u3053\u3061\u3089 \u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u30af\u30e9\u30a6\u30c9\u306b\u4fdd\u5b58\u3055\u308c\u305f <code>Parquet</code> \u30d5\u30a1\u30a4\u30eb\u3092\u30b9\u30ad\u30e3\u30f3\u3059\u308b\u5834\u5408\u3001\u8ff0\u8a9e\u3068\u5c04\u5f71\u306e\u30d7\u30c3\u30b7\u30e5\u30c0\u30a6\u30f3\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u30c7\u30fc\u30bf\u91cf\u3092\u5927\u5e45\u306b\u524a\u6e1b\u3067\u304d\u307e\u3059\u3002\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8\u304b\u3089\u306e Parquet \u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30ad\u30e3\u30f3\u306b\u3064\u3044\u3066\u306f\u3001\u30af\u30e9\u30a6\u30c9\u30b9\u30c8\u30ec\u30fc\u30b8 \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/lazy/","title":"\u9045\u5ef6\u8aad\u307f\u8fbc\u307f(Lazy)","text":"<p>Lazy \u306e\u7ae0\u306f LazyFrames \u3092\u6271\u3046\u305f\u3081\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f LazyFrames \u306e\u4f7f\u3044\u65b9\u3084\u6700\u9069\u5316\u65b9\u6cd5\u306a\u3069\u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306a\u60c5\u5831\u3084\u3001\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306e\u7406\u89e3\u3092\u6df1\u3081\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p> <ul> <li>Lazy API \u306e\u4f7f\u3044\u65b9</li> <li>\u6700\u9069\u5316</li> <li>\u30b9\u30ad\u30fc\u30de</li> <li>\u30af\u30a8\u30ea\u30d7\u30e9\u30f3</li> <li>\u5b9f\u884c</li> <li>\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0</li> </ul>"},{"location":"user-guide/lazy/execution/","title":"\u30af\u30a8\u30ea\u306e\u5b9f\u884c","text":"<p>Reddit \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u30af\u30a8\u30ea\u306e\u4f8b\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059:</p>  Python <p> <code>scan_csv</code> <pre><code>q1 = (\n    pl.scan_csv(\"docs/data/reddit.csv\")\n    .with_columns(pl.col(\"name\").str.to_uppercase())\n    .filter(pl.col(\"comment_karma\") &gt; 0)\n)\n</code></pre></p> <p>\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092 Reddit CSV \u3067\u5b9f\u884c\u3057\u3066\u3082\u3001\u30af\u30a8\u30ea\u306f\u8a55\u4fa1\u3055\u308c\u307e\u305b\u3093\u3002\u305d\u306e\u4ee3\u308f\u308a\u3001Polars \u306f\u5404\u884c\u306e\u30b3\u30fc\u30c9\u3092\u53d6\u308a\u8fbc\u307f\u3001\u5185\u90e8\u30af\u30a8\u30ea\u30b0\u30e9\u30d5\u306b\u8ffd\u52a0\u3057\u3001\u30af\u30a8\u30ea\u30b0\u30e9\u30d5\u3092\u6700\u9069\u5316\u3057\u307e\u3059\u3002</p> <p>\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001Polars \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6700\u9069\u5316\u3055\u308c\u305f\u30af\u30a8\u30ea\u30b0\u30e9\u30d5\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/lazy/execution/#_2","title":"\u5b8c\u5168\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u5b9f\u884c","text":"<p>\u30af\u30a8\u30ea\u3092\u5b8c\u5168\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u5b9f\u884c\u3059\u308b\u306b\u306f\u3001\u30af\u30a8\u30ea\u306e <code>.collect</code> \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002</p>  Python <p> <code>scan_csv</code> \u00b7 <code>collect</code> <pre><code>q4 = (\n    pl.scan_csv(f\"docs/data/reddit.csv\")\n    .with_columns(pl.col(\"name\").str.to_uppercase())\n    .filter(pl.col(\"comment_karma\") &gt; 0)\n    .collect()\n)\n</code></pre></p> <pre><code>shape: (14_029, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id      \u2506 name                      \u2506 created_utc \u2506 updated_on \u2506 comment_karma \u2506 link_karma \u2502\n\u2502 ---     \u2506 ---                       \u2506 ---         \u2506 ---        \u2506 ---           \u2506 ---        \u2502\n\u2502 i64     \u2506 str                       \u2506 i64         \u2506 i64        \u2506 i64           \u2506 i64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6       \u2506 TAOJIANLONG_JASONBROKEN   \u2506 1397113510  \u2506 1536527864 \u2506 4             \u2506 0          \u2502\n\u2502 17      \u2506 SSAIG_JASONBROKEN         \u2506 1397113544  \u2506 1536527864 \u2506 1             \u2506 0          \u2502\n\u2502 19      \u2506 FDBVFDSSDGFDS_JASONBROKEN \u2506 1397113552  \u2506 1536527864 \u2506 3             \u2506 0          \u2502\n\u2502 37      \u2506 IHATEWHOWEARE_JASONBROKEN \u2506 1397113636  \u2506 1536527864 \u2506 61            \u2506 0          \u2502\n\u2502 \u2026       \u2506 \u2026                         \u2506 \u2026           \u2506 \u2026          \u2506 \u2026             \u2506 \u2026          \u2502\n\u2502 1229384 \u2506 DSFOX                     \u2506 1163177415  \u2506 1536497412 \u2506 44411         \u2506 7917       \u2502\n\u2502 1229459 \u2506 NEOCARTY                  \u2506 1163177859  \u2506 1536533090 \u2506 40            \u2506 0          \u2502\n\u2502 1229587 \u2506 TEHSMA                    \u2506 1163178847  \u2506 1536497412 \u2506 14794         \u2506 5707       \u2502\n\u2502 1229621 \u2506 JEREMYLOW                 \u2506 1163179075  \u2506 1536497412 \u2506 411           \u2506 1063       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u4e0a\u8a18\u3067\u306f\u30011,000\u4e07\u884c\u304b\u3089\u30d7\u30ec\u30c7\u30a3\u30b1\u30fc\u30c8\u306b\u30de\u30c3\u30c1\u3059\u308b\u884c\u304c14,029\u884c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u306e <code>collect</code> \u30e1\u30bd\u30c3\u30c9\u3067\u306f\u3001Polars \u306f\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u30921\u3064\u306e\u30d0\u30c3\u30c1\u3068\u3057\u3066\u51e6\u7406\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30af\u30a8\u30ea\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u30d4\u30fc\u30af\u306b\u9054\u3057\u305f\u6642\u70b9\u3067\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u304c\u4f7f\u7528\u53ef\u80fd\u306a\u30e1\u30e2\u30ea\u306b\u53ce\u307e\u308b\u5fc5\u8981\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p> <p>!!! \u8b66\u544a  <code>LazyFrame</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u518d\u5229\u7528</p> <pre><code>Remember that `LazyFrame`s are query plans i.e. a promise on computation and is not guaranteed to cache common subplans. This means that every time you reuse it in separate downstream queries after it is defined, it is computed all over again. If you define an operation on a `LazyFrame` that doesn't maintain row order (such as a `group_by`), then the order will also change every time it is run. To avoid this, use `maintain_order=True` arguments for such operations.\n</code></pre>"},{"location":"user-guide/lazy/execution/#lazyframe","title":"\u8b66\u544a \u300c<code>LazyFrame</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u518d\u5229\u7528\u300d","text":"<p>Polars \u306f\u3001streaming mode \u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u30d0\u30c3\u30c1\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u30e2\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001 <code>collect</code> \u306b <code>streaming=True</code> \u5f15\u6570\u3092\u6e21\u3057\u307e\u3059\u3002</p>  Python <p> <code>scan_csv</code> \u00b7 <code>collect</code> <pre><code>q5 = (\n    pl.scan_csv(f\"docs/data/reddit.csv\")\n    .with_columns(pl.col(\"name\").str.to_uppercase())\n    .filter(pl.col(\"comment_karma\") &gt; 0)\n    .collect(streaming=True)\n)\n</code></pre></p> <p>\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u306e\u8a73\u7d30\u3092\u53c2\u7167\u3002</p>"},{"location":"user-guide/lazy/execution/#_3","title":"\u90e8\u5206\u7684\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u5b9f\u884c","text":"<p>\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3066\u30af\u30a8\u30ea\u3092\u66f8\u3044\u305f\u308a\u3001\u6700\u9069\u5316\u3057\u305f\u308a\u3001\u30c1\u30a7\u30c3\u30af\u3057\u305f\u308a\u3057\u3066\u3044\u308b\u3068\u304d\u306b\u3001\u5229\u7528\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u3092\u3059\u3079\u3066\u30af\u30a8\u30ea\u3059\u308b\u3068\u3001\u958b\u767a\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u4ee3\u308f\u308a\u306b <code>.fetch</code> \u30e1\u30bd\u30c3\u30c9\u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002<code>.fetch</code> \u30e1\u30bd\u30c3\u30c9\u306f <code>n_rows</code> \u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u3001\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304b\u3089\u305d\u306e\u884c\u6570\u3092 <code>fetch</code> \u3057\u3088\u3046\u3068\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001Lazy API\u306f\u30af\u30a8\u30ea\u306e\u5404\u6bb5\u968e\u3067\u884c\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u306a\u3044\u305f\u3081\u3001\u884c\u6570\u3092\u4fdd\u8a3c\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3067\u3059\u3002</p> <p>\u3053\u3053\u3067\u306f\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304b\u3089100\u884c\u3092 <code>.fetch</code> \u3057\u3001predicate \u3092\u9069\u7528\u3057\u3066\u3044\u307e\u3059\u3002</p>  Python <p> <code>scan_csv</code> \u00b7 <code>collect</code> \u00b7 <code>fetch</code> <pre><code>q9 = (\n    pl.scan_csv(f\"docs/data/reddit.csv\")\n    .with_columns(pl.col(\"name\").str.to_uppercase())\n    .filter(pl.col(\"comment_karma\") &gt; 0)\n    .fetch(n_rows=int(100))\n)\n</code></pre></p> <pre><code>shape: (27, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id    \u2506 name                      \u2506 created_utc \u2506 updated_on \u2506 comment_karma \u2506 link_karma \u2502\n\u2502 ---   \u2506 ---                       \u2506 ---         \u2506 ---        \u2506 ---           \u2506 ---        \u2502\n\u2502 i64   \u2506 str                       \u2506 i64         \u2506 i64        \u2506 i64           \u2506 i64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6     \u2506 TAOJIANLONG_JASONBROKEN   \u2506 1397113510  \u2506 1536527864 \u2506 4             \u2506 0          \u2502\n\u2502 17    \u2506 SSAIG_JASONBROKEN         \u2506 1397113544  \u2506 1536527864 \u2506 1             \u2506 0          \u2502\n\u2502 19    \u2506 FDBVFDSSDGFDS_JASONBROKEN \u2506 1397113552  \u2506 1536527864 \u2506 3             \u2506 0          \u2502\n\u2502 37    \u2506 IHATEWHOWEARE_JASONBROKEN \u2506 1397113636  \u2506 1536527864 \u2506 61            \u2506 0          \u2502\n\u2502 \u2026     \u2506 \u2026                         \u2506 \u2026           \u2506 \u2026          \u2506 \u2026             \u2506 \u2026          \u2502\n\u2502 77763 \u2506 LUNCHY                    \u2506 1137599510  \u2506 1536528275 \u2506 65            \u2506 0          \u2502\n\u2502 77765 \u2506 COMPOSTELLAS              \u2506 1137474000  \u2506 1536528276 \u2506 6             \u2506 0          \u2502\n\u2502 77766 \u2506 GENERICBOB                \u2506 1137474000  \u2506 1536528276 \u2506 291           \u2506 14         \u2502\n\u2502 77768 \u2506 TINHEADNED                \u2506 1139665457  \u2506 1536497404 \u2506 4434          \u2506 103        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/lazy/optimizations/","title":"\u6700\u9069\u5316","text":"<p>Polars \u306e Lazy API \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001Polars \u306f\u30af\u30a8\u30ea\u306b\u5bfe\u3057\u3066\u3044\u304f\u3064\u304b\u306e\u6700\u9069\u5316\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u4e2d\u306b\u306f\u3001\u524d\u3082\u3063\u3066\u5b9f\u884c\u3055\u308c\u308b\u3082\u306e\u3082\u3042\u308c\u3070\u3001 \u30de\u30c6\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u305f\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304d\u305f\u3068\u304d\u306b\u3001\u305d\u306e\u6642\u70b9\u3067\u6c7a\u5b9a\u3055\u308c\u308b\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u306f\u3001Polars \u306b\u3088\u3063\u3066\u5b9f\u884c\u3055\u308c\u308b\u6700\u9069\u5316\u306e\u6982\u8981\u3001\u5b9f\u884c\u5185\u5bb9\u3001\u5b9f\u884c\u983b\u5ea6\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p> Optimization Explanation runs Predicate pushdown \u53ef\u80fd\u306a\u9650\u308a\u65e9\u304f\uff0f\u30b9\u30ad\u30e3\u30f3\u30ec\u30d9\u30eb\u3067\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3059\u308b\u3002 1 \u56de Projection pushdown \u30b9\u30ad\u30e3\u30f3\u30ec\u30d9\u30eb\u3067\u5fc5\u8981\u306a\u5217\u306e\u307f\u3092\u9078\u629e\u3059\u308b\u3002 1 \u56de Slice pushdown \u30b9\u30ad\u30e3\u30f3\u30ec\u30d9\u30eb\u304b\u3089\u5fc5\u8981\u306a\u30b9\u30e9\u30a4\u30b9\u3060\u3051\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3002\u30b9\u30e9\u30a4\u30b9\u3055\u308c\u305f\u51fa\u529b\u3092\u5b9f\u4f53\u5316\u3057\u306a\u3044\uff08\u4f8b\uff1ajoin.head(10)\uff09\u3002 1 \u56de Common subplan elimination \u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u5185\u306e\u8907\u6570\u306e\u30b5\u30d6\u30c4\u30ea\u30fc\u3067\u4f7f\u7528\u3055\u308c\u308b\u30b5\u30d6\u30c4\u30ea\u30fc/\u30d5\u30a1\u30a4\u30eb\u30b9\u30ad\u30e3\u30f3\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u307e\u3059\u3002 1 \u56de Simplify expressions \u5b9a\u6570\u306e\u6298\u308a\u305f\u305f\u307f\u3084\u3001\u9ad8\u4fa1\u306a\u6f14\u7b97\u3092\u3088\u308a\u9ad8\u901f\u306a\u4ee3\u66ff\u6f14\u7b97\u306b\u7f6e\u304d\u63db\u3048\u308b\u306a\u3069\u3001\u69d8\u3005\u306a\u6700\u9069\u5316\u3057\u307e\u3059\u3002 \u5b9a\u70b9\u307e\u3067 Join ordering \u30e1\u30e2\u30ea\u3078\u306e\u8ca0\u62c5\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u6700\u521d\u306b\u5b9f\u884c\u3055\u308c\u308b\u3079\u304d\u7d50\u5408\u306e\u679d\u3092\u63a8\u5b9a\u3059\u308b\u3002 1 \u56de Type coercion \u6f14\u7b97\u304c\u6210\u529f\u3057\u3001\u5fc5\u8981\u6700\u5c0f\u9650\u306e\u30e1\u30e2\u30ea\u3067\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u578b\u3092\u5f37\u5236\u3059\u308b\u3002 \u5b9a\u70b9\u307e\u3067 Cardinality estimation \u6700\u9069\u306a\u30b0\u30eb\u30fc\u30d7\u5316\u6226\u7565\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306b\u30ab\u30fc\u30c7\u30a3\u30ca\u30ea\u30c6\u30a3\u3092\u63a8\u5b9a\u3059\u308b\u3002 0/n \u56de; \u30af\u30a8\u30ea\u306b\u4f9d\u5b58"},{"location":"user-guide/lazy/query-plan/","title":"\u30af\u30a8\u30ea\u30d7\u30e9\u30f3","text":"<p>Polars\u3067\u306f\u3001Lazy \u30af\u30a8\u30ea\u306b\u306f\u4ee5\u4e0b\u306e2\u3064\u304c\u3042\u308a\u307e\u3059:</p> <ul> <li>\u63d0\u4f9b\u3057\u305f\u30b3\u30fc\u30c9\u306e\u624b\u9806\u30bb\u30c3\u30c8\u306e\u307e\u307e\u306e\u975e\u6700\u9069\u5316\u30d7\u30e9\u30f3</li> <li>\u30af\u30a8\u30ea\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306b\u3088\u308b\u5909\u66f4\u3092\u52a0\u3048\u305f\u6700\u9069\u5316\u30d7\u30e9\u30f3</li> </ul> <p>\u975e\u6700\u9069\u5316\u30d7\u30e9\u30f3\u3068\u6700\u9069\u5316\u30d7\u30e9\u30f3\u306e\u4e21\u65b9\u3092\u3001\u8996\u899a\u5316\u3084\u6587\u5b57\u5217\u51fa\u529b\u3067\u7406\u89e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u30af\u30a8\u30ea\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046:</p>  Python <pre><code>q1 = (\n    pl.scan_csv(\"docs/data/reddit.csv\")\n    .with_columns(pl.col(\"name\").str.to_uppercase())\n    .filter(pl.col(\"comment_karma\") &gt; 0)\n)\n</code></pre> <p></p>"},{"location":"user-guide/lazy/query-plan/#_2","title":"\u975e\u6700\u9069\u5316\u30af\u30a8\u30ea\u30d7\u30e9\u30f3","text":""},{"location":"user-guide/lazy/query-plan/#graphviz","title":"Graphviz \u306b\u3088\u308b\u8996\u899a\u5316","text":"<p>\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u306e\u8996\u899a\u5316\u306b\u306f\u3001Graphviz\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001PATH\u306b\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u307e\u305a\u3001<code>optimized=False</code>\u3092\u8a2d\u5b9a\u3057\u3066\u975e\u6700\u9069\u5316\u30d7\u30e9\u30f3\u3092\u8996\u899a\u5316\u3057\u307e\u3059\u3002</p>  Python <p> <code>show_graph</code> <pre><code>q1.show_graph(optimized=False)\n</code></pre></p> <p></p> <p>\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u306e\u8996\u899a\u5316\u306f\u3001\u4e0b\u304b\u3089\u4e0a\u306b\u5411\u3051\u3066\u8aad\u307f\u307e\u3059\u3002\u8996\u899a\u5316\u3067\u306f:</p> <ul> <li>\u5404\u30dc\u30c3\u30af\u30b9\u304c\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u306e\u6bb5\u968e\u3092\u8868\u3057\u3066\u3044\u307e\u3059</li> <li><code>sigma</code>\u306f<code>SELECTION</code>\u3092\u8868\u3057\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u6761\u4ef6\u3092\u793a\u3057\u3066\u3044\u307e\u3059</li> <li><code>pi</code>\u306f<code>PROJECTION</code>\u3092\u8868\u3057\u3001\u5217\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3092\u9078\u629e\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u307e\u3059</li> </ul>"},{"location":"user-guide/lazy/query-plan/#_3","title":"\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u306e\u51fa\u529b","text":"<p><code>explain(optimized=False)</code>\u3067\u975e\u6700\u9069\u5316\u30d7\u30e9\u30f3\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p>  Python <p> <code>explain</code> <pre><code>q1.explain(optimized=False)\n</code></pre></p> <p></p> <pre><code>FILTER [(col(\"comment_karma\")) &gt; (0)] FROM WITH_COLUMNS:\n [col(\"name\").str.uppercase()]\n\n    CSV SCAN data/reddit.csv\n    PROJECT */6 COLUMNS\n</code></pre> <p>\u51fa\u529b\u3055\u308c\u305f\u30d7\u30e9\u30f3\u3082\u3001\u4e0b\u304b\u3089\u4e0a\u306b\u5411\u3051\u3066\u8aad\u307f\u307e\u3059\u3002\u3053\u306e\u975e\u6700\u9069\u5316\u30d7\u30e9\u30f3\u306f\u6982\u306d\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059:</p> <ul> <li><code>data/reddit.csv</code>\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3080</li> <li>6\u3064\u306e\u5217\u3059\u3079\u3066(PROJECT */6 COLUMNS \u306e\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9*\u306f\u5168\u5217\u3092\u610f\u5473\u3059\u308b)\u3092\u8aad\u307f\u8fbc\u3080</li> <li><code>name</code>\u5217\u3092\u5927\u6587\u5b57\u306b\u5909\u63db\u3059\u308b</li> <li><code>comment_karma</code>\u5217\u306b\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3059\u308b</li> </ul>"},{"location":"user-guide/lazy/query-plan/#_4","title":"\u6700\u9069\u5316\u30af\u30a8\u30ea\u30d7\u30e9\u30f3","text":"<p>\u6b21\u306b\u3001<code>show_graph</code>\u3067\u6700\u9069\u5316\u30d7\u30e9\u30f3\u3092\u8996\u899a\u5316\u3057\u307e\u3059\u3002</p>  Python <p> <code>show_graph</code> <pre><code>q1.show_graph()\n</code></pre></p> <p></p> <p><code>explain</code>\u3067\u6700\u9069\u5316\u30d7\u30e9\u30f3\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p>  Python <p> <code>explain</code> <pre><code>q1.explain()\n</code></pre></p> <pre><code> WITH_COLUMNS:\n [col(\"name\").str.uppercase()]\n\n    CSV SCAN data/reddit.csv\n    PROJECT */6 COLUMNS\n    SELECTION: [(col(\"comment_karma\")) &gt; (0)]\n</code></pre> <p>\u6700\u9069\u5316\u30d7\u30e9\u30f3\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059:</p> <ul> <li>Reddit\u306eCSV\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080</li> <li>\u884c\u5358\u4f4d\u3067CSV\u3092\u8aad\u307f\u8fbc\u307f\u306a\u304c\u3089\u3001<code>comment_karma</code>\u5217\u306b\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3059\u308b</li> <li><code>name</code>\u5217\u3092\u5927\u6587\u5b57\u306b\u5909\u63db\u3059\u308b</li> </ul> <p>\u3053\u306e\u5834\u5408\u3001\u30af\u30a8\u30ea\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u306f\u3001\u30e1\u30e2\u30ea\u4e0a\u306b\u5168\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u304b\u3089\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001CSV\u306e\u8aad\u307f\u8fbc\u307f\u6642\u306b\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\u3053\u308c\u306f_Predicate Pushdown_\u3068\u547c\u3070\u308c\u308b\u6700\u9069\u5316\u3067\u3059\u3002</p>"},{"location":"user-guide/lazy/schemas/","title":"\u30b9\u30ad\u30fc\u30de","text":"<p>Polars \u306e <code>DataFrame</code> \u307e\u305f\u306f <code>LazyFrame</code> \u306e\u30b9\u30ad\u30fc\u30de\u306f\u3001\u5217\u306e\u540d\u524d\u3068\u30c7\u30fc\u30bf\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002 <code>DataFrame</code> \u307e\u305f\u306f <code>LazyFrame</code> \u306e <code>.schema</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30b9\u30ad\u30fc\u30de\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p>  Python <p> <code>DataFrame</code> \u00b7 <code>lazy</code> <pre><code>q3 = pl.DataFrame({\"foo\": [\"a\", \"b\", \"c\"], \"bar\": [0, 1, 2]}).lazy()\n\nprint(q3.schema)\n</code></pre></p> <pre><code>OrderedDict({'foo': String, 'bar': Int64})\n</code></pre> <p>\u30b9\u30ad\u30fc\u30de\u306f\u3001Lazy API \u3067\u91cd\u8981\u306a\u5f79\u5272\u3092\u679c\u305f\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/lazy/schemas/#lazy-api","title":"Lazy API \u3067\u306e\u30bf\u30a4\u30d7\u30c1\u30a7\u30c3\u30af","text":"<p>Lazy API \u306e\u5229\u70b9\u306e 1 \u3064\u306f\u3001Polars \u304c\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u524d\u306b\u30b9\u30ad\u30fc\u30de\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u306e\u30c1\u30a7\u30c3\u30af\u306f\u3001Lazy \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u884c\u308f\u308c\u307e\u3059\u3002</p> <p>\u6574\u6570\u306e <code>bar</code> \u5217\u306b <code>.round</code> \u5f0f\u3092\u547c\u3073\u51fa\u3059\u4ee5\u4e0b\u306e\u7c21\u5358\u306a\u4f8b\u3067\u3001\u3053\u306e\u4ed5\u7d44\u307f\u304c\u308f\u304b\u308a\u307e\u3059\u3002</p>  Python <p> <code>lazy</code> \u00b7 <code>with_columns</code> <pre><code>q4 = (\n    pl.DataFrame({\"foo\": [\"a\", \"b\", \"c\"], \"bar\": [0, 1, 2]})\n    .lazy()\n    .with_columns(pl.col(\"bar\").round(0))\n)\n</code></pre></p> <p><code>.round</code> \u5f0f\u306f\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u306e\u5217\u3067\u306e\u307f\u6709\u52b9\u3067\u3059\u3002\u6574\u6570\u5217\u306b <code>.round</code> \u3092\u547c\u3073\u51fa\u3059\u3068\u3001<code>collect</code> \u3067\u30af\u30a8\u30ea\u3092\u8a55\u4fa1\u3057\u305f\u3068\u304d\u306b <code>InvalidOperationError</code> \u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3053\u306e\u30b9\u30ad\u30fc\u30de\u30c1\u30a7\u30c3\u30af\u306f\u3001\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u524d\u306e <code>collect</code> \u306e\u547c\u3073\u51fa\u3057\u6642\u306b\u884c\u308f\u308c\u307e\u3059\u3002</p>  Python <pre><code>try:\n    print(q4.collect())\nexcept Exception as e:\n    print(e)\n</code></pre> <pre><code>`round` operation not supported for dtype `i64`\n</code></pre> <p>\u3053\u306e\u30af\u30a8\u30ea\u3092\u30a4\u30fc\u30ac\u30fc\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u30a8\u30e9\u30fc\u306f\u6700\u521d\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u30c7\u30fc\u30bf\u304c\u51e6\u7406\u3055\u308c\u305f\u5f8c\u306b\u306e\u307f\u898b\u3064\u304b\u308a\u307e\u3059\u3002</p> <p>Lazy \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001Polars \u306f\u6642\u9593\u306e\u304b\u304b\u308b\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u524d\u306b\u3001\u6f5c\u5728\u7684\u306a <code>InvalidOperationError</code> \u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/lazy/schemas/#lazy-api_1","title":"Lazy API \u306b\u306f\u30b9\u30ad\u30fc\u30de\u304c\u5fc5\u8981","text":"<p>Lazy API \u3067\u306f\u3001Polars \u306e\u30af\u30a8\u30ea\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u304c\u30af\u30a8\u30ea\u30d7\u30e9\u30f3\u306e\u3042\u3089\u3086\u308b\u30b9\u30c6\u30c3\u30d7\u3067\u30b9\u30ad\u30fc\u30de\u3092\u63a8\u6e2c\u3067\u304d\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u4e8b\u524d\u306b\u30b9\u30ad\u30fc\u30de\u304c\u5206\u304b\u3089\u306a\u3044\u64cd\u4f5c\u306f Lazy API \u3067\u4f7f\u3048\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p> <p>\u4e8b\u524d\u306b\u30b9\u30ad\u30fc\u30de\u304c\u5206\u304b\u3089\u306a\u3044\u64cd\u4f5c\u306e\u5178\u578b\u4f8b\u306f <code>.pivot</code> \u64cd\u4f5c\u3067\u3059\u3002<code>.pivot</code> \u3067\u306f\u3001\u65b0\u3057\u3044\u5217\u540d\u304c\u3042\u308b\u5217\u306e\u30c7\u30fc\u30bf\u304b\u3089\u6c7a\u307e\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u5217\u540d\u306f\u4e8b\u524d\u306b\u5206\u304b\u3089\u306a\u3044\u305f\u3081\u3001<code>.pivot</code> \u306f Lazy API \u3067\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002</p>"},{"location":"user-guide/lazy/schemas/#lazy-api_2","title":"Lazy API \u3067\u4f7f\u3048\u306a\u3044\u64cd\u4f5c\u3078\u306e\u5bfe\u51e6","text":"<p>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b Lazy API \u3067\u4f7f\u3048\u306a\u3044\u64cd\u4f5c\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u3001\u901a\u5e38\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u306e\u304c\u6700\u5584\u3067\u3059:</p> <ul> <li>\u305d\u306e\u64cd\u4f5c\u307e\u3067\u306f Lazy \u30e2\u30fc\u30c9\u3067\u5b9f\u884c</li> <li><code>.collect</code> \u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9f\u884c\u3057\u3001<code>DataFrame</code> \u3092\u5177\u4f53\u5316</li> <li><code>DataFrame</code> \u3067\u975e Lazy \u306e\u64cd\u4f5c\u3092\u5b9f\u884c</li> <li>\u51fa\u529b\u3092\u518d\u3073 <code>LazyFrame</code> \u306b\u5909\u63db (<code>lazy</code>) \u3057\u3001Lazy \u30e2\u30fc\u30c9\u3067\u7d9a\u884c</li> <li><code>.filter</code> \u306a\u3069\u306e\u64cd\u4f5c\u3092\u884c\u3046</li> <li>\u6700\u5f8c\u306b <code>.collect</code> \u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3001<code>DataFrame</code> \u3092\u53d6\u5f97</li> </ul> <p>\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u3053\u306e\u624b\u9806\u3092\u793a\u3057\u3066\u3044\u307e\u3059:</p> <ul> <li>\u7c21\u5358\u306a <code>DataFrame</code> \u3092\u4f5c\u6210</li> <li><code>.lazy</code> \u3067 <code>LazyFrame</code> \u306b\u5909\u63db</li> <li><code>.with_columns</code> \u3067\u5909\u63db</li> <li><code>.collect</code> \u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057 <code>DataFrame</code> \u3092\u53d6\u5f97</li> <li><code>DataFrame</code> \u3067 <code>.pivot</code> \u3092\u5b9f\u884c</li> <li>\u518d\u3073 <code>LazyFrame</code> \u306b\u5909\u63db (<code>lazy</code>)</li> <li><code>.filter</code> \u3092\u5b9f\u884c</li> <li>\u6700\u5f8c\u306b <code>.collect</code> \u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057 <code>DataFrame</code> \u3092\u53d6\u5f97</li> </ul>  Python <p> <code>collect</code> \u00b7 <code>pivot</code> \u00b7 <code>filter</code> <pre><code>lazy_eager_query = (\n    pl.DataFrame(\n        {\n            \"id\": [\"a\", \"b\", \"c\"],\n            \"month\": [\"jan\", \"feb\", \"mar\"],\n            \"values\": [0, 1, 2],\n        }\n    )\n    .lazy()\n    .with_columns((2 * pl.col(\"values\")).alias(\"double_values\"))\n    .collect()\n    .pivot(\n        index=\"id\", columns=\"month\", values=\"double_values\", aggregate_function=\"first\"\n    )\n    .lazy()\n    .filter(pl.col(\"mar\").is_null())\n    .collect()\n)\nprint(lazy_eager_query)\n</code></pre></p> <pre><code>shape: (2, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 jan  \u2506 feb  \u2506 mar  \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 0    \u2506 null \u2506 null \u2502\n\u2502 b   \u2506 null \u2506 2    \u2506 null \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/lazy/streaming/","title":"\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0(Streaming)","text":"<p> Under Construction </p> <p>This section is still under development. Want to help out? Consider contributing and making a pull request to our repository. Please read our contributing guide on how to proceed.</p>"},{"location":"user-guide/lazy/using/","title":"\u4f7f\u7528\u65b9\u6cd5","text":"<p>Lazy API \u3092\u4f7f\u3046\u3068\u3001Polars \u306f\u5404\u30af\u30a8\u30ea\u3092\u884c\u3054\u3068\u306b\u5b9f\u884c\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30af\u30a8\u30ea\u5168\u4f53\u3092\u30a8\u30f3\u30c9\u30c4\u30fc\u30a8\u30f3\u30c9\u3067\u51e6\u7406\u3057\u307e\u3059\u3002Polars \u3092\u6700\u5927\u9650\u306b\u6d3b\u7528\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u7406\u7531\u304b\u3089 Lazy API \u3092\u4f7f\u3046\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\uff1a</p> <ul> <li>Polars \u304c\u30af\u30a8\u30ea\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u5229\u7528\u3057\u3001\u81ea\u52d5\u30af\u30a8\u30ea\u6700\u9069\u5316\u304c\u3067\u304d\u307e\u3059\u3002</li> <li>\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u30e1\u30e2\u30ea\u4ee5\u4e0a\u306e\u30b5\u30a4\u30ba\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u6271\u3048\u307e\u3059\u3002</li> <li>\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u524d\u306b\u30b9\u30ad\u30fc\u30de\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3067\u304d\u307e\u3059\u3002</li> </ul> <p>\u3053\u3053\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u307e\u305f\u306f\u65e2\u5b58\u306e <code>DataFrame</code> \u304b\u3089 Lazy API \u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/lazy/using/#lazy-api","title":"\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Lazy API\u3092\u4f7f\u3046","text":"<p>\u30af\u30a8\u30ea\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u304c\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3080\u30c7\u30fc\u30bf\u91cf\u3092\u524a\u6e1b\u3067\u304d\u308b\u305f\u3081\u3001\u7406\u60f3\u7684\u306b\u306f\u30d5\u30a1\u30a4\u30eb\u304b\u3089 Lazy API \u3092\u4f7f\u3046\u306e\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>Reddit \u306e CSV \u30c7\u30fc\u30bf\u304b\u3089 Lazy \u30af\u30a8\u30ea\u3092\u4f5c\u6210\u3057\u3001\u3044\u304f\u3064\u304b\u306e\u5909\u63db\u3092\u9069\u7528\u3057\u307e\u3059\u3002</p> <p><code>pl.scan_csv</code> \u304b\u3089\u30af\u30a8\u30ea\u3092\u59cb\u3081\u308b\u3053\u3068\u3067\u3001Lazy API \u3092\u4f7f\u3044\u307e\u3059\u3002</p>  Python <p> <code>scan_csv</code> \u00b7 <code>with_columns</code> \u00b7 <code>filter</code> \u00b7 <code>col</code> <pre><code>q1 = (\n    pl.scan_csv(f\"docs/data/reddit.csv\")\n    .with_columns(pl.col(\"name\").str.to_uppercase())\n    .filter(pl.col(\"comment_karma\") &gt; 0)\n)\n</code></pre></p> <p><code>pl.scan_</code> \u95a2\u6570\u306f\u3001CSV\u3001IPC\u3001Parquet\u3001JSON \u306a\u3069\u306e\u69d8\u3005\u306a\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u3053\u306e\u30af\u30a8\u30ea\u3067\u306f\u3001Polars \u306b\u4ee5\u4e0b\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059:</p> <ul> <li>Reddit \u306e CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059</li> <li><code>name</code> \u5217\u3092\u5927\u6587\u5b57\u306b\u5909\u63db\u3057\u307e\u3059</li> <li><code>comment_karma</code> \u5217\u306b\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3057\u307e\u3059</li> </ul> <p>\u3053\u306e Lazy \u30af\u30a8\u30ea\u306f\u3053\u306e\u6642\u70b9\u3067\u306f\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002Lazy \u30af\u30a8\u30ea\u306e\u5b9f\u884c\u306b\u3064\u3044\u3066\u306f Lazy \u30af\u30a8\u30ea\u306e\u5b9f\u884c \u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/lazy/using/#dataframe-lazy-api","title":"<code>DataFrame</code> \u304b\u3089 Lazy API\u3092\u4f7f\u3046","text":"<p>Lazy API \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5225\u306e\u65b9\u6cd5\u306f\u3001\u30e1\u30e2\u30ea\u4e0a\u306b\u4f5c\u6210\u6e08\u307f\u306e <code>DataFrame</code> \u306b\u5bfe\u3057\u3066 <code>.lazy</code> \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3059\u3002</p>  Python <p> <code>lazy</code> <pre><code>q3 = pl.DataFrame({\"foo\": [\"a\", \"b\", \"c\"], \"bar\": [0, 1, 2]}).lazy()\n</code></pre></p> <p><code>.lazy</code> \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001<code>DataFrame</code> \u3092 <code>LazyFrame</code> \u306b\u5909\u63db\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/","title":"Pandas \u304b\u3089\u306e\u79fb\u884c","text":"<p>\u3053\u3053\u3067\u306f\u3001Pandas \u306e\u7d4c\u9a13\u304c\u3042\u308b\u4eba\u304c Polars \u3092\u8a66\u3059\u969b\u306b\u77e5\u3063\u3066\u304a\u304f\u3079\u304d \u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u3092\u8aac\u660e\u3057\u307e\u3059\u3002Polars \u3068 Pandas \u305d\u308c\u305e\u308c\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c \u57fa\u790e\u3068\u3057\u3066\u3044\u308b\u6982\u5ff5\u306e\u9055\u3044\u3068\u3001Pandas \u3068\u6bd4\u8f03\u3057\u305f Polars \u306e\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u306e\u9055\u3044\u3092 \u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#polars-pandas","title":"Polars \u3068 Pandas \u306e\u6982\u5ff5\u306e\u9055\u3044","text":""},{"location":"user-guide/migration/pandas/#polars","title":"Polars \u306b\u306f\u30de\u30eb\u30c1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9/\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u306a\u3044","text":"<p>Pandas \u306f\u5404\u884c\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30e9\u30d9\u30eb\u304c\u4ed8\u4e0e\u3055\u308c\u307e\u3059\u3002Polars \u306b\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u306a\u304f\u3001 \u5404\u884c\u306f\u30c6\u30fc\u30d6\u30eb\u306e\u4e2d\u3067\u306e\u6574\u6570\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3055\u308c\u307e\u3059\u3002</p> <p>Polars \u306f\u4e88\u6e2c\u53ef\u80fd\u306a\u7d50\u679c\u3068\u8aad\u307f\u3084\u3059\u3044\u30af\u30a8\u30ea\u3092\u76ee\u6307\u3057\u3066\u304a\u308a\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u305d\u308c\u3089\u306e\u76ee\u7684\u306b\u5f79\u7acb\u305f\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002 \u30af\u30a8\u30ea\u306e\u610f\u5473\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u72b6\u614b\u3084 <code>reset_index</code> \u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u3063\u3066\u5909\u308f\u308b\u3079\u304d\u3067\u306f\u306a\u3044\u3068\u4fe1\u3058\u3066\u3044\u307e\u3059\u3002</p> <p>Polars\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306f\u5e38\u306b2\u6b21\u5143\u306e\u7570\u7a2e\u30c7\u30fc\u30bf\u578b\u306e\u30c6\u30fc\u30d6\u30eb\u3067\u3059\u3002\u30c7\u30fc\u30bf\u578b\u306b\u306f\u30cd\u30b9\u30c8\u304c\u5b58\u5728\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u30c6\u30fc\u30d6\u30eb\u81ea\u4f53\u306b\u306f\u30cd\u30b9\u30c8\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306a\u3069\u306e\u64cd\u4f5c\u306f\u3001\u660e\u793a\u7684\u306b\u3069\u306e\u5217\u306b\u5bfe\u3057\u3066\u884c\u3046\u304b\u3092\u793a\u3059\u5c02\u7528\u306e\u95a2\u6570\u3084\u30e1\u30bd\u30c3\u30c9\uff08\u300c\u52d5\u8a5e\u300d\u306e\u3088\u3046\u306a\u3082\u306e\uff09\u3067\u884c\u3044\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u306a\u3044\u3053\u3068\u3067\u3001\u3088\u308a\u5358\u7d14\u3067\u660e\u793a\u7684\u3067\u8aad\u307f\u3084\u3059\u304f\u3001 \u30a8\u30e9\u30fc\u304c\u5c11\u306a\u304f\u306a\u308b\u3068\u78ba\u4fe1\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u305f\u3060\u3057\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u77e5\u3089\u308c\u3066\u3044\u308b\u300c\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u300d\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306f\u3001Polars \u306e\u6700\u9069\u5316\u6280\u8853\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#polars-apache-arrow-pandas-numpy","title":"Polars \u306f\u30e1\u30e2\u30ea\u4e0a\u3067 Apache Arrow \u306e\u914d\u5217\u3092\u4f7f\u7528\u3059\u308b\u4e00\u65b9\u3001Pandas \u306f NumPy \u914d\u5217\u3092\u4f7f\u7528\u3059\u308b","text":"<p>Polars \u306f\u30e1\u30e2\u30ea\u4e0a\u3067 Apache Arrow \u306e\u914d\u5217\u3092\u4f7f\u7528\u3059\u308b\u4e00\u65b9\u3067\u3001 Pandas \u306f NumPy \u914d\u5217\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002Apache Arrow \u306f\u3001\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\u6642\u9593\u306e\u77ed\u7e2e\u3001 \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306e\u524a\u6e1b\u3001\u8a08\u7b97\u306e\u9ad8\u901f\u5316\u306a\u3069\u3092\u5b9f\u73fe\u3059\u308b \u65b0\u8208\u306e\u5217\u6307\u5411\u30e1\u30e2\u30ea\u5206\u6790\u6a19\u6e96\u3067\u3059\u3002</p> <p>Polars\u306f <code>to_numpy</code> \u30e1\u30bd\u30c3\u30c9\u3067\u30c7\u30fc\u30bf\u3092 NumPy \u5f62\u5f0f\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#polars-pandas_1","title":"Polars \u306f Pandas \u3088\u308a\u3082\u4e26\u5217\u51e6\u7406\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b","text":"<p>Polars\u306f Rust \u306e\u4e26\u884c\u6027\u306e\u5f37\u529b\u306a\u30b5\u30dd\u30fc\u30c8\u3092\u6d3b\u7528\u3057\u3066\u3001\u591a\u304f\u306e\u64cd\u4f5c\u3092\u4e26\u5217\u306b\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002 Pandas \u306b\u3082\u4e00\u90e8\u306e\u64cd\u4f5c\u3067\u4e26\u5217\u51e6\u7406\u304c\u3042\u308b\u3082\u306e\u306e\u3001 \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u6838\u90e8\u5206\u306f\u5358\u4e00\u30b9\u30ec\u30c3\u30c9\u3067\u3042\u308a\u3001\u4e26\u5217\u51e6\u7406\u306e\u305f\u3081\u306b\u306f<code>Dask</code> \u306a\u3069\u306e \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3067\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#polars_1","title":"Polars \u306f\u9045\u5ef6\u8a55\u4fa1\u30af\u30a8\u30ea\u3068\u30af\u30a8\u30ea\u6700\u9069\u5316\u304c\u53ef\u80fd","text":"<p>\u5373\u6642\u8a55\u4fa1\u306f\u3001\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3059\u3050\u306b\u30b3\u30fc\u30c9\u304c\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002 \u9045\u5ef6\u8a55\u4fa1\u306f\u3001\u884c\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u57fa\u790e\u3068\u306a\u308b\u30ed\u30b8\u30c3\u30af\u304c\u30af\u30a8\u30ea\u8a08\u753b\u306b\u8ffd\u52a0\u3055\u308c\u3001 \u8a55\u4fa1\u3055\u308c\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p> <p>Polars \u306f\u5373\u6642\u8a55\u4fa1\u3068\u9045\u5ef6\u8a55\u4fa1\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001 pandas \u306f\u5373\u6642\u8a55\u4fa1\u306e\u307f\u3092 \u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u9045\u5ef6\u8a55\u4fa1\u30e2\u30fc\u30c9\u306f\u5f37\u529b\u3067\u3001Polars \u306f\u30af\u30a8\u30ea\u8a08\u753b\u3092\u8abf\u3079\u3001 \u30af\u30a8\u30ea\u3092\u9ad8\u901f\u5316\u3057\u305f\u308a\u3001\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u524a\u6e1b\u3059\u308b\u65b9\u6cd5\u3092\u898b\u3064\u3051\u308b\u3068\u3001 \u81ea\u52d5\u30af\u30a8\u30ea\u6700\u9069\u5316\u3092\u884c\u3044\u307e\u3059\u3002</p> <p><code>Dask</code> \u3082\u3001\u30af\u30a8\u30ea\u8a08\u753b\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u9045\u5ef6\u8a55\u4fa1\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001<code>Dask</code> \u306f \u30af\u30a8\u30ea\u8a08\u753b\u306b\u5bfe\u3057\u3066\u30af\u30a8\u30ea\u6700\u9069\u5316\u3092\u884c\u3044\u307e\u305b\u3093\u3002</p>"},{"location":"user-guide/migration/pandas/#_1","title":"\u4e3b\u8981\u306a\u69cb\u6587\u306e\u9055\u3044","text":"<p>Pandas \u304b\u3089\u79fb\u884c\u3057\u3066\u304d\u305f\u30e6\u30fc\u30b6\u30fc\u306f\u4e00\u822c\u306b1\u3064\u306e\u3053\u3068\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059...</p> <pre><code>polars != pandas\n</code></pre> <p>\u3082\u3057\u3082\u3042\u306a\u305f\u306e Polars \u306e\u30b3\u30fc\u30c9\u304c Pandas \u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u5834\u5408\u3001\u5b9f\u884c\u306f\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001 \u304a\u305d\u3089\u304f\u9069\u5207\u306a\u901f\u5ea6\u3067\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002</p> <p>\u3044\u304f\u3064\u304b\u306e\u5178\u578b\u7684\u306a Pandas \u30b3\u30fc\u30c9\u3092\u898b\u3066\u3001\u305d\u308c\u3092 Polars \u3067\u3069\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u304b\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"user-guide/migration/pandas/#_2","title":"\u30c7\u30fc\u30bf\u306e\u9078\u629e","text":"<p>Polars \u306b\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u306a\u3044\u305f\u3081\u3001<code>.loc</code> \u3084 <code>iloc</code> \u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u305b\u305a\u3001 <code>SettingWithCopyWarning</code> \u3082 Polars \u306b\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002</p> <p>\u3057\u304b\u3057\u3001Polars \u3067\u30c7\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b\u6700\u826f\u306e\u65b9\u6cd5\u306f\u3001expression API \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u305f\u3068\u3048\u3070\u3001Pandas \u3067\u5217\u3092\u9078\u629e\u3057\u305f\u3044\u5834\u5408\u3001\u6b21\u306e\u3044\u305a\u308c\u304b\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>df['a']\ndf.loc[:,'a']\n</code></pre> <p>\u3057\u304b\u3057\u3001Polars \u3067\u306f <code>.select</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>df.select('a')\n</code></pre> <p>\u5024\u306b\u57fa\u3065\u3044\u3066\u884c\u3092\u9078\u629e\u3057\u305f\u3044\u5834\u5408\u306f\u3001 Polars \u3067 <code>.filter</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a</p> <pre><code>df.filter(pl.col('a') &lt; 10)\n</code></pre> <p>\u4e0b\u8a18\u306e\u5f0f\u306b\u95a2\u3059\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u8ff0\u3079\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u3001Polars \u306f <code>.select</code> \u304a\u3088\u3073 <code>filter</code> \u3067\u306e\u64cd\u4f5c\u3092\u4e26\u5217\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u30c7\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b\u57fa\u6e96\u306e\u5168\u3066\u306e\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3066 \u30af\u30a8\u30ea\u6700\u9069\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#_3","title":"\u9045\u5ef6\u8a55\u4fa1\u3092\u5229\u7528\u3059\u308b","text":"<p>\u9045\u5ef6\u8a55\u4fa1\u30e2\u30fc\u30c9\u3067\u306e\u4f5c\u696d\u306f\u5358\u7d14\u3067\u3042\u308a\u3001Polars \u3067\u306f\u9045\u5ef6\u30e2\u30fc\u30c9\u304c \u30af\u30a8\u30ea\u6700\u9069\u5316\u3092\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3059\u3079\u304d\u3067\u3059\u3002</p> <p>\u9045\u5ef6\u30e2\u30fc\u30c9\u3067\u306e\u5b9f\u884c\u306f\u3001\u6697\u9ed9\u7684\u306b\u9045\u5ef6\u95a2\u6570\uff08<code>scan_csv</code> \u306a\u3069\uff09\u3092\u4f7f\u7528\u3059\u308b\u304b\u3001 \u660e\u793a\u7684\u306b <code>lazy</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u884c\u3048\u307e\u3059\u3002</p> <p>\u6b21\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u4f8b\u3092\u8003\u3048\u307e\u3059\u3002\u30c7\u30a3\u30b9\u30af\u304b\u3089 CSV \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002 CSV \u30d5\u30a1\u30a4\u30eb\u306b\u306f\u6570\u591a\u304f\u306e\u5217\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306f <code>id1</code> \u306e\u5217\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u3001 \u5024\u5217\uff08<code>v1</code>\uff09\u3067\u5408\u8a08\u3092\u51fa\u3057\u305f\u3044\u3060\u3051\u3067\u3059\u3002pandas \u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>df = pd.read_csv(csv_file, usecols=['id1','v1'])\ngrouped_df = df.loc[:,['id1','v1']].groupby('id1').sum('v1')\n</code></pre> <p>Polars \u3067\u306f\u30af\u30a8\u30ea\u3092\u9045\u5ef6\u30e2\u30fc\u30c9\u3067\u69cb\u7bc9\u3057\u3066\u30af\u30a8\u30ea\u6700\u9069\u5316\u3092\u884c\u3044\u3001 \u5373\u6642\u7684\u306a Pandas \u95a2\u6570\u306e <code>read_csv</code> \u3092 \u6697\u9ed9\u7684\u306b\u9045\u5ef6\u3059\u308b Polars \u95a2\u6570\u306e <code>scan_csv</code> \u306b\u7f6e\u304d\u63db\u3048\u3066\u8a55\u4fa1\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>df = pl.scan_csv(csv_file)\ngrouped_df = df.group_by('id1').agg(pl.col('v1').sum()).collect()\n</code></pre> <p>Polars \u306f\u3053\u306e\u30af\u30a8\u30ea\u3092 <code>id1</code> \u304a\u3088\u3073 <code>v1</code> \u5217\u306e\u307f\u304c\u95a2\u9023\u3057\u3066\u3044\u308b\u3068\u7279\u5b9a\u3057\u3001 \u3053\u308c\u3089\u306e\u5217\u306e\u307f\u3092 CSV \u304b\u3089\u8aad\u307f\u8fbc\u3080\u3088\u3046\u6700\u9069\u5316\u3057\u307e\u3059\u30022\u884c\u76ee\u306e\u6700\u5f8c\u3067 <code>.collect</code> \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001\u30af\u30a8\u30ea\u3092\u305d\u306e\u6642\u70b9\u3067\u8a55\u4fa1\u3059\u308b\u3088\u3046 Polars \u306b\u6307\u793a\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u30af\u30a8\u30ea\u3092\u5373\u6642\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u306f\u3001 Polars \u30b3\u30fc\u30c9\u3067 <code>scan_csv</code> \u3092 <code>read_csv</code> \u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u3059\u3002</p> <p>\u9045\u5ef6\u8a55\u4fa1\u306e\u4f7f\u7528\u306b\u3064\u3044\u3066\u306f\u3001 lazy API \u306e\u7ae0\u3067\u8a73\u3057\u304f\u8aad\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#_4","title":"\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u4f7f\u3046","text":"<p>\u5178\u578b\u7684\u306a pandas \u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3001\u9010\u6b21\u7684\u306b\u5b9f\u884c\u3055\u308c\u308b\u8907\u6570\u306e\u30c7\u30fc\u30bf\u5909\u63db\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3057\u304b\u3057\u3001Polars \u3067\u306f\u3053\u308c\u3089\u306e\u5909\u63db\u3092\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066 \u4e26\u5217\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#_5","title":"\u30ab\u30e9\u30e0\u306e\u5272\u308a\u5f53\u3066","text":"<p><code>df</code> \u3068\u3044\u3046 DataFrame \u306b <code>value</code> \u3068\u3044\u3046\u30ab\u30e9\u30e0\u304c\u3042\u308a\u3001 <code>value</code> \u309210\u500d\u3057\u305f <code>tenXValue</code> \u3068\u3044\u3046\u65b0\u3057\u3044\u30ab\u30e9\u30e0\u3001 \u304a\u3088\u3073 <code>value</code> \u5217\u3092100\u500d\u3057\u305f <code>hundredXValue</code> \u3068\u3044\u3046\u65b0\u3057\u3044\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002</p> <p>pandas \u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>df.assign(\n    tenXValue=lambda df_: df_.value * 10,\n    hundredXValue=lambda df_: df_.value * 100\n)\n</code></pre> <p>\u3053\u308c\u3089\u306e\u30ab\u30e9\u30e0\u306e\u5272\u308a\u5f53\u3066\u306f\u9010\u6b21\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002</p> <p>Polars \u3067\u306f <code>with_columns</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff1a</p> <pre><code>df.with_columns(\n    tenXValue=pl.col(\"value\") * 10,\n    hundredXValue=pl.col(\"value\") * 100,\n)\n</code></pre> <p>\u3053\u308c\u3089\u306e\u30ab\u30e9\u30e0\u306e\u5272\u308a\u5f53\u3066\u306f\u5c41\u5165\u308c\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#_6","title":"\u6761\u4ef6\u306b\u57fa\u3065\u304f\u30ab\u30e9\u30e0\u306e\u5272\u308a\u5f53\u3066","text":"<p>\u6b21\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u30ab\u30e9\u30e0 <code>a</code>\u3001<code>b</code>\u3001<code>c</code> \u3092\u6301\u3064 dataframe <code>df</code> \u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002 \u6761\u4ef6\u306b\u57fa\u3065\u3044\u3066\u30ab\u30e9\u30e0 <code>a</code> \u306e\u5024\u3092\u5272\u308a\u5f53\u3066\u3057\u306a\u304a\u3057\u305f\u3044\u3068\u8003\u3048\u307e\u3059\u3002\u30ab\u30e9\u30e0 <code>c</code> \u306e\u5024\u304c 2 \u306b\u7b49\u3057\u3044\u5834\u5408\u3001 \u30ab\u30e9\u30e0 <code>a</code> \u306e\u5024\u3092\u30ab\u30e9\u30e0 <code>b</code> \u306e\u5024\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002</p> <p>pandas \u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>df.assign(a=lambda df_: df_.a.where(df_.c != 2, df_.b))\n</code></pre> <p>\u4e00\u65b9\u3067 Polars \u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>df.with_columns(\n    pl.when(pl.col(\"c\") == 2)\n    .then(pl.col(\"b\"))\n    .otherwise(pl.col(\"a\")).alias(\"a\")\n)\n</code></pre> <p>Polars \u306f <code>if -&gt; then -&gt; otherwise</code> \u306e\u5404\u30d6\u30e9\u30f3\u30c1\u3092\u4e26\u5217\u306b\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306f\u3001\u30d6\u30e9\u30f3\u30c1\u306e\u8a08\u7b97\u304c\u9ad8\u30b3\u30b9\u30c8\u306b\u306a\u308b\u5834\u5408\u306b\u4fa1\u5024\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#_7","title":"\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u3044\u304f\u3064\u304b\u306e\u6761\u4ef6\u306b\u57fa\u3065\u3044\u3066\u4f4f\u5b85\u30c7\u30fc\u30bf\u3092\u6301\u3064 Dataframe <code>df</code> \u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002</p> <p>pandas \u3067\u306f <code>query</code> \u30e1\u30bd\u30c3\u30c9\u306b\u30d6\u30fc\u30eb\u5f0f\u3092\u6e21\u3057\u3066 Dataframe \u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3059\uff1a</p> <pre><code>df.query(\"m2_living &gt; 2500 and price &lt; 300000\")\n</code></pre> <p>\u307e\u305f\u306f\u30de\u30b9\u30af\u3092\u76f4\u63a5\u8a55\u4fa1\u3057\u307e\u3059\uff1a</p> <pre><code>df[(df[\"m2_living\"] &gt; 2500) &amp; (df[\"price\"] &lt; 300000)]\n</code></pre> <p>\u4e00\u65b9\u3067 Polars \u306f <code>filter</code> \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u307e\u3059\uff1a</p> <pre><code>df.filter(\n    (pl.col(\"m2_living\") &gt; 2500) &amp; (pl.col(\"price\") &lt; 300000)\n)\n</code></pre> <p>Polars \u306e\u30af\u30a8\u30ea\u6700\u9069\u5316\u30a8\u30f3\u30b8\u30f3\u306f\u3001\u8907\u6570\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u5225\u3005\u306b\u8a18\u8ff0\u3057\u305f\u3053\u3068\u3092\u691c\u51fa\u3057\u3001 \u6700\u9069\u5316\u3055\u308c\u305f\u8a08\u753b\u3067\u305d\u308c\u3089\u30921\u3064\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u306b\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/pandas/#pandas_1","title":"pandas \u306e\u5909\u63db","text":"<p>pandas \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001<code>transform</code> \u3068\u547c\u3070\u308c\u308b\u30b0\u30eb\u30fc\u30d7\u5316\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u304c\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u5834\u5408\u3001DataFrame <code>df</code> \u304c\u3042\u308a\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u884c\u6570\u3092\u793a\u3059 \u65b0\u3057\u3044\u5217\u304c\u5fc5\u8981\u3067\u3059\u3002</p> <p>pandas \u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>df = pd.DataFrame({\n    \"c\": [1, 1, 1, 2, 2, 2, 2],\n    \"type\": [\"m\", \"n\", \"o\", \"m\", \"m\", \"n\", \"n\"],\n})\n\ndf[\"size\"] = df.groupby(\"c\")[\"type\"].transform(len)\n</code></pre> <p>\u3053\u3053\u3067 pandas \u306f <code>\"c\"</code> \u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3092\u884c\u3044\u3001<code>\"type\"</code> \u30ab\u30e9\u30e0\u3092\u53d6\u308a\u3001\u30b0\u30eb\u30fc\u30d7\u306e\u9577\u3055\u3092\u8a08\u7b97\u3057\u3001 \u305d\u306e\u7d50\u679c\u3092\u5143\u306e <code>DataFrame</code> \u306b\u623b\u3057\u3066\u4ee5\u4e0b\u3092\u751f\u6210\u3057\u307e\u3059\uff1a</p> <pre><code>   c type size\n0  1    m    3\n1  1    n    3\n2  1    o    3\n3  2    m    4\n4  2    m    4\n5  2    n    4\n6  2    n    4\n</code></pre> <p>Polars \u3067\u306f\u540c\u3058\u3053\u3068\u3092 <code>window</code> \u95a2\u6570\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002</p> <pre><code>df.with_columns(\n    pl.col(\"type\").count().over(\"c\").alias(\"size\")\n)\n</code></pre> <pre><code>shape: (7, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 c   \u2506 type \u2506 size \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2502\n\u2502 i64 \u2506 str  \u2506 u32  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 m    \u2506 3    \u2502\n\u2502 1   \u2506 n    \u2506 3    \u2502\n\u2502 1   \u2506 o    \u2506 3    \u2502\n\u2502 2   \u2506 m    \u2506 4    \u2502\n\u2502 2   \u2506 m    \u2506 4    \u2502\n\u2502 2   \u2506 n    \u2506 4    \u2502\n\u2502 2   \u2506 n    \u2506 4    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u5358\u4e00\u306e\u5f0f\u306b\u5168\u3066\u306e\u64cd\u4f5c\u3092\u683c\u7d0d\u3067\u304d\u308b\u305f\u3081\u3001\u8907\u6570\u306e <code>window</code> \u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u308a\u3001 \u7570\u306a\u308b\u30b0\u30eb\u30fc\u30d7\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff01</p> <p>\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u9069\u7528\u3055\u308c\u308bwindow\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306f Polars \u306b\u3088\u3063\u3066\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u308b\u305f\u3081\u3001 \u5358\u4e00\u306e <code>with_columns</code> \u306b\u305d\u308c\u3089\u3092\u683c\u7d0d\u3059\u308b\u3053\u3068\u306f\u4fbf\u5229\u3067\u3042\u308a\u3001\u304b\u3064 \u6700\u9069\u3067\u3059\u3002\u6b21\u306e\u4f8b\u3067\u306f\u3001 <code>\"c\"</code> \u306b\u5bfe\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u7d71\u8a08\u30922\u56de\u8a08\u7b97\u3059\u308b\u30b1\u30fc\u30b9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff1a</p> <pre><code>df.with_columns(\n    pl.col(\"c\").count().over(\"c\").alias(\"size\"),\n    pl.col(\"c\").sum().over(\"type\").alias(\"sum\"),\n    pl.col(\"type\").reverse().over(\"c\").alias(\"reverse_type\")\n)\n</code></pre> <pre><code>shape: (7, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 c   \u2506 type \u2506 size \u2506 sum \u2506 reverse_type \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2506 --- \u2506 ---          \u2502\n\u2502 i64 \u2506 str  \u2506 u32  \u2506 i64 \u2506 str          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 m    \u2506 3    \u2506 5   \u2506 o            \u2502\n\u2502 1   \u2506 n    \u2506 3    \u2506 5   \u2506 n            \u2502\n\u2502 1   \u2506 o    \u2506 3    \u2506 1   \u2506 m            \u2502\n\u2502 2   \u2506 m    \u2506 4    \u2506 5   \u2506 n            \u2502\n\u2502 2   \u2506 m    \u2506 4    \u2506 5   \u2506 n            \u2502\n\u2502 2   \u2506 n    \u2506 4    \u2506 5   \u2506 m            \u2502\n\u2502 2   \u2506 n    \u2506 4    \u2506 5   \u2506 m            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/migration/pandas/#_8","title":"\u6b20\u640d\u30c7\u30fc\u30bf","text":"<p>pandas \u3067\u306f\u3001\u5217\u306e dtype \u306b\u5fdc\u3058\u3066 <code>NaN</code> \u3084 <code>None</code> \u306e\u5024\u3092\u4f7f\u7528\u3057\u3066\u6b20\u640d\u5024\u3092\u793a\u3057\u307e\u3059\u3002\u3055\u3089\u306b\u3001pandas \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e dtype \u307e\u305f\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e nullable \u914d\u5217\u3092\u4f7f\u7528\u3059\u308b\u304b\u306b\u3088\u3063\u3066\u6319\u52d5\u304c\u7570\u306a\u308a\u307e\u3059\u3002Polars \u3067\u306f\u3001\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u578b\u306b\u5bfe\u3057\u3066\u6b20\u640d\u30c7\u30fc\u30bf\u306f <code>null</code> \u5024\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002</p> <p>\u6d6e\u52d5\u5c0f\u6570\u70b9\u306e\u30ab\u30e9\u30e0\u306b\u304a\u3044\u3066\u3001Polars \u306f <code>NaN</code> \u5024\u306e\u4f7f\u7528\u3092\u8a31\u53ef\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e <code>NaN</code> \u5024\u306f\u6b20\u640d\u30c7\u30fc\u30bf\u3068\u306f\u898b\u306a\u3055\u308c\u305a\u3001\u7279\u5225\u306a\u6d6e\u52d5\u5c0f\u6570\u70b9\u5024\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002</p> <p>pandas \u3067\u306f\u3001\u6b20\u640d\u5024\u3092\u6301\u3064\u6574\u6570\u5217\u306f\u3001\u6b20\u640d\u5024\u306e\u305f\u3081\u306b <code>NaN</code> \u5024\u3092\u6301\u3064\u6d6e\u52d5\u5c0f\u6570\u70b9\u5217\u306b\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u307e\u3059\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\u306e null \u3092\u8a31\u5bb9\u3059\u308b\u6574\u6570\u578b\u306e dtype \u3092\u4f7f\u7528\u3057\u306a\u3044\u9650\u308a\uff09\u3002Polars \u3067\u306f\u3001\u6574\u6570\u5217\u306e\u6b20\u640d\u5024\u306f\u5358\u306b <code>null</code> \u5024\u3067\u3042\u308a\u3001\u5217\u306f\u5f15\u304d\u7d9a\u304d\u6574\u6570\u5217\u306e\u307e\u307e\u3067\u3059\u3002</p> <p>\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u6b20\u640d\u30c7\u30fc\u30bf \u30bb\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/migration/pandas/#_9","title":"\u30d1\u30a4\u30d7\u306e\u4f7f\u7528","text":"<p>pandas \u3067\u4e00\u822c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\u306f\u3001<code>pipe</code> \u3092\u5229\u7528\u3057\u3066 <code>DataFrame</code> \u306b\u4f55\u3089\u304b\u306e\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u3053\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3092 Polars \u306b\u305d\u306e\u307e\u307e\u9069\u7528\u3059\u308b\u306e\u306f\u81ea\u7136\u3067\u306f\u306a\u304f\u3001\u6700\u9069\u3067\u306f\u306a\u3044\u306a\u30af\u30a8\u30ea\u8a08\u753b\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u306f\u3001pandas \u3067\u3088\u304f\u898b\u3089\u308c\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p> <pre><code>def add_foo(df: pd.DataFrame) -&gt; pd.DataFrame:\n    df[\"foo\"] = ...\n    return df\n\ndef add_bar(df: pd.DataFrame) -&gt; pd.DataFrame:\n    df[\"bar\"] = ...\n    return df\n\n\ndef add_ham(df: pd.DataFrame) -&gt; pd.DataFrame:\n    df[\"ham\"] = ...\n    return df\n\n(df\n .pipe(add_foo)\n .pipe(add_bar)\n .pipe(add_ham)\n)\n</code></pre> <p>Polars \u3067\u3053\u308c\u3092\u884c\u3046\u3068\u30013\u3064\u306e <code>with_columns</code> \u5f0f\u3092\u4f5c\u6210\u3057\u3066\u3057\u307e\u3044\u3001 Polars \u306b3\u3064\u306e\u30d1\u30a4\u30d7\u3092\u9806\u756a\u306b\u5b9f\u884c\u3055\u305b\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u4e26\u5217\u51e6\u7406\u306f\u4e00\u5207\u5229\u7528\u3055\u308c\u307e\u305b\u3093\u3002</p> <p>Polars \u3067\u540c\u69d8\u306e\u62bd\u8c61\u5316\u3092\u5f97\u308b\u65b9\u6cd5\u306f\u3001\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f\u3001\u5358\u4e00\u306e\u5f0f\u3067\u5b9f\u884c\u3055\u308c\u308b3\u3064\u306e\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3001\u3053\u308c\u306b\u3088\u308a\u4e26\u5217\u5b9f\u884c\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002</p> <pre><code>def get_foo(input_column: str) -&gt; pl.Expr:\n    return pl.col(input_column).some_computation().alias(\"foo\")\n\ndef get_bar(input_column: str) -&gt; pl.Expr:\n    return pl.col(input_column).some_computation().alias(\"bar\")\n\ndef get_ham(input_column: str) -&gt; pl.Expr:\n    return pl.col(input_column).some_computation().alias(\"ham\")\n\n# This single context will run all 3 expressions in parallel\ndf.with_columns(\n    get_ham(\"col_a\"),\n    get_bar(\"col_b\"),\n    get_foo(\"col_c\"),\n)\n</code></pre> <p>\u5f0f\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u5185\u3067\u30b9\u30ad\u30fc\u30de\u304c\u5fc5\u8981\u306a\u5834\u5408\u3001\u5358\u4e00\u306e <code>pipe</code> \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>from collections import OrderedDict\n\ndef get_foo(input_column: str, schema: OrderedDict) -&gt; pl.Expr:\n    if \"some_col\" in schema:\n        # branch_a\n        ...\n    else:\n        # branch b\n        ...\n\ndef get_bar(input_column: str, schema: OrderedDict) -&gt; pl.Expr:\n    if \"some_col\" in schema:\n        # branch_a\n        ...\n    else:\n        # branch b\n        ...\n\ndef get_ham(input_column: str) -&gt; pl.Expr:\n    return pl.col(input_column).some_computation().alias(\"ham\")\n\n# Use pipe (just once) to get hold of the schema of the LazyFrame.\nlf.pipe(lambda lf: lf.with_columns(\n    get_ham(\"col_a\"),\n    get_bar(\"col_b\", lf.schema),\n    get_foo(\"col_c\", lf.schema),\n)\n</code></pre> <p>\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u306e\u3082\u3046\u4e00\u3064\u306e\u5229\u70b9\u306f\u3001\u3053\u308c\u3089\u306e\u95a2\u6570\u304c\u7d44\u307f\u5408\u308f\u305b\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002 \u5f0f\u306f\u9023\u9396\u3055\u305b\u305f\u308a\u90e8\u5206\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u8a2d\u8a08\u306e\u67d4\u8edf\u6027\u304c\u5927\u5e45\u306b\u5411\u4e0a\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/migration/spark/","title":"Apache Spark \u304b\u3089\u306e\u79fb\u884c","text":""},{"location":"user-guide/migration/spark/#api-api","title":"\u30ab\u30e9\u30e0\u30d9\u30fc\u30b9\u306e API \u3068\u884c\u30d9\u30fc\u30b9\u306e API","text":"<p><code>Spark</code> \u306e <code>DataFrame</code> \u306f\u884c\u306e\u96c6\u5408\u306b\u76f8\u5f53\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001Polars \u306e <code>DataFrame</code> \u306f\u30ab\u30e9\u30e0\u306e\u96c6\u5408\u306b\u8fd1\u3044\u3067\u3059\u3002\u3053\u308c\u306f\u3001<code>Spark</code> \u304c\u5404\u884c\u306e\u30c7\u30fc\u30bf\u306e\u95a2\u9023\u6027\u3092\u4fdd\u6301\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001Polars \u3067\u306f <code>Spark</code> \u3067\u306f\u4e0d\u53ef\u80fd\u306a\u65b9\u6cd5\u3067\u5217\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u793a\u3057\u307e\u3059\uff1a</p> <pre><code>import polars as pl\n\ndf = pl.DataFrame({\n    \"foo\": [\"a\", \"b\", \"c\", \"d\", \"d\"],\n    \"bar\": [1, 2, 3, 4, 5],\n})\n\ndfs = spark.createDataFrame(\n    [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"d\", 4),\n        (\"d\", 5),\n    ],\n    schema=[\"foo\", \"bar\"],\n)\n</code></pre>"},{"location":"user-guide/migration/spark/#1-head-sum","title":"\u4f8b1\uff1a <code>head</code> \u3068 <code>sum</code> \u3092\u7d44\u307f\u5408\u308f\u305b\u308b","text":"<p>Polars \u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>df.select(\n    pl.col(\"foo\").sort().head(2),\n    pl.col(\"bar\").filter(pl.col(\"foo\") == \"d\").sum()\n)\n</code></pre> <p>Output:</p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 9   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 b   \u2506 9   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u30ab\u30e9\u30e0 <code>foo</code> \u3068 <code>bar</code> \u306b\u5bfe\u3059\u308b\u5f0f\u306f\u5b8c\u5168\u306b\u72ec\u7acb\u3057\u3066\u3044\u307e\u3059\u3002<code>bar</code> \u306b\u5bfe\u3059\u308b\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u304c\u5358\u4e00\u306e\u5024\u3092\u8fd4\u3059\u305f\u3081\u3001\u305d\u306e\u5024\u306f <code>foo</code> \u306b\u5bfe\u3059\u308b\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u51fa\u529b\u3055\u308c\u308b\u5404\u5024\u306b\u5bfe\u3057\u3066\u7e70\u308a\u8fd4\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u3001<code>a</code> \u3068 <code>b</code> \u306f <code>9</code> \u306e\u5408\u8a08\u3092\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3068\u306f\u95a2\u9023\u304c\u3042\u308a\u307e\u305b\u3093\u3002</p> <p><code>Spark</code> \u3067\u540c\u69d8\u306e\u3053\u3068\u3092\u884c\u3046\u306b\u306f\u3001\u5408\u8a08\u3092\u5225\u9014\u8a08\u7b97\u3057\u3001\u30ea\u30c6\u30e9\u30eb\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>from pyspark.sql.functions import col, sum, lit\n\nbar_sum = (\n    dfs\n    .where(col(\"foo\") == \"d\")\n    .groupBy()\n    .agg(sum(col(\"bar\")))\n    .take(1)[0][0]\n)\n\n(\n    dfs\n    .orderBy(\"foo\")\n    .limit(2)\n    .withColumn(\"bar\", lit(bar_sum))\n    .show()\n)\n</code></pre> <p>Output:</p> <pre><code>+---+---+\n|foo|bar|\n+---+---+\n|  a|  9|\n|  b|  9|\n+---+---+\n</code></pre>"},{"location":"user-guide/migration/spark/#2-2-head","title":"\u4f8b2\uff1a 2\u3064\u306e <code>head</code> \u3092\u7d44\u307f\u5408\u308f\u305b\u308b","text":"<p>Polars \u3067\u306f\u3001\u540c\u3058 DataFrame \u306b\u5bfe\u3057\u3066\u7570\u306a\u308b <code>head</code> \u5f0f\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u304c\u540c\u3058\u6570\u306e\u5024\u3092\u8fd4\u3059\u5834\u5408\u306b\u9650\u308a\u307e\u3059\u3002</p> <pre><code>df.select(\n    pl.col(\"foo\").sort().head(2),\n    pl.col(\"bar\").sort(descending=True).head(2),\n)\n</code></pre> <p>Output:</p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 5   \u2502\n\u251c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u2524\n\u2502 b   \u2506 4   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u3053\u3067\u30822\u3064\u306e <code>head</code> \u5f0f\u306f\u5b8c\u5168\u306b\u72ec\u7acb\u3057\u3066\u304a\u308a\u3001<code>a</code> \u304c <code>5</code> \u306b\u3001<code>b</code> \u304c <code>4</code> \u306b\u5bfe\u5fdc\u3059\u308b\u306e\u306f\u3001\u5f0f\u306b\u3088\u3063\u3066\u51fa\u529b\u3055\u308c\u305f\u4e8c\u3064\u306e\u30ab\u30e9\u30e0\u3092\u4e26\u3079\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u7d14\u7c8b\u306b\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p> <p><code>Spark</code> \u3067\u540c\u69d8\u306e\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u5024\u3092\u7d50\u5408\u3059\u308b\u305f\u3081\u306b\u4eba\u5de5\u7684\u306a\u30ad\u30fc\u3092\u751f\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <pre><code>from pyspark.sql import Window\nfrom pyspark.sql.functions import row_number\n\nfoo_dfs = (\n    dfs\n    .withColumn(\n        \"rownum\",\n        row_number().over(Window.orderBy(\"foo\"))\n    )\n)\n\nbar_dfs = (\n    dfs\n    .withColumn(\n        \"rownum\",\n        row_number().over(Window.orderBy(col(\"bar\").desc()))\n    )\n)\n\n(\n    foo_dfs.alias(\"foo\")\n    .join(bar_dfs.alias(\"bar\"), on=\"rownum\")\n    .select(\"foo.foo\", \"bar.bar\")\n    .limit(2)\n    .show()\n)\n</code></pre> <p>Output:</p> <pre><code>+---+---+\n|foo|bar|\n+---+---+\n|  a|  5|\n|  b|  4|\n+---+---+\n</code></pre>"},{"location":"user-guide/misc/comparison/","title":"\u4ed6\u306e\u30c4\u30fc\u30eb\u3068\u306e\u6bd4\u8f03","text":"<p>Polars \u3068\u540c\u69d8\u306e\u6a5f\u80fd\u3092\u5171\u6709\u3059\u308b\u8907\u6570\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3084\u30c4\u30fc\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u5c02\u9580\u5bb6\u304b\u3089\u306f\u3001\u3069\u306e\u3088\u3046\u306a\u9055\u3044\u304c\u3042\u308b\u306e\u304b\u3068\u3044\u3046\u8cea\u554f\u304c\u3088\u304f\u5bc4\u305b\u3089\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u3044\u304f\u3064\u304b\u306e\u4eba\u6c17\u306a\u30c7\u30fc\u30bf\u51e6\u7406\u30c4\u30fc\u30eb\u3068 Polars \u3068\u306e\u7c21\u5358\u306a\u6bd4\u8f03\u3067\u3042\u308a\u3001\u30c7\u30fc\u30bf\u5c02\u9580\u5bb6\u304c\u3069\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3059\u308b\u304b\u3092\u614e\u91cd\u306b\u6c7a\u5b9a\u3059\u308b\u306e\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>\u3053\u308c\u3089\u306e\u30c4\u30fc\u30eb\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30d9\u30f3\u30c1\u30de\u30fc\u30af\uff08h2oai \u30d9\u30f3\u30c1\u30de\u30fc\u30af\uff09\u306f\u3001Polars \u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u307e\u305f\u306f\u3001\u3088\u308a\u6700\u8fd1\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30afDuckDB \u306b\u3088\u308b\u3082\u306e\u3067\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/misc/comparison/#pandas","title":"Pandas","text":"<p>Pandas \u306f\u3001Python \u306e\u30c7\u30fc\u30bf\u5206\u6790\u306b\u304a\u3044\u3066\u5e83\u304f\u63a1\u7528\u3055\u308c\u3066\u304a\u308a\u3001\u8c4a\u5bcc\u306a\u6a5f\u80fd\u3068\u5f37\u529b\u306a\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30b5\u30dd\u30fc\u30c8\u3067\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u306e\u6027\u8cea\u306e\u305f\u3081\u3001\u4e2d\u301c\u5927\u898f\u6a21\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3068\u30e1\u30e2\u30ea\u4f7f\u7528\u306b\u82e6\u52b4\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u4e00\u65b9\u3001Polars \u306f\u5358\u4e00\u30ce\u30fc\u30c9\u3067\u306e\u9ad8\u6027\u80fd\u306a\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u6700\u9069\u5316\u3055\u308c\u3066\u304a\u308a\u3001\u7279\u306b\u4e2d\u301c\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u64cd\u4f5c\u306b\u304a\u3044\u3066\u901f\u5ea6\u3068\u30e1\u30e2\u30ea\u52b9\u7387\u306e\u5927\u5e45\u306a\u6539\u5584\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u8907\u6570\u306e\u8981\u7d20\u3092\u7d44\u307f\u5408\u308f\u305b\u3084\u3059\u304f\u3001\u304b\u3064\u53b3\u683c\u306a API \u306f\u3001\u8868\u73fe\u529b\u306e\u5411\u4e0a\u3068\u30b9\u30ad\u30fc\u30de\u95a2\u9023\u306e\u30d0\u30b0\u306e\u5c11\u306a\u3055\u3092\u3082\u305f\u3089\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/misc/comparison/#dask","title":"Dask","text":"<p>Dask \u306f\u3001\u5927\u898f\u6a21\u3067\u5206\u6563\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b Pandas \u306e\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u307e\u3059\u3002Dask \u306f Pandas \u306e API \u3092\u6a21\u5023\u3057\u3001Pandas \u30e6\u30fc\u30b6\u30fc\u306b\u99b4\u67d3\u307f\u306e\u3042\u308b\u74b0\u5883\u3092\u63d0\u4f9b\u3059\u308b\u4e00\u65b9\u3001\u4e26\u884c\u51e6\u7406\u3068\u5206\u6563\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u5229\u70b9\u3092\u52a0\u3048\u307e\u3059\u3002</p> <p>Dask \u306f\u30af\u30e9\u30b9\u30bf\u30fc\u5168\u4f53\u3067 Pandas \u306e\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u30b9\u30b1\u30fc\u30eb\u3059\u308b\u70b9\u3067\u512a\u308c\u3066\u3044\u307e\u3059\u304c\u3001Pandas API \u306e\u4e00\u90e8\u306e\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3059\u3079\u3066\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u306f\u9069\u7528\u3067\u304d\u307e\u305b\u3093\u3002Polars \u306f\u3001\u5358\u4e00\u30ce\u30fc\u30c9\u306e\u5236\u7d04\u5185\u3067\u5f37\u529b\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u3088\u308a\u591a\u69d8\u306a API \u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <p>Dask \u3068 Polars \u306e\u9078\u629e\u306f\u3001Pandas API \u3078\u306e\u6163\u308c\u3068\u975e\u5e38\u306b\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u5206\u6563\u51e6\u7406\u306e\u5fc5\u8981\u6027\u3092\u91cd\u8996\u3059\u308b\u304b\u3001\u5e83\u7bc4\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3067\u306e\u5782\u76f4\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u74b0\u5883\u306b\u304a\u3051\u308b\u52b9\u7387\u3068\u901f\u5ea6\u3092\u91cd\u8996\u3059\u308b\u304b\u306b\u3088\u3063\u3066\u5de6\u53f3\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/misc/comparison/#modin","title":"Modin","text":"<p>Dask \u3068\u540c\u69d8\u3067\u3059\u30022023\u5e74\u306b\u306f\u3001Snowflake \u304c Modin \u3092\u7ba1\u7406\u3059\u308b\u7d44\u7e54 Ponder \u3092\u8cb7\u53ce\u3057\u307e\u3057\u305f\u3002</p>"},{"location":"user-guide/misc/comparison/#spark","title":"Spark","text":"<p>Spark\uff08\u5177\u4f53\u7684\u306b\u306f PySpark\uff09\u306f\u3001\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u51e6\u7406\u306b\u5bfe\u3059\u308b\u7570\u306a\u308b\u30a2\u30d7\u30ed\u30fc\u30c1\u306e\u8c61\u5fb4\u3067\u3059\u3002Polars \u304c\u5358\u4e00\u30ce\u30fc\u30c9\u74b0\u5883\u3067\u306e\u6700\u9069\u5316\u3055\u308c\u305f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6301\u3064\u4e00\u65b9\u3067\u3001Spark \u306f\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u8d8a\u3048\u305f\u5206\u6563\u30c7\u30fc\u30bf\u51e6\u7406\u306b\u8a2d\u8a08\u3055\u308c\u3066\u304a\u308a\u3001\u975e\u5e38\u306b\u5927\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u3057\u304b\u3057\u3001Spark\u306e\u5206\u6563\u6027\u306f\u3001\u5c0f\u898f\u6a21\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3084\u5358\u4e00\u30de\u30b7\u30f3\u3067\u5b9f\u884c\u53ef\u80fd\u306a\u30bf\u30b9\u30af\u306b\u5bfe\u3057\u3066\u8907\u96d1\u3055\u3068\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3092\u3082\u305f\u3089\u3059\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u3068\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u9593\u306e\u5354\u529b\u3082\u8003\u616e\u4e8b\u9805\u3067\u3059\u3002\u5f7c\u3089\u306f\u901a\u5e38\u3001\u7570\u306a\u308b\u30c4\u30fc\u30eb\uff08Pandas \u3068 Pyspark\uff09\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5c55\u958b\u3059\u308b\u305f\u3081\u306b\u30a8\u30f3\u30b8\u30cb\u30a2\u306b\u3088\u308b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u304c\u3057\u3070\u3057\u3070\u5fc5\u8981\u3067\u3059\u3002Polars \u306f\u3001\u5782\u76f4\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u306b\u3088\u308a\u3001\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3068\u30af\u30e9\u30a6\u30c9\u5185\u306e\u5358\u4e00\u30de\u30b7\u30f3\u3067\u52d5\u4f5c\u3059\u308b\u5358\u4e00\u306e\u69cb\u6587\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <p>Polars \u3068 Spark \u306e\u9078\u629e\u306f\u3001\u30c7\u30fc\u30bf\u306e\u898f\u6a21\u3068\u51e6\u7406\u30bf\u30b9\u30af\u306e\u5177\u4f53\u7684\u306a\u8981\u4ef6\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002TB \u898f\u6a21\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3001Spark \u304c\u3088\u308a\u9069\u3057\u305f\u9078\u629e\u3067\u3059\u3002</p>"},{"location":"user-guide/misc/comparison/#duckdb","title":"DuckDB","text":"<p>Polars \u3068 DuckDB \u306f\u591a\u304f\u306e\u985e\u4f3c\u70b9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057\u3001DuckDB \u306f\u30d7\u30ed\u30bb\u30b9\u5185 SQL OLAP \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u306e\u63d0\u4f9b\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u308b\u4e00\u65b9\u3067\u3001Polars \u306f\u591a\u8a00\u8a9e\u306b\u5bfe\u5fdc\u3059\u308b\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u306a DataFrame \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u63d0\u4f9b\u306b\u7126\u70b9\u3092\u5f53\u3066\u3066\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u306f\u3001\u7570\u306a\u308b\u6700\u9069\u5316\u6226\u7565\u3084\u7570\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u512a\u5148\u9806\u4f4d\u4ed8\u3051\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002\u4e21\u8005\u9593\u306e\u76f8\u4e92\u904b\u7528\u306f\u30bc\u30ed\u30b3\u30d4\u30fc\u3067\u5b9f\u73fe\u3057\u307e\u3059\u3002DuckDB \u306f Polars \u3068\u306e\u7d71\u5408\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306e\u30ac\u30a4\u30c9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/misc/multiprocessing/","title":"\u4e26\u5217\u51e6\u7406","text":"<p>TLDR: Python \u306e\u7d44\u307f\u8fbc\u307f <code>multiprocessing</code> \u30e2\u30b8\u30e5\u30fc\u30eb\u3068 Polars \u3092\u4e00\u7dd2\u306b\u4f7f\u7528\u3057\u3066\u4e26\u5217\u51e6\u7406\u306b\u95a2\u3059\u308b Polars \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u3001\u958b\u59cb\u65b9\u6cd5\u3068\u3057\u3066 <code>fork</code> \u3067\u306f\u306a\u304f <code>spawn</code> \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p>  Python <pre><code>from multiprocessing import get_context\n\n\ndef my_fun(s):\n    print(s)\n\n\nwith get_context(\"spawn\").Pool() as pool:\n    pool.map(my_fun, [\"input1\", \"input2\", ...])\n</code></pre>"},{"location":"user-guide/misc/multiprocessing/#_2","title":"\u4e26\u5217\u51e6\u7406\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408","text":"<p>\u8a73\u7d30\u306b\u5165\u308b\u524d\u306b\u3001Polars \u306f\u6700\u521d\u304b\u3089\u3059\u3079\u3066\u306e CPU \u30b3\u30a2\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u69cb\u7bc9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002 \u3053\u308c\u306f\u3001\u4e26\u884c\u3057\u3066\u5b9f\u884c\u3067\u304d\u308b\u8a08\u7b97\u3092\u5225\u3005\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002 \u4f8b\u3048\u3070\u3001<code>select</code> \u6587\u3067 2 \u3064\u306e\u5f0f\u3092\u8981\u6c42\u3059\u308b\u3053\u3068\u306f\u4e26\u884c\u3057\u3066\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u3001\u7d50\u679c\u306f\u6700\u5f8c\u306b\u306e\u307f\u7d50\u5408\u3055\u308c\u307e\u3059\u3002 \u5225\u306e\u4f8b\u3068\u3057\u3066\u306f\u3001<code>group_by().agg(&lt;expr&gt;)</code> \u3092\u4f7f\u7528\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u5185\u3067\u5024\u3092\u96c6\u7d04\u3059\u308b\u5834\u5408\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u306f\u5225\u3005\u306b\u8a55\u4fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u5834\u5408\u306b <code>multiprocessing</code> \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30b3\u30fc\u30c9\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b\u53ef\u80fd\u6027\u306f\u975e\u5e38\u306b\u4f4e\u3044\u3067\u3059\u3002</p> <p>\u6700\u9069\u5316\u306b\u3064\u3044\u3066\u3082\u3063\u3068\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u6700\u9069\u5316\u306e\u7ae0 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/misc/multiprocessing/#_3","title":"\u4e26\u5217\u51e6\u7406\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408","text":"<p>Polars \u306f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u3059\u304c\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002 \u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3067\u3001\u89e3\u6c7a\u306e\u624b\u304c\u304b\u308a\u304c\u4e26\u5217\u5316\u53ef\u80fd\u306a\u5834\u5408\u3001\u4e26\u5217\u51e6\u7406\u3092\u4f7f\u7528\u3057\u3066\u901f\u5ea6\u3092\u4e0a\u3052\u308b\u3053\u3068\u306f\u7406\u306b\u304b\u306a\u3063\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/misc/multiprocessing/#_4","title":"\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u4e26\u5217\u51e6\u7406\u306e\u8a2d\u5b9a\u306e\u554f\u984c","text":""},{"location":"user-guide/misc/multiprocessing/#_5","title":"\u6982\u8981","text":"<p>Python \u306e\u4e26\u5217\u51e6\u7406\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3067\u306f\u30d7\u30ed\u30bb\u30b9\u30d7\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b3\u3064\u306e\u65b9\u6cd5\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ol> <li>spawn</li> <li>fork</li> <li>forkserver</li> </ol> <p>fork \u306e\u8aac\u660e\u306f (2022-10-15 \u6642\u70b9)\uff1a</p> <p>\u89aa\u30d7\u30ed\u30bb\u30b9\u306f os.fork() \u3092\u4f7f\u7528\u3057\u3066 Python \u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u3092\u30d5\u30a9\u30fc\u30af\u3057\u307e\u3059\u3002\u5b50\u30d7\u30ed\u30bb\u30b9\u306f\u958b\u59cb\u3059\u308b\u3068\u3001\u89aa\u30d7\u30ed\u30bb\u30b9\u3068\u5b9f\u8cea\u7684\u306b\u540c\u4e00\u3067\u3059\u3002\u89aa\u306e\u3059\u3079\u3066\u306e\u30ea\u30bd\u30fc\u30b9\u306f\u5b50\u30d7\u30ed\u30bb\u30b9\u306b\u7d99\u627f\u3055\u308c\u307e\u3059\u3002\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30bb\u30b9\u3092\u5b89\u5168\u306b\u30d5\u30a9\u30fc\u30af\u3059\u308b\u3053\u3068\u306f\u554f\u984c\u304c\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>Unix \u3067\u306e\u307f\u5229\u7528\u53ef\u80fd\u3002Unix \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3002</p> <p>\u7aef\u7684\u306b\u8a00\u3046\u3068\uff1aPolars \u306f\u5f37\u529b\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u76ee\u7684\u3067\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u51e6\u7406\u3057\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001<code>fork</code> \u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 Unix (Linux\u3001BSD \u306a\u3069) \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u660e\u793a\u7684\u306b\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u306a\u3044\u9650\u308a\u3001<code>fork</code> \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>\u3053\u306e\u554f\u984c\u306b\u4ee5\u524d\u906d\u9047\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u7406\u7531\u306f\u3001\u7d14\u7c8b\u306a Python \u30b3\u30fc\u30c9\u3084\u307b\u3068\u3093\u3069\u306e Python \u30e9\u30a4\u30d6\u30e9\u30ea\u306f\uff08\u307b\u3068\u3093\u3069\u304c\uff09\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3060\u304b\u3089\u3067\u3059\u3002 \u307e\u305f\u306f\u3001Windows \u3084 MacOS \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001<code>fork</code> \u306f\u305d\u3082\u305d\u3082\u5229\u7528\u53ef\u80fd\u306a\u65b9\u6cd5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff08MacOS \u306f Python 3.7 \u307e\u3067\uff09\u3002</p> <p>\u3053\u306e\u305f\u3081\u4ee3\u308f\u308a\u306b <code>spawn</code> \u304b <code>forkservert</code> \u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u3002<code>spawn</code> \u306f\u3059\u3079\u3066\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u4f7f\u7528\u53ef\u80fd\u3067\u6700\u3082\u5b89\u5168\u306a\u9078\u629e\u306e\u305f\u3081\u3001\u3053\u306e\u65b9\u6cd5\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/misc/multiprocessing/#_6","title":"\u4f8b","text":"<p><code>fork</code> \u306e\u554f\u984c\u306f\u3001\u89aa\u30d7\u30ed\u30bb\u30b9\u306e\u72b6\u614b\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u306b\u3042\u308a\u307e\u3059\u3002 Polars \u306e\u30a4\u30b7\u30e5\u30fc\u30c8\u30e9\u30c3\u30ab\u30fc\u306b\u6295\u7a3f\u3055\u308c\u305f\u3082\u306e\u3092\u5c11\u3057\u5909\u66f4\u3057\u305f\u4ee5\u4e0b\u306e\u4f8b\u3092\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff1a</p>  Python <pre><code>import multiprocessing\nimport polars as pl\n\n\ndef test_sub_process(df: pl.DataFrame, job_id):\n    df_filtered = df.filter(pl.col(\"a\") &gt; 0)\n    print(f\"Filtered (job_id: {job_id})\", df_filtered, sep=\"\\n\")\n\n\ndef create_dataset():\n    return pl.DataFrame({\"a\": [0, 2, 3, 4, 5], \"b\": [0, 4, 5, 56, 4]})\n\n\ndef setup():\n    # some setup work\n    df = create_dataset()\n    df.write_parquet(\"/tmp/test.parquet\")\n\n\ndef main():\n    test_df = pl.read_parquet(\"/tmp/test.parquet\")\n\n    for i in range(0, 5):\n        proc = multiprocessing.get_context(\"spawn\").Process(\n            target=test_sub_process, args=(test_df, i)\n        )\n        proc.start()\n        proc.join()\n\n        print(f\"Executed sub process {i}\")\n\n\nif __name__ == \"__main__\":\n    setup()\n    main()\n</code></pre> <p><code>spawn</code> \u306e\u4ee3\u308f\u308a\u306b <code>fork</code> \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u304c\u767a\u751f\u3057\u307e\u3059\u3002 \u6ce8\u610f\uff1aPolars \u306f\u4e26\u5217\u51e6\u7406\u306e\u65b9\u6cd5\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u3066\u8d77\u52d5\u3059\u3089\u3057\u307e\u305b\u3093\u304c\u3001\u30c1\u30a7\u30c3\u30af\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3057\u307e\u3059\u3002</p> <p>fork \u30e1\u30bd\u30c3\u30c9\u306f <code>os.fork()</code> \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u76f8\u5f53\u3057\u3001\u3053\u308c\u306f POSIX \u6a19\u6e96 \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3067\u3059\uff1a</p> <p>\u30d7\u30ed\u30bb\u30b9\u306f\u5358\u4e00\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30bb\u30b9\u304c fork() \u3092\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u3001\u65b0\u3057\u3044\u30d7\u30ed\u30bb\u30b9\u306b\u306f\u547c\u3073\u51fa\u3057\u30b9\u30ec\u30c3\u30c9\u3068\u305d\u306e\u5b8c\u5168\u306a\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u30ec\u30d7\u30ea\u30ab\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u306f\u3001\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u306e\u72b6\u614b\u306a\u3069\u306e\u30ea\u30bd\u30fc\u30b9\u3082\u542b\u307e\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u30a8\u30e9\u30fc\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u3001\u5b50\u30d7\u30ed\u30bb\u30b9\u306f exec \u95a2\u6570\u306e\u3044\u305a\u308c\u304b\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u307e\u3067\u3001\u975e\u540c\u671f\u30b7\u30b0\u30ca\u30eb\u5b89\u5168\u306a\u64cd\u4f5c\u306e\u307f\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u4e00\u65b9\u3067 <code>spawn</code> \u306f\u5b8c\u5168\u306b\u65b0\u3057\u3044\u30d5\u30ec\u30c3\u30b7\u30e5\u306a Python \u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u3001\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u306e\u72b6\u614b\u3092\u7d99\u627f\u3057\u307e\u305b\u3093\u3002</p> <p>\u3067\u306f\u3001\u30b3\u30fc\u30c9\u4f8b\u3067\u4f55\u304c\u8d77\u3053\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u30d5\u30a1\u30a4\u30eb\u3092 <code>pl.read_parquet</code> \u3067\u8aad\u3080\u305f\u3081\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u5f8c\u3001<code>os.fork()</code> \u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u89aa\u30d7\u30ed\u30bb\u30b9\u306e\u72b6\u614b\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u306f\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u3082\u542b\u307e\u308c\u307e\u3059\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u5b50\u30d7\u30ed\u30bb\u30b9\u306f\u3001\u7372\u5f97\u3055\u308c\u305f\u72b6\u614b\u3067\u30d5\u30a1\u30a4\u30eb\u30ed\u30c3\u30af\u3092\u30b3\u30d4\u30fc\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u30ed\u30c3\u30af\u304c\u89e3\u653e\u3055\u308c\u308b\u306e\u3092\u7121\u671f\u9650\u306b\u5f85\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u306f\u6c7a\u3057\u3066\u8d77\u3053\u308a\u307e\u305b\u3093\u3002</p> <p>\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u306e\u304c\u96e3\u3057\u3044\u306e\u306f\u3001<code>fork</code> \u304c\u6a5f\u80fd\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3067\u3059\u3002 <code>pl.read_parquet</code> \u306e\u547c\u3073\u51fa\u3057\u304c\u306a\u3044\u4f8b\u306b\u5909\u66f4\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff1a</p>  Python <pre><code>import multiprocessing\nimport polars as pl\n\n\ndef test_sub_process(df: pl.DataFrame, job_id):\n    df_filtered = df.filter(pl.col(\"a\") &gt; 0)\n    print(f\"Filtered (job_id: {job_id})\", df_filtered, sep=\"\\n\")\n\n\ndef create_dataset():\n    return pl.DataFrame({\"a\": [0, 2, 3, 4, 5], \"b\": [0, 4, 5, 56, 4]})\n\n\ndef main():\n    test_df = create_dataset()\n\n    for i in range(0, 5):\n        proc = multiprocessing.get_context(\"fork\").Process(\n            target=test_sub_process, args=(test_df, i)\n        )\n        proc.start()\n        proc.join()\n\n        print(f\"Executed sub process {i}\")\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>\u3053\u308c\u306f\u554f\u984c\u306a\u304f\u6a5f\u80fd\u3057\u307e\u3059\u3002 \u4e00\u898b\u95a2\u4fc2\u306e\u306a\u3044\u5909\u66f4\u304c\u4e26\u5217\u51e6\u7406\u306e\u30b3\u30fc\u30c9\u3092\u58ca\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3001\u3053\u3053\u3067\u306e\u7c21\u5358\u306a\u4f8b\u3067\u306f\u306a\u304f\u3001\u3088\u308a\u5927\u304d\u306a\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u3053\u308c\u3089\u306e\u554f\u984c\u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3053\u3068\u306f\u3001\u5927\u5909\u306a\u82e6\u75db\u3092\u4f34\u3046\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u5f93\u3063\u3066\u3001\u3084\u3080\u3092\u5f97\u306a\u3044\u7279\u5225\u306a\u8981\u4ef6\u304c\u3042\u308b\u3068\u304d\u4ee5\u5916\u306f\u3001\u4e00\u822c\u7684\u306b\u306f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f <code>fork</code> \u306e\u958b\u59cb\u65b9\u6cd5\u3092\u4f7f\u7528\u3059\u308b\u3079\u304d\u3067\u3042\u308a\u307e\u305b\u3093\u3002</p>"},{"location":"user-guide/misc/multiprocessing/#fork","title":"fork \u306e\u9577\u6240\u3068\u77ed\u6240","text":"<p>\u4f8b\u3092\u8e0f\u307e\u3048\u308b\u3068\u3001\u306a\u305c <code>fork</code> \u304c Python \u3067\u6700\u521d\u304b\u3089\u5229\u7528\u53ef\u80fd\u3060\u3063\u305f\u306e\u304b\u7591\u554f\u306b\u601d\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002</p> <p>\u307e\u305a\u3001\u304a\u305d\u3089\u304f\u6b74\u53f2\u7684\u306a\u7406\u7531\u304b\u3089\u3067\u3059\uff1a<code>spawn</code> \u306f Python \u30d0\u30fc\u30b8\u30e7\u30f3 3.4 \u3067\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u304c\u3001<code>fork</code> \u306f Python 2.x \u30b7\u30ea\u30fc\u30ba\u304b\u3089\u4e00\u90e8\u3067\u3057\u305f\u3002</p> <p>2\u3064\u76ee\u306b\u3001<code>spawn</code> \u304a\u3088\u3073 <code>forkserver</code> \u306b\u306f\u9069\u7528\u3055\u308c\u306a\u3044\u3044\u304f\u3064\u304b\u306e\u5236\u9650\u304c <code>fork</code> \u306b\u306f\u5b58\u5728\u3057\u307e\u3059\u3002\u7279\u306b\u3001\u3059\u3079\u3066\u306e\u5f15\u6570\u304c\u30d4\u30c3\u30af\u53ef\u80fd\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001Python \u306e\u4e26\u5217\u51e6\u7406\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>3\u3064\u76ee\u306b\u3001<code>spawn</code> \u306f\u5b9f\u8cea\u7684\u306b <code>fork</code> \u306b\u52a0\u3048\u3066\u65b0\u3057\u3044 Python \u30d7\u30ed\u30bb\u30b9\u3092\u30ed\u30c3\u30af\u306a\u3057\u3067\u4f5c\u6210\u3059\u308b execv \u306e\u547c\u3073\u51fa\u3057\u306e\u305f\u3081\u3001<code>fork</code> \u306f <code>spawn</code> \u3088\u308a\u3082\u65e9\u304f\u65b0\u3057\u3044\u30d7\u30ed\u30bb\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001Python \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3088\u308a\u9045\u3044\u3068\u306e\u8b66\u544a\u304c\u3042\u308a\u307e\u3059\uff1a<code>spawn</code> \u3088\u308a\u3082\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u591a\u3044\u3067\u3059\u3002 \u3057\u304b\u3057\u3001\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u8907\u6570\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u4f7f\u7528\u3059\u308b\u76ee\u7684\u306f\u3001\u6570\u5206\u307e\u305f\u306f\u6570\u6642\u9593\u304b\u304b\u308b\u8a08\u7b97\u3092\u901f\u3081\u308b\u3053\u3068\u3067\u3042\u308a\u3001\u3053\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u5168\u4f53\u7684\u306a\u72b6\u6cc1\u3067\u306f\u7121\u8996\u3067\u304d\u308b\u307b\u3069\u3067\u3059\u3002 \u305d\u3057\u3066\u3088\u308a\u91cd\u8981\u306a\u3053\u3068\u306b\u3001\u305d\u308c\u306f\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u5b9f\u969b\u306b\u6a5f\u80fd\u3057\u307e\u3059\u3002</p> <p>4\u3064\u76ee\u306b\u3001<code>spawn</code> \u306f\u65b0\u3057\u3044\u30d7\u30ed\u30bb\u30b9\u3092\u958b\u59cb\u3059\u308b\u305f\u3081\u3001<code>fork</code> \u3068\u9055\u3063\u3066\u30b3\u30fc\u30c9\u304c\u30a4\u30f3\u30dd\u30fc\u30c8\u53ef\u80fd\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u7279\u306b <code>spawn</code> \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u95a2\u9023\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4f8b\u3048\u3070 Jupyter \u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3084\u30d7\u30ec\u30fc\u30f3\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u306a\u3069\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u30b9\u30b3\u30fc\u30d7\u306b\u3042\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3057\u305f\u304c\u3063\u3066\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001main \u7bc0\u304b\u3089\u5b9f\u884c\u3059\u308b\u95a2\u6570\u5185\u3067\u30b9\u30dd\u30fc\u30f3\u3059\u308b\u3088\u3046\u306b\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u306f\u5178\u578b\u7684\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u554f\u984c\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u3067\u306e\u8fc5\u901f\u306a\u5b9f\u9a13\u306b\u304a\u3044\u3066\u306f\u5931\u6557\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/misc/multiprocessing/#_7","title":"\u53c2\u8003\u6587\u732e","text":"<ol> <li> <p>https://docs.python.org/3/library/multiprocessing.html</p> </li> <li> <p>https://pythonspeed.com/articles/python-multiprocessing/</p> </li> <li> <p>https://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html</p> </li> <li> <p>https://bnikolic.co.uk/blog/python/parallelism/2019/11/13/python-forkserver-preload.html</p> </li> </ol>"},{"location":"user-guide/misc/visualization/","title":"\u53ef\u8996\u5316","text":"<p>Polars \u306e <code>DataFrame</code> \u5185\u306e\u30c7\u30fc\u30bf\u306f\u3001\u4e00\u822c\u7684\u306a\u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u53ef\u8996\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u3053\u3067\u306f\u3001Iris \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u6a5f\u80fd\u3092\u793a\u3057\u307e\u3059\u3002CSV \u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3001<code>species</code> \u30ab\u30e9\u30e0\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3092\u884c\u3044\u3001<code>petal_length</code> \u306e\u5e73\u5747\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p>  Python <pre><code>import polars as pl\n\npath = \"docs/data/iris.csv\"\n\ndf = pl.scan_csv(path).group_by(\"species\").agg(pl.col(\"petal_length\").mean()).collect()\nprint(df)\n</code></pre> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 species    \u2506 petal_length \u2502\n\u2502 ---        \u2506 ---          \u2502\n\u2502 str        \u2506 f64          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Virginica  \u2506 5.552        \u2502\n\u2502 Setosa     \u2506 1.462        \u2502\n\u2502 Versicolor \u2506 4.26         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/misc/visualization/#hvplot","title":"hvPlot \u306b\u3088\u308b\u7d44\u307f\u8fbc\u307f\u306e\u30d7\u30ed\u30c3\u30c8","text":"<p>Polars \u306b\u306f hvPlot \u3092\u4f7f\u7528\u3057\u3066\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u30d7\u30ed\u30c3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e <code>plot</code> \u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python <pre><code>df.plot.bar(\n    x=\"species\",\n    y=\"petal_length\",\n    width=650,\n)\n</code></pre> hvplot_bar"},{"location":"user-guide/misc/visualization/#matplotlib","title":"Matplotlib","text":"<p>\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u3001DataFrame \u306e\u5404\u30ab\u30e9\u30e0\u3092 Matplotlib \u306b Series \u3068\u3057\u3066\u76f4\u63a5\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Matplotlib \u306f Polars \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u660e\u793a\u7684\u306b\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001Polars \u306e Series \u3092\u53d7\u3051\u5165\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001null \u5024\u304c\u306a\u3044\u30c7\u30fc\u30bf\u306f Series \u3092\u30bc\u30ed\u30b3\u30d4\u30fc\u3067 numpy \u914d\u5217\u306b\u5909\u63db\u3067\u304d\u308b\u305f\u3081\u3067\u3059\u3002</p>  Python <pre><code>import matplotlib.pyplot as plt\n\nplt.bar(x=df[\"species\"], height=df[\"petal_length\"])\n</code></pre> <p></p>"},{"location":"user-guide/misc/visualization/#seaborn-plotly-altair","title":"Seaborn, Plotly &amp; Altair","text":"<p>Seaborn\u3001Plotly \u3001Altair \u306f Dataframe \u5909\u63db\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6d3b\u7528\u3057\u3066 Polars \u306e <code>DataFrame</code> \u3092\u53d7\u3051\u5165\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u53ef\u80fd\u306a\u5834\u5408\u306f\u30bc\u30ed\u30b3\u30d4\u30fc\u5909\u63db\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/misc/visualization/#seaborn","title":"Seaborn","text":"Python <pre><code>import seaborn as sns\nsns.barplot(\n    df,\n    x=\"species\",\n    y=\"petal_length\",\n)\n</code></pre>"},{"location":"user-guide/misc/visualization/#plotly","title":"Plotly","text":"Python <pre><code>import plotly.express as px\n\npx.bar(\n    df,\n    x=\"species\",\n    y=\"petal_length\",\n    width=400,\n)\n</code></pre>"},{"location":"user-guide/misc/visualization/#altair","title":"Altair","text":"Python <pre><code>import altair as alt\n\nalt.Chart(df, width=700).mark_bar().encode(x=\"species:N\", y=\"petal_length:Q\")\n</code></pre>"},{"location":"user-guide/sql/create/","title":"CREATE","text":"<p>Polars \u3067\u306f\u3001<code>SQLContext</code> \u3092\u4f7f\u7528\u3057\u3066\u3001SQL \u69cb\u6587\u3067 <code>LazyFrames</code> \u3068 <code>DataFrames</code> \u306b\u5bfe\u3057\u3066 SQL \u6587\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u306e <code>SQLContext</code> \u3092\u4f7f\u7528\u3057\u3066\u5b9f\u884c\u3067\u304d\u308b SQL \u6587\u306e 1 \u3064\u306b <code>CREATE TABLE</code> \u6587\u304c\u3042\u308a\u3001\u65b0\u3057\u3044\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002</p> <p>Polars \u3067\u306e <code>CREATE TABLE</code> \u6587\u306e\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <pre><code>CREATE TABLE table_name\nAS\nSELECT ...\n</code></pre> <p>\u3053\u306e\u69cb\u6587\u3067\u306f\u3001<code>table_name</code> \u306f\u65b0\u305f\u306b\u4f5c\u6210\u3055\u308c\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u540d\u524d\u3067\u3042\u308a\u3001<code>SELECT ...</code> \u306f\u30c6\u30fc\u30d6\u30eb\u306b\u633f\u5165\u3055\u308c\u308b\u30c7\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b SELECT \u6587\u3067\u3059\u3002</p> <p>Polars \u3067\u306e <code>CREATE TABLE</code> \u6587\u306e\u4f7f\u7528\u4f8b\u3092\u6b21\u306b\u793a\u3057\u307e\u3059\uff1a</p>  Python <p> <code>register</code> \u00b7 <code>execute</code> <pre><code>data = {\"name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"], \"age\": [25, 30, 35, 40]}\ndf = pl.LazyFrame(data)\n\nctx = pl.SQLContext(my_table=df, eager_execution=True)\n\nresult = ctx.execute(\n    \"\"\"\n    CREATE TABLE older_people\n    AS\n    SELECT * FROM my_table WHERE age &gt; 30\n\"\"\"\n)\n\nprint(ctx.execute(\"SELECT * FROM older_people\"))\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 name    \u2506 age \u2502\n\u2502 ---     \u2506 --- \u2502\n\u2502 str     \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Charlie \u2506 35  \u2502\n\u2502 David   \u2506 40  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>SQLContext</code> \u306e <code>execute()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066 <code>CREATE TABLE</code> \u6587\u3092\u5b9f\u884c\u3057\u3001<code>my_table DataFrame</code> \u304b\u3089 <code>age</code> \u5217\u304c 30 \u3088\u308a\u5927\u304d\u3044\u3059\u3079\u3066\u306e\u884c\u3092\u9078\u629e\u3059\u308b SELECT \u6587\u306b\u57fa\u3065\u3044\u3066 <code>older_people</code> \u3068\u3044\u3046\u65b0\u3057\u3044\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p> <p>Note</p> <p><code>CREATE TABLE</code> \u6587\u306e\u7d50\u679c\u306f\u30c6\u30fc\u30d6\u30eb\u305d\u306e\u3082\u306e\u3067\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30c6\u30fc\u30d6\u30eb\u306f <code>SQLContext</code> \u306b\u767b\u9332\u3055\u308c\u307e\u3059\u3002\u30c6\u30fc\u30d6\u30eb\u3092 <code>DataFrame</code> \u306b\u623b\u3057\u305f\u3044\u5834\u5408\u306f\u3001<code>SELECT * FROM ...</code> \u6587\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/sql/cte/","title":"\u5171\u901a\u30c6\u30fc\u30d6\u30eb\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3","text":"<p>\u5171\u901a\u30c6\u30fc\u30d6\u30eb\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 (Common Table Expressions\u3001CTEs) \u306f\u3001SQL \u306e\u6a5f\u80fd\u306e1\u3064\u3067\u3001SQL \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u5185\u3067\u53c2\u7167\u3067\u304d\u308b\u4e00\u6642\u7684\u306a\u540d\u524d\u4ed8\u304d\u7d50\u679c\u30bb\u30c3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002CTE \u306f\u8907\u96d1\u306a SQL \u30af\u30a8\u30ea\u3092\u5c0f\u3055\u304f\u3001\u3088\u308a\u7ba1\u7406\u3057\u3084\u3059\u304f\u5206\u5272\u3059\u308b\u3053\u3068\u3067\u3001\u30af\u30a8\u30ea\u306e\u53ef\u8aad\u6027\u3001\u8a18\u8ff0\u6027\u3001\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u6027\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>CTE \u306f\u3001 <code>WITH</code> \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u3001\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\u30b5\u30d6\u30af\u30a8\u30ea\u306e\u30ea\u30b9\u30c8\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\u5404\u30b5\u30d6\u30af\u30a8\u30ea\u306f\u3001\u5f8c\u7d9a\u306e\u30af\u30a8\u30ea\u3067\u4f7f\u7528\u3067\u304d\u308b\u540d\u524d\u4ed8\u304d\u306e\u7d50\u679c\u30bb\u30c3\u30c8\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002CTE \u306e\u69cb\u6587\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002</p> <pre><code>WITH cte_name AS (\n    subquery\n)\nSELECT ...\n</code></pre> <p>\u4e0a\u8a18\u306e <code>cte_name</code> \u306f CTE \u306e\u540d\u524d\u3001<code>subquery</code> \u306f\u7d50\u679c\u30bb\u30c3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u30b5\u30d6\u30af\u30a8\u30ea\u3067\u3059\u3002CTE \u306f\u3001\u30c6\u30fc\u30d6\u30eb\u3084\u30d3\u30e5\u30fc\u306e\u3088\u3046\u306b\u5f8c\u7d9a\u306e\u30af\u30a8\u30ea\u3067\u53c2\u7167\u3067\u304d\u307e\u3059\u3002</p> <p>CTE \u306f\u3001\u8907\u6570\u30ec\u30d9\u30eb\u306e\u30b5\u30d6\u30af\u30a8\u30ea\u3092\u542b\u3080\u8907\u96d1\u306a\u30af\u30a8\u30ea\u3092\u6271\u3046\u969b\u306b\u7279\u306b\u4fbf\u5229\u3067\u3059\u3002\u30af\u30a8\u30ea\u3092\u5c0f\u3055\u304f\u3001\u7ba1\u7406\u3057\u3084\u3059\u304f\u5206\u5272\u3067\u304d\u308b\u305f\u3081\u3001\u7406\u89e3\u3057\u3084\u3059\u304f\u3001\u30c7\u30d0\u30c3\u30b0\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\u3055\u3089\u306b\u3001CTE \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30b5\u30d6\u30af\u30a8\u30ea\u306e\u7d50\u679c\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u6700\u9069\u5316\u304a\u3088\u3073\u30ad\u30e3\u30c3\u30b7\u30e5\u3067\u304d\u308b\u305f\u3081\u3001\u30af\u30a8\u30ea\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584\u306b\u3082\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>Polars \u306f SQL \u69cb\u6587\u306e WITH \u53e5\u3092\u4f7f\u3063\u3066\u5171\u901a\u30c6\u30fc\u30d6\u30eb\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 (CTE) \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002</p>  Python <p> <code>register</code> \u00b7 <code>execute</code> <pre><code>ctx = pl.SQLContext()\ndf = pl.LazyFrame(\n    {\"name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"], \"age\": [25, 30, 35, 40]}\n)\nctx.register(\"my_table\", df)\n\nresult = ctx.execute(\n    \"\"\"\n    WITH older_people AS (\n        SELECT * FROM my_table WHERE age &gt; 30\n    )\n    SELECT * FROM older_people WHERE STARTS_WITH(name,'C')\n\"\"\",\n    eager=True,\n)\n\nprint(result)\n</code></pre></p> <pre><code>shape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 name    \u2506 age \u2502\n\u2502 ---     \u2506 --- \u2502\n\u2502 str     \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Charlie \u2506 35  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001<code>SQLContext</code> \u306e <code>execute()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u3001CTE \u3092\u542b\u3080 SQL \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002CTE \u306f <code>my_table</code> LazyFrame \u304b\u3089 <code>age</code> \u304c 30 \u3088\u308a\u5927\u304d\u3044\u884c\u3092\u9078\u629e\u3057\u3001<code>older_people</code> \u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001<code>older_people</code> CTE \u304b\u3089 <code>name</code> \u304c 'C' \u3067\u59cb\u307e\u308b\u884c\u3092\u9078\u629e\u3059\u308b\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/sql/intro/","title":"\u306f\u3058\u3081\u306b","text":"<p>Polars \u306f SQL \u3068\u306e\u9023\u643a\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3088\u308a\u8aad\u307f\u3084\u3059\u304f\u8868\u73fe\u529b\u306e\u3042\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306b\u306f\u3001 \u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3\u69cb\u6587 \u306b\u6163\u308c\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002 DataFrame \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c Polars \u306e\u4e3b\u8981\u6a5f\u80fd\u3067\u3042\u308b\u305f\u3081\u3001\u65b0\u6a5f\u80fd\u306f\u901a\u5e38\u307e\u305a\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 API \u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002 \u3057\u304b\u3057\u3001\u65e2\u5b58\u306e SQL \u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3092\u6301\u3063\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3084 SQL \u306e\u4f7f\u7528\u3092\u597d\u3080\u30e6\u30fc\u30b6\u30fc\u5411\u3051\u306b\u3001Polars \u306f SQL \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>Note</p> <p>Polars \u306b\u306f\u56fa\u6709\u306e SQL \u30a8\u30f3\u30b8\u30f3\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089 Polars \u306f SQL \u30af\u30a8\u30ea\u3092 \u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 \u306b\u5909\u63db\u3057\u3001\u72ec\u81ea\u306e\u30a8\u30f3\u30b8\u30f3\u3092\u4f7f\u3063\u3066\u5b9f\u884c\u3059\u308b\u305f\u3081\u3067\u3059\u3002\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306b\u3088\u308a\u3001\u7d14\u7c8b\u306a DataFrame \u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306e Polars \u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3068\u30b9\u30b1\u30fc\u30e9\u30d3\u30ea\u30c6\u30a3\u306e\u5229\u70b9\u3092\u7dad\u6301\u3057\u3064\u3064\u3001SQL \u3092\u4f7f\u7528\u3059\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/sql/intro/#_2","title":"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8","text":"<p>Polars \u306f SQL \u30af\u30a8\u30ea\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306b <code>SQLContext</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u306f\u3001<code>DataFrame</code> \u3068 <code>LazyFrame</code>  \u306e\u8b58\u5225\u5b50\u540d\u3068\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 <sup>1</sup> \u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f <code>SQLContext</code> \u3092\u958b\u59cb\u3057\u3066\u3044\u307e\u3059\uff1a</p>  Python <p> <code>SQLContext</code> <pre><code>ctx = pl.SQLContext()\n</code></pre></p> <p></p>"},{"location":"user-guide/sql/intro/#dataframe","title":"DataFrame\u306e\u767b\u9332","text":"<p><code>SQLContext</code> \u306e\u521d\u671f\u5316\u6642\u306b DataFrame \u3092\u767b\u9332\u3059\u308b\u65b9\u6cd5\u306f\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\u3002</p> <ul> <li>\u30b0\u30ed\u30fc\u30d0\u30eb\u540d\u524d\u7a7a\u9593\u5185\u306e\u3059\u3079\u3066\u306e <code>LazyFrame</code> \u304a\u3088\u3073 <code>DataFrame</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u767b\u9332\u3059\u308b\u65b9\u6cd5</li> <li>\u8f9e\u66f8\u30de\u30c3\u30d4\u30f3\u30b0\u307e\u305f\u306f kwargs \u3092\u4f7f\u3063\u3066\u660e\u793a\u7684\u306b\u767b\u9332\u3059\u308b\u65b9\u6cd5</li> </ul>  Python <p> <code>SQLContext</code> <pre><code>df = pl.DataFrame({\"a\": [1, 2, 3]})\nlf = pl.LazyFrame({\"b\": [4, 5, 6]})\n\n# Register all dataframes in the global namespace: registers both \"df\" and \"lf\"\nctx = pl.SQLContext(register_globals=True)\n\n# Register an explicit mapping of identifier name to frame\nctx = pl.SQLContext(frames={\"table_one\": df, \"table_two\": lf})\n\n# Register frames using kwargs; dataframe df as \"df\" and lazyframe lf as \"lf\"\nctx = pl.SQLContext(df=df, lf=lf)\n</code></pre></p> <p></p> <p>Pandas DataFrame \u3082\u3001Polars \u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u767b\u9332\u3067\u304d\u307e\u3059\u3002</p>  Python <p> <code>SQLContext</code> <pre><code>import pandas as pd\n\ndf_pandas = pd.DataFrame({\"c\": [7, 8, 9]})\nctx = pl.SQLContext(df_pandas=pl.from_pandas(df_pandas))\n</code></pre></p> <p></p> <p>Note</p> <p>Numpy \u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b Pandas DataFrame \u3092\u5909\u63db\u3059\u308b\u3068\u3001\u5909\u63db\u306e\u30b3\u30b9\u30c8\u304c\u9ad8\u304f\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001Arrow \u3092\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3068\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u5909\u63db\u306e\u30b3\u30b9\u30c8\u3092\u5927\u5e45\u306b\u6291\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059 (\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u307b\u307c\u30bc\u30ed\u306b\u8fd1\u304f\u306a\u308a\u307e\u3059)\u3002</p> <p><code>SQLContext</code> \u304c\u521d\u671f\u5316\u3055\u308c\u305f\u3089\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u8ffd\u52a0\u306e DataFrame \u3092\u767b\u9332\u3057\u305f\u308a\u3001\u65e2\u5b58\u306e DataFrame \u3092\u767b\u9332\u89e3\u9664\u3067\u304d\u307e\u3059\uff1a</p> <ul> <li><code>register</code></li> <li><code>register_globals</code></li> <li><code>register_many</code></li> <li><code>unregister</code></li> </ul>"},{"location":"user-guide/sql/intro/#_3","title":"\u30af\u30a8\u30ea\u306e\u5b9f\u884c\u3068\u7d50\u679c\u306e\u53ce\u96c6","text":"<p>SQL \u30af\u30a8\u30ea\u306f\u3001\u30af\u30a8\u30ea\u8a08\u753b\u306e\u6700\u9069\u5316\u3092\u6700\u5927\u9650\u306b\u6d3b\u7528\u3059\u308b\u305f\u3081\u306b\u3001\u5e38\u306b\u9045\u5ef6\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u7d50\u679c\u3092\u53ce\u96c6\u3059\u308b\u306b\u306f2\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\uff1a</p> <ul> <li><code>SQLContext</code> \u306e <code>eager_execution</code> \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092 True \u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306b\u3088\u308a Polars \u306f <code>execute</code> \u547c\u3073\u51fa\u3057\u304b\u3089 LazyFrame \u306e\u7d50\u679c\u3092\u81ea\u52d5\u7684\u306b\u53ce\u96c6\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</li> <li><code>execute</code> \u3067\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u969b\u306b <code>eager</code> \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092 True \u306b\u8a2d\u5b9a\u3059\u308b\u304b\u3001<code>collect</code> \u3092\u4f7f\u7528\u3057\u3066\u660e\u793a\u7684\u306b\u7d50\u679c\u3092\u53ce\u96c6\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> <p>SQL \u30af\u30a8\u30ea\u306f <code>SQLContext</code> \u306e <code>execute</code> \u3092\u547c\u3073\u51fa\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002</p>  Python <p> <code>register</code> \u00b7 <code>execute</code> <pre><code># For local files use scan_csv instead\npokemon = pl.read_csv(\n    \"https://gist.githubusercontent.com/ritchie46/cac6b337ea52281aa23c049250a4ff03/raw/89a957ff3919d90e6ef2d34235e6bf22304f3366/pokemon.csv\"\n)\nwith pl.SQLContext(register_globals=True, eager_execution=True) as ctx:\n    df_small = ctx.execute(\"SELECT * from pokemon LIMIT 5\")\n    print(df_small)\n</code></pre></p> <pre><code>shape: (5, 13)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 #   \u2506 Name                  \u2506 Type 1 \u2506 Type 2 \u2506 \u2026 \u2506 Sp. Def \u2506 Speed \u2506 Generation \u2506 Legendary \u2502\n\u2502 --- \u2506 ---                   \u2506 ---    \u2506 ---    \u2506   \u2506 ---     \u2506 ---   \u2506 ---        \u2506 ---       \u2502\n\u2502 i64 \u2506 str                   \u2506 str    \u2506 str    \u2506   \u2506 i64     \u2506 i64   \u2506 i64        \u2506 bool      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 Bulbasaur             \u2506 Grass  \u2506 Poison \u2506 \u2026 \u2506 65      \u2506 45    \u2506 1          \u2506 false     \u2502\n\u2502 2   \u2506 Ivysaur               \u2506 Grass  \u2506 Poison \u2506 \u2026 \u2506 80      \u2506 60    \u2506 1          \u2506 false     \u2502\n\u2502 3   \u2506 Venusaur              \u2506 Grass  \u2506 Poison \u2506 \u2026 \u2506 100     \u2506 80    \u2506 1          \u2506 false     \u2502\n\u2502 3   \u2506 VenusaurMega Venusaur \u2506 Grass  \u2506 Poison \u2506 \u2026 \u2506 120     \u2506 80    \u2506 1          \u2506 false     \u2502\n\u2502 4   \u2506 Charmander            \u2506 Fire   \u2506 null   \u2506 \u2026 \u2506 50      \u2506 65    \u2506 1          \u2506 false     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/sql/intro/#_4","title":"\u8907\u6570\u306e\u30bd\u30fc\u30b9\u304b\u3089\u306e\u30af\u30a8\u30ea\u5b9f\u884c","text":"<p>\u540c\u69d8\u306b\u3001\u8907\u6570\u306e\u30bd\u30fc\u30b9\u304b\u3089 SQL \u30af\u30a8\u30ea\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002 \u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u6b21\u306e\u3082\u306e\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li>CSV \u30d5\u30a1\u30a4\u30eb (\u9045\u5ef6\u8aad\u307f\u8fbc\u307f)</li> <li>NDJSON \u30d5\u30a1\u30a4\u30eb (\u9045\u5ef6\u8aad\u307f\u8fbc\u307f)</li> <li>Pandas DataFrame</li> </ul> <p>\u305d\u3057\u3066 SQL \u3092\u4f7f\u3063\u3066\u3001\u3053\u308c\u3089\u3092\u7d50\u5408\u3057\u307e\u3059\u3002 \u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5fc5\u8981\u306a\u884c\u3068\u5217\u306e\u307f\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u540c\u69d8\u306b\u3001\u30af\u30e9\u30a6\u30c9\u306e\u30c7\u30fc\u30bf\u30ec\u30a4\u30af\uff08S3, Azure Data Lake\uff09\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 PyArrow \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u30c7\u30fc\u30bf\u30ec\u30a4\u30af\u3092\u6307\u3059\u3088\u3046\u306b\u3057\u3001<code>scan_pyarrow_dataset</code> \u3092\u4f7f\u3063\u3066 Polars \u3067\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>  Python <p> <code>register</code> \u00b7 <code>execute</code> <pre><code># Input data:\n# products_masterdata.csv with schema {'product_id': Int64, 'product_name': String}\n# products_categories.json with schema {'product_id': Int64, 'category': String}\n# sales_data is a Pandas DataFrame with schema {'product_id': Int64, 'sales': Int64}\n\nwith pl.SQLContext(\n    products_masterdata=pl.scan_csv(\"docs/data/products_masterdata.csv\"),\n    products_categories=pl.scan_ndjson(\"docs/data/products_categories.json\"),\n    sales_data=pl.from_pandas(sales_data),\n    eager_execution=True,\n) as ctx:\n    query = \"\"\"\n    SELECT\n        product_id,\n        product_name,\n        category,\n        sales\n    FROM\n        products_masterdata\n    LEFT JOIN products_categories USING (product_id)\n    LEFT JOIN sales_data USING (product_id)\n    \"\"\"\n    print(ctx.execute(query))\n</code></pre></p> <pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 product_id \u2506 product_name \u2506 category   \u2506 sales \u2502\n\u2502 ---        \u2506 ---          \u2506 ---        \u2506 ---   \u2502\n\u2502 i64        \u2506 str          \u2506 str        \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1          \u2506 Product A    \u2506 Category 1 \u2506 100   \u2502\n\u2502 2          \u2506 Product B    \u2506 Category 1 \u2506 200   \u2502\n\u2502 3          \u2506 Product C    \u2506 Category 2 \u2506 150   \u2502\n\u2502 4          \u2506 Product D    \u2506 Category 2 \u2506 250   \u2502\n\u2502 5          \u2506 Product E    \u2506 Category 3 \u2506 300   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/sql/intro/#_5","title":"\u4e92\u63db\u6027","text":"<p>Polars \u306f SQL \u4ed5\u69d8\u5168\u4f53\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u6700\u3082\u4e00\u822c\u7684\u306a\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u30bf\u30a4\u30d7\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>Note</p> <p>\u53ef\u80fd\u306a\u9650\u308a\u3001Polars \u306f PostgreSQL \u306e\u69cb\u6587\u5b9a\u7fa9\u3068\u95a2\u6570\u306e\u52d5\u4f5c\u306b\u5f93\u3046\u3053\u3068\u3092\u76ee\u6307\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u6a5f\u80fd\u306e\u4e00\u90e8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <ul> <li><code>CREATE</code> \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\uff1a <code>CREATE TABLE xxx AS ...</code></li> <li><code>SELECT</code> \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\uff1a <code>WHERE</code>\u3001<code>ORDER</code>\u3001<code>LIMIT</code>\u3001<code>GROUP BY</code>\u3001<code>UNION</code>\u3001 <code>JOIN</code> \u53e5\u306a\u3069</li> <li>\u5171\u901a\u30c6\u30fc\u30d6\u30eb\u5f0f (CTE) \uff1a <code>WITH tablename AS</code> \u306a\u3069</li> <li>\u30af\u30a8\u30ea\u3092\u8aac\u660e\u3059\u308b\uff1a <code>EXPLAIN SELECT ...</code></li> <li>\u767b\u9332\u6e08\u307f\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e00\u89a7\u8868\u793a\u3059\u308b\uff1a <code>SHOW TABLES</code></li> <li>\u30c6\u30fc\u30d6\u30eb\u3092\u524a\u9664\u3059\u308b\uff1a <code>DROP TABLE tablename</code></li> <li>\u30c6\u30fc\u30d6\u30eb\u3092\u7a7a\u306b\u3059\u308b\uff1a <code>TRUNCATE TABLE tablename</code></li> </ul> <p>\u4ee5\u4e0b\u306f\u3001\u307e\u3060\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u6a5f\u80fd\u306e\u4e00\u90e8\u3067\u3059\uff1a</p> <ul> <li><code>INSERT</code>\u3001<code>UPDATE</code>\u3001<code>DELETE</code> \u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8</li> <li><code>ANALYZE</code> \u306a\u3069\u306e\u30e1\u30bf\u30af\u30a8\u30ea</li> </ul> <p>\u4eca\u5f8c\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u5404\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002</p> <ol> <li> <p>\u52a0\u3048\u3066\u3001\u5171\u901a\u30c6\u30fc\u30d6\u30eb\u30a8\u30af\u30b9\u30d7\u30ec\u30c3\u30b7\u30e7\u30f3 \u3082\u7ba1\u7406\u3057\u307e\u3059\u3002\u00a0\u21a9</p> </li> </ol>"},{"location":"user-guide/sql/select/","title":"\u9078\u629e(SELECT)","text":"<p>Polars SQL \u3067\u306f\u3001<code>SELECT</code> \u6587\u3092\u4f7f\u7528\u3057\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092 <code>DataFrame</code> \u306b\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002Polars SQL \u306e <code>SELECT</code> \u6587\u306e\u57fa\u672c\u7684\u306a\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a</p> <pre><code>SELECT column1, column2, ...\nFROM table_name;\n</code></pre> <p>\u3053\u3053\u3067 <code>column1</code>\u3001<code>column2</code> \u306a\u3069\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u9078\u629e\u3057\u305f\u3044\u5217\u3092\u6307\u3057\u307e\u3059\u3002\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9 <code>*</code> \u3092\u4f7f\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u5217\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002<code>table_name</code> \u306f\u3001\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u30c6\u30fc\u30d6\u30eb\u306e\u540d\u524d\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u3088\u308a\u4e00\u822c\u7684\u306a SELECT \u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>  Python <p> <code>register</code> \u00b7 <code>execute</code> <pre><code>df = pl.DataFrame(\n    {\n        \"city\": [\n            \"New York\",\n            \"Los Angeles\",\n            \"Chicago\",\n            \"Houston\",\n            \"Phoenix\",\n            \"Amsterdam\",\n        ],\n        \"country\": [\"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"Netherlands\"],\n        \"population\": [8399000, 3997000, 2705000, 2320000, 1680000, 900000],\n    }\n)\n\nctx = pl.SQLContext(population=df, eager_execution=True)\n\nprint(ctx.execute(\"SELECT * FROM population\"))\n</code></pre></p> <pre><code>shape: (6, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 city        \u2506 country     \u2506 population \u2502\n\u2502 ---         \u2506 ---         \u2506 ---        \u2502\n\u2502 str         \u2506 str         \u2506 i64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 New York    \u2506 USA         \u2506 8399000    \u2502\n\u2502 Los Angeles \u2506 USA         \u2506 3997000    \u2502\n\u2502 Chicago     \u2506 USA         \u2506 2705000    \u2502\n\u2502 Houston     \u2506 USA         \u2506 2320000    \u2502\n\u2502 Phoenix     \u2506 USA         \u2506 1680000    \u2502\n\u2502 Amsterdam   \u2506 Netherlands \u2506 900000     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/sql/select/#group-by","title":"GROUP BY\uff08\u30b0\u30eb\u30fc\u30d7\u5316\uff09","text":"<p><code>GROUP BY</code> \u53e5\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u5185\u306e\u884c\u3092 1 \u3064\u4ee5\u4e0a\u306e\u5217\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u306b\u5bfe\u3057\u3066\u96c6\u8a08\u95a2\u6570\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>  Python <p> <code>execute</code> <pre><code>result = ctx.execute(\n    \"\"\"\n        SELECT country, AVG(population) as avg_population\n        FROM population\n        GROUP BY country\n    \"\"\"\n)\nprint(result)\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 country     \u2506 avg_population \u2502\n\u2502 ---         \u2506 ---            \u2502\n\u2502 str         \u2506 f64            \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Netherlands \u2506 900000.0       \u2502\n\u2502 USA         \u2506 3.8202e6       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/sql/select/#order-by","title":"ORDER BY\uff08\u4e26\u3079\u66ff\u3048\uff09","text":"<p><code>ORDER BY</code> \u53e5\u306f\u3001\u30af\u30a8\u30ea\u306e\u7d50\u679c\u30bb\u30c3\u30c8\u3092 1 \u3064\u4ee5\u4e0a\u306e\u5217\u3067\u6607\u9806\u307e\u305f\u306f\u964d\u9806\u306b\u4e26\u3079\u66ff\u3048\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002</p>  Python <p> <code>execute</code> <pre><code>result = ctx.execute(\n    \"\"\"\n        SELECT city, population\n        FROM population\n        ORDER BY population\n    \"\"\"\n)\nprint(result)\n</code></pre></p> <pre><code>shape: (6, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 city        \u2506 population \u2502\n\u2502 ---         \u2506 ---        \u2502\n\u2502 str         \u2506 i64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Amsterdam   \u2506 900000     \u2502\n\u2502 Phoenix     \u2506 1680000    \u2502\n\u2502 Houston     \u2506 2320000    \u2502\n\u2502 Chicago     \u2506 2705000    \u2502\n\u2502 Los Angeles \u2506 3997000    \u2502\n\u2502 New York    \u2506 8399000    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/sql/select/#join","title":"JOIN\uff08\u7d50\u5408\uff09","text":"Python <p> <code>register_many</code> \u00b7 <code>execute</code> <pre><code>income = pl.DataFrame(\n    {\n        \"city\": [\n            \"New York\",\n            \"Los Angeles\",\n            \"Chicago\",\n            \"Houston\",\n            \"Amsterdam\",\n            \"Rotterdam\",\n            \"Utrecht\",\n        ],\n        \"country\": [\n            \"USA\",\n            \"USA\",\n            \"USA\",\n            \"USA\",\n            \"Netherlands\",\n            \"Netherlands\",\n            \"Netherlands\",\n        ],\n        \"income\": [55000, 62000, 48000, 52000, 42000, 38000, 41000],\n    }\n)\nctx.register_many(income=income)\nresult = ctx.execute(\n    \"\"\"\n        SELECT country, city, income, population\n        FROM population\n        LEFT JOIN income on population.city = income.city\n    \"\"\"\n)\nprint(result)\n</code></pre></p> <pre><code>shape: (6, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 country     \u2506 city        \u2506 income \u2506 population \u2502\n\u2502 ---         \u2506 ---         \u2506 ---    \u2506 ---        \u2502\n\u2502 str         \u2506 str         \u2506 i64    \u2506 i64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 USA         \u2506 New York    \u2506 55000  \u2506 8399000    \u2502\n\u2502 USA         \u2506 Los Angeles \u2506 62000  \u2506 3997000    \u2502\n\u2502 USA         \u2506 Chicago     \u2506 48000  \u2506 2705000    \u2502\n\u2502 USA         \u2506 Houston     \u2506 52000  \u2506 2320000    \u2502\n\u2502 USA         \u2506 Phoenix     \u2506 null   \u2506 1680000    \u2502\n\u2502 Netherlands \u2506 Amsterdam   \u2506 42000  \u2506 900000     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/sql/select/#_1","title":"\u95a2\u6570","text":"<p>Polars \u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u5e45\u5e83\u3044 SQL \u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ul> <li>\u6570\u5b66\u95a2\u6570\uff1a <code>ABS</code>\u3001<code>EXP</code>\u3001<code>LOG</code>\u3001<code>ASIN</code>\u3001<code>ACOS</code>\u3001<code>ATAN</code> \u306a\u3069</li> <li>\u6587\u5b57\u5217\u95a2\u6570\uff1a <code>LOWER</code>\u3001<code>UPPER</code>\u3001<code>LTRIM</code>\u3001<code>RTRIM</code>\u3001<code>STARTS_WITH</code>\u3001<code>ENDS_WITH</code></li> <li>\u96c6\u8a08\u95a2\u6570\uff1a <code>SUM</code>\u3001<code>AVG</code>\u3001<code>MIN</code>\u3001<code>MAX</code>\u3001<code>COUNT</code>\u3001<code>STDDEV</code>\u3001<code>FIRST</code> \u306a\u3069</li> <li>\u914d\u5217\u95a2\u6570\uff1a <code>EXPLODE</code>\u3001<code>UNNEST</code>\u3001<code>ARRAY_SUM</code>\u3001<code>ARRAY_REVERSE</code> \u306a\u3069</li> </ul> <p>\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u306e\u5b8c\u5168\u306a\u30ea\u30b9\u30c8\u306f\u3001API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001\u30af\u30a8\u30ea\u5185\u3067\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002</p>  Python <p> <code>query</code> <pre><code>result = ctx.execute(\n    \"\"\"\n        SELECT city, population\n        FROM population\n        WHERE STARTS_WITH(country,'U')\n    \"\"\"\n)\nprint(result)\n</code></pre></p> <pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 city        \u2506 population \u2502\n\u2502 ---         \u2506 ---        \u2502\n\u2502 str         \u2506 i64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 New York    \u2506 8399000    \u2502\n\u2502 Los Angeles \u2506 3997000    \u2502\n\u2502 Chicago     \u2506 2705000    \u2502\n\u2502 Houston     \u2506 2320000    \u2502\n\u2502 Phoenix     \u2506 1680000    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/sql/select/#_2","title":"\u30c6\u30fc\u30d6\u30eb\u95a2\u6570","text":"<p>\u5148\u307b\u3069\u306e\u4f8b\u3067\u306f\u3001\u6700\u521d\u306b DataFrame \u3092\u751f\u6210\u3057\u3001<code>SQLContext</code> \u306b\u767b\u9332\u3057\u307e\u3057\u305f\u3002Polars \u3067\u306f\u3001SQL \u30af\u30a8\u30ea\u5185\u3067 <code>read_xxx</code> \u30c6\u30fc\u30d6\u30eb\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001CSV\u3001Parquet\u3001JSON\u3001IPC \u304b\u3089\u76f4\u63a5\u8aad\u307f\u53d6\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002</p>  Python <p> <code>execute</code> <pre><code>result = ctx.execute(\n    \"\"\"\n        SELECT *\n        FROM read_csv('docs/data/iris.csv')\n    \"\"\"\n)\nprint(result)\n</code></pre></p> <pre><code>shape: (150, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 sepal_length \u2506 sepal_width \u2506 petal_length \u2506 petal_width \u2506 species   \u2502\n\u2502 ---          \u2506 ---         \u2506 ---          \u2506 ---         \u2506 ---       \u2502\n\u2502 f64          \u2506 f64         \u2506 f64          \u2506 f64         \u2506 str       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 5.1          \u2506 3.5         \u2506 1.4          \u2506 0.2         \u2506 Setosa    \u2502\n\u2502 4.9          \u2506 3.0         \u2506 1.4          \u2506 0.2         \u2506 Setosa    \u2502\n\u2502 4.7          \u2506 3.2         \u2506 1.3          \u2506 0.2         \u2506 Setosa    \u2502\n\u2502 4.6          \u2506 3.1         \u2506 1.5          \u2506 0.2         \u2506 Setosa    \u2502\n\u2502 5.0          \u2506 3.6         \u2506 1.4          \u2506 0.2         \u2506 Setosa    \u2502\n\u2502 \u2026            \u2506 \u2026           \u2506 \u2026            \u2506 \u2026           \u2506 \u2026         \u2502\n\u2502 6.7          \u2506 3.0         \u2506 5.2          \u2506 2.3         \u2506 Virginica \u2502\n\u2502 6.3          \u2506 2.5         \u2506 5.0          \u2506 1.9         \u2506 Virginica \u2502\n\u2502 6.5          \u2506 3.0         \u2506 5.2          \u2506 2.0         \u2506 Virginica \u2502\n\u2502 6.2          \u2506 3.4         \u2506 5.4          \u2506 2.3         \u2506 Virginica \u2502\n\u2502 5.9          \u2506 3.0         \u2506 5.1          \u2506 1.8         \u2506 Virginica \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/sql/show/","title":"\u30c6\u30fc\u30d6\u30eb\u306e\u8868\u793a\uff08SHOW TABLES\uff09","text":"<p>Polars \u3067\u306f\u3001 <code>SHOW TABLES</code> \u53e5\u3092\u4f7f\u7528\u3057\u3066\u3001\u73fe\u5728\u306e <code>SQLContext</code> \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e00\u89a7\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 DataFrame \u3092 <code>SQLContext</code> \u306b\u767b\u9332\u3059\u308b\u6642\u306b\u3001\u305d\u306e DataFrame \u3092\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 <code>SHOW TABLES</code> \u53e5\u3092\u4f7f\u3046\u3068\u3001\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u306e\u540d\u524d\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>Polars \u306b\u304a\u3051\u308b <code>SHOW TABLES</code> \u53e5\u306e\u69cb\u6587\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p> <pre><code>SHOW TABLES\n</code></pre> <p>Polars \u3067\u306e <code>SHOW TABLES</code> \u53e5\u306e\u4f7f\u7528\u4f8b\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a</p>  Python <p> <code>register</code> \u00b7 <code>execute</code> <pre><code># Create some DataFrames and register them with the SQLContext\ndf1 = pl.LazyFrame(\n    {\n        \"name\": [\"Alice\", \"Bob\", \"Charlie\", \"David\"],\n        \"age\": [25, 30, 35, 40],\n    }\n)\ndf2 = pl.LazyFrame(\n    {\n        \"name\": [\"Ellen\", \"Frank\", \"Gina\", \"Henry\"],\n        \"age\": [45, 50, 55, 60],\n    }\n)\nctx = pl.SQLContext(mytable1=df1, mytable2=df2)\n\ntables = ctx.execute(\"SHOW TABLES\", eager=True)\n\nprint(tables)\n</code></pre></p> <pre><code>shape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 name     \u2502\n\u2502 ---      \u2502\n\u2502 str      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 mytable1 \u2502\n\u2502 mytable2 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u30012 \u3064\u306e DataFrame \u3092\u4f5c\u6210\u3057\u3001\u7570\u306a\u308b\u540d\u524d\u3067 <code>SQLContext</code> \u306b\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001<code>SQLContext</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e <code>execute()</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066 <code>SHOW TABLES</code> \u53e5\u3092\u5b9f\u884c\u3057\u3001\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u3059\u3079\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\u53d6\u5f97\u3057\u305f DataFrame \u306f <code>print()</code> \u95a2\u6570\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\u3002</p> <p><code>SHOW TABLES</code> \u53e5\u306f\u3001\u73fe\u5728\u306e <code>SQLContext</code> \u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u307f\u3092\u4e00\u89a7\u8868\u793a\u3057\u307e\u3059\u3002\u5225\u306e <code>SQLContext</code> \u3084\u5225\u306e Python \u30bb\u30c3\u30b7\u30e7\u30f3\u3067 DataFrame \u3092\u767b\u9332\u3057\u305f\u5834\u5408\u3001<code>SHOW TABLES</code> \u306e\u7d50\u679c\u306b\u306f\u8868\u793a\u3055\u308c\u307e\u305b\u3093\u3002</p>"},{"location":"user-guide/transformations/","title":"\u5909\u63db","text":"<p>\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u7126\u70b9\u306f\u3001\u3055\u307e\u3056\u307e\u306a\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u5909\u63db\u3092\u8aac\u660e\u3057\u3001\u305d\u308c\u3089\u306e\u4f7f\u7528\u4f8b\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3067\u3059\u3002</p> <ul> <li>\u7d50\u5408</li> <li>\u9023\u7d50</li> <li>\u30d4\u30dc\u30c3\u30c8</li> <li>\u30d4\u30dc\u30c3\u30c8\u89e3\u9664(Melt)</li> </ul>"},{"location":"user-guide/transformations/concatenation/","title":"\u9023\u7d50","text":"<p>\u5225\u306e DataFrame \u304b\u3089\u30c7\u30fc\u30bf\u3092\u9023\u7d50\u3059\u308b\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059:</p> <ul> <li>\u540c\u3058\u5217\u3092\u6301\u3064 2 \u3064\u306e DataFrame \u3092 \u5782\u76f4\u65b9\u5411 \u306b\u9023\u7d50\u3057\u3066\u3001\u3088\u308a\u9577\u3044 DataFrame \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059</li> <li>\u91cd\u8907\u3057\u306a\u3044\u5217\u3092\u6301\u3064 2 \u3064\u306e DataFrame \u3092 \u6c34\u5e73\u65b9\u5411 \u306b\u9023\u7d50\u3057\u3066\u3001\u3088\u308a\u5e83\u3044 DataFrame \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059</li> <li>\u884c\u6570\u3068\u5217\u6570\u304c\u7570\u306a\u308b 2 \u3064\u306e DataFrame \u3092 \u659c\u3081\u65b9\u5411 \u306b\u9023\u7d50\u3057\u3066\u3001\u3088\u308a\u9577\u304f\u3066/\u307e\u305f\u306f\u5e83\u3044 DataFrame \u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u5217\u540d\u304c\u91cd\u8907\u3059\u308b\u5834\u5408\u306f\u5024\u304c\u5782\u76f4\u306b\u9023\u7d50\u3055\u308c\u307e\u3059\u3002\u5217\u540d\u304c\u91cd\u8907\u3057\u306a\u3044\u5834\u5408\u306f\u65b0\u3057\u3044\u884c\u3068\u5217\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u6b20\u640d\u5024\u306f <code>null</code> \u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002</li> </ul>"},{"location":"user-guide/transformations/concatenation/#-","title":"\u5782\u76f4\u65b9\u5411\u306e\u9023\u7d50 - \u3088\u308a\u9577\u304f\u306a\u308b","text":"<p>\u5782\u76f4\u65b9\u5411\u306e\u9023\u7d50\u3067\u306f\u3001<code>DataFrames</code> \u306e\u30ea\u30b9\u30c8\u304b\u3089\u3059\u3079\u3066\u306e\u884c\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5358\u4e00\u306e\u9577\u3044 <code>DataFrame</code> \u3092\u4f5c\u6210\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>concat</code> <pre><code>df_v1 = pl.DataFrame(\n    {\n        \"a\": [1],\n        \"b\": [3],\n    }\n)\ndf_v2 = pl.DataFrame(\n    {\n        \"a\": [2],\n        \"b\": [4],\n    }\n)\ndf_vertical_concat = pl.concat(\n    [\n        df_v1,\n        df_v2,\n    ],\n    how=\"vertical\",\n)\nprint(df_vertical_concat)\n</code></pre></p> <p> <code>concat</code> <pre><code>let df_v1 = df!(\n        \"a\"=&gt; &amp;[1],\n        \"b\"=&gt; &amp;[3],\n)?;\nlet df_v2 = df!(\n        \"a\"=&gt; &amp;[2],\n        \"b\"=&gt; &amp;[4],\n)?;\nlet df_vertical_concat = concat(\n    [df_v1.clone().lazy(), df_v2.clone().lazy()],\n    UnionArgs::default(),\n)?\n.collect()?;\nprintln!(\"{}\", &amp;df_vertical_concat);\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 3   \u2502\n\u2502 2   \u2506 4   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>DataFrame \u306e\u30ab\u30e9\u30e0\u540d\u304c\u7570\u306a\u308b\u5834\u5408\u3001\u5782\u76f4\u65b9\u5411\u306e\u9023\u7d50\u306f\u5931\u6557\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/concatenation/#-_1","title":"\u6c34\u5e73\u65b9\u5411\u306e\u7d50\u5408 - \u5e45\u3092\u5e83\u3052\u308b","text":"<p>\u6c34\u5e73\u65b9\u5411\u306e\u7d50\u5408\u3067\u306f\u3001<code>DataFrames</code> \u306e\u30ea\u30b9\u30c8\u304b\u3089\u5168\u3066\u306e\u5217\u30921\u3064\u306e\u5e45\u5e83\u3044 <code>DataFrame</code> \u306b\u7d50\u5408\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>concat</code> <pre><code>df_h1 = pl.DataFrame(\n    {\n        \"l1\": [1, 2],\n        \"l2\": [3, 4],\n    }\n)\ndf_h2 = pl.DataFrame(\n    {\n        \"r1\": [5, 6],\n        \"r2\": [7, 8],\n        \"r3\": [9, 10],\n    }\n)\ndf_horizontal_concat = pl.concat(\n    [\n        df_h1,\n        df_h2,\n    ],\n    how=\"horizontal\",\n)\nprint(df_horizontal_concat)\n</code></pre></p> <p> <code>concat</code> <pre><code>let df_h1 = df!(\n        \"l1\"=&gt; &amp;[1, 2],\n        \"l2\"=&gt; &amp;[3, 4],\n)?;\nlet df_h2 = df!(\n        \"r1\"=&gt; &amp;[5, 6],\n        \"r2\"=&gt; &amp;[7, 8],\n        \"r3\"=&gt; &amp;[9, 10],\n)?;\nlet df_horizontal_concat = polars::functions::concat_df_horizontal(&amp;[df_h1, df_h2])?;\nprintln!(\"{}\", &amp;df_horizontal_concat);\n</code></pre></p> <pre><code>shape: (2, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 l1  \u2506 l2  \u2506 r1  \u2506 r2  \u2506 r3  \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 i64 \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 3   \u2506 5   \u2506 7   \u2506 9   \u2502\n\u2502 2   \u2506 4   \u2506 6   \u2506 8   \u2506 10  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u5217\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u6c34\u5e73\u65b9\u5411\u306e\u7d50\u5408\u306f\u5931\u6557\u3057\u307e\u3059\u3002</p> <p>\u884c\u6570\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u3001\u6700\u5927\u306e\u884c\u6570\u307e\u3067 <code>null</code> \u5024\u3067\u57cb\u3081\u3089\u308c\u307e\u3059\u3002</p>  Python Rust <p> <code>concat</code> <pre><code>df_h1 = pl.DataFrame(\n    {\n        \"l1\": [1, 2],\n        \"l2\": [3, 4],\n    }\n)\ndf_h2 = pl.DataFrame(\n    {\n        \"r1\": [5, 6, 7],\n        \"r2\": [8, 9, 10],\n    }\n)\ndf_horizontal_concat = pl.concat(\n    [\n        df_h1,\n        df_h2,\n    ],\n    how=\"horizontal\",\n)\nprint(df_horizontal_concat)\n</code></pre></p> <p> <code>concat</code> <pre><code>let df_h1 = df!(\n        \"l1\"=&gt; &amp;[1, 2],\n        \"l2\"=&gt; &amp;[3, 4],\n)?;\nlet df_h2 = df!(\n        \"r1\"=&gt; &amp;[5, 6, 7],\n        \"r2\"=&gt; &amp;[8, 9, 10],\n)?;\nlet df_horizontal_concat = polars::functions::concat_df_horizontal(&amp;[df_h1, df_h2])?;\nprintln!(\"{}\", &amp;df_horizontal_concat);\n</code></pre></p> <pre><code>shape: (3, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 l1   \u2506 l2   \u2506 r1  \u2506 r2  \u2502\n\u2502 ---  \u2506 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 i64  \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 3    \u2506 5   \u2506 8   \u2502\n\u2502 2    \u2506 4    \u2506 6   \u2506 9   \u2502\n\u2502 null \u2506 null \u2506 7   \u2506 10  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/concatenation/#-null","title":"\u5bfe\u89d2\u7d50\u5408 - \u9577\u3055\u3068\u5e45\u304c\u5897\u3048\u3001 <code>null</code> \u304c\u5897\u3048\u308b","text":"<p>\u5bfe\u89d2\u7d50\u5408\u3067\u306f\u3001 <code>DataFrames</code> \u306e\u30ea\u30b9\u30c8\u304b\u3089\u5168\u3066\u306e\u884c\u3068\u5217\u30921\u3064\u306e\u9577\u304f\u3066/\u307e\u305f\u306f\u5e45\u5e83\u3044 <code>DataFrame</code> \u306b\u7d50\u5408\u3057\u307e\u3059\u3002</p>  Python Rust <p> <code>concat</code> <pre><code>df_d1 = pl.DataFrame(\n    {\n        \"a\": [1],\n        \"b\": [3],\n    }\n)\ndf_d2 = pl.DataFrame(\n    {\n        \"a\": [2],\n        \"d\": [4],\n    }\n)\n\ndf_diagonal_concat = pl.concat(\n    [\n        df_d1,\n        df_d2,\n    ],\n    how=\"diagonal\",\n)\nprint(df_diagonal_concat)\n</code></pre></p> <p> <code>concat</code> <pre><code>let df_d1 = df!(\n    \"a\"=&gt; &amp;[1],\n    \"b\"=&gt; &amp;[3],\n)?;\nlet df_d2 = df!(\n        \"a\"=&gt; &amp;[2],\n        \"d\"=&gt; &amp;[4],)?;\nlet df_diagonal_concat = polars::functions::concat_df_diagonal(&amp;[df_d1, df_d2])?;\nprintln!(\"{}\", &amp;df_diagonal_concat);\n</code></pre></p> <pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b    \u2506 d    \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2502\n\u2502 i64 \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 3    \u2506 null \u2502\n\u2502 2   \u2506 null \u2506 4    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u5bfe\u89d2\u7d50\u5408\u3067\u306f\u3001\u5217\u540d\u304c\u91cd\u8907\u3057\u306a\u3044\u5834\u5408\u306b null \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002</p> <p>\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u5f62\u72b6\u304c\u4e00\u81f4\u305b\u305a\u3001\u91cd\u8907\u3059\u308b\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30ad\u30fc\u304c\u3042\u308b\u5834\u5408\u306f\u3001concatenate\u3059\u308b\u4ee3\u308f\u308a\u306b \u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7d50\u5408 \u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/concatenation/#_2","title":"\u30ea\u30c1\u30e3\u30f3\u30ad\u30f3\u30b0","text":"<p>concatenation\u306e\u524d\u306b <code>df1</code> \u3068 <code>df2</code> \u3068\u3044\u30462\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u304c\u3042\u308a\u307e\u3059\u3002 <code>df1</code> \u3068 <code>df2</code> \u306e\u5404\u5217\u306f\u30e1\u30e2\u30ea\u4e0a\u306e1\u3064\u4ee5\u4e0a\u306e\u30c1\u30e3\u30f3\u30af\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001concatenation\u4e2d\u306b\u305d\u308c\u305e\u308c\u306e\u5217\u306e\u30c1\u30e3\u30f3\u30af\u304c\u5358\u4e00\u306e\u65b0\u3057\u3044\u30c1\u30e3\u30f3\u30af\u306b\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059 - \u3053\u308c\u3092 \u30ea\u30c1\u30e3\u30f3\u30ad\u30f3\u30b0 \u3068\u547c\u3073\u307e\u3059\u3002\u30ea\u30c1\u30e3\u30f3\u30ad\u30f3\u30b0\u306f\u9ad8\u30b3\u30b9\u30c8\u306a\u64cd\u4f5c\u3067\u3059\u304c\u3001\u5c06\u6765\u306e\u64cd\u4f5c\u304c\u9ad8\u901f\u5316\u3055\u308c\u308b\u305f\u3081\u3001\u3057\u3070\u3057\u3070\u4fa1\u5024\u304c\u3042\u308a\u307e\u3059\u3002 concatenated <code>DataFrame</code> \u3092\u30ea\u30c1\u30e3\u30f3\u30ad\u30f3\u30b0\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001concatenation\u306e\u969b\u306b <code>rechunk = False</code> \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/joins/","title":"\u7d50\u5408","text":""},{"location":"user-guide/transformations/joins/#_2","title":"\u7d50\u5408\u6226\u7565","text":"<p>Polars\u306f\u4ee5\u4e0b\u306e\u7d50\u5408\u6226\u7565\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u304a\u308a\u3001 <code>how</code> \u5f15\u6570\u3067\u6307\u5b9a\u3067\u304d\u307e\u3059:</p> \u6226\u7565 \u8aac\u660e <code>inner</code> \u4e21\u65b9\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u4e00\u81f4\u3059\u308b\u30ad\u30fc\u3092\u6301\u3064\u884c\u3092\u8fd4\u3057\u307e\u3059\u3002\u5de6\u53f3\u3069\u3061\u3089\u304b\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u4e00\u81f4\u3057\u306a\u3044\u884c\u306f\u7834\u68c4\u3055\u308c\u307e\u3059\u3002 <code>left</code> \u5de6\u5074\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u3059\u3079\u3066\u306e\u884c\u3092\u8fd4\u3057\u307e\u3059\u3002\u53f3\u5074\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u4e00\u81f4\u3059\u308b\u3082\u306e\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u53f3\u5074\u306e\u5217\u304c null \u3067\u57cb\u3081\u3089\u308c\u307e\u3059\u3002 <code>outer</code> \u5de6\u53f3\u4e21\u65b9\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u3059\u3079\u3066\u306e\u884c\u3092\u8fd4\u3057\u307e\u3059\u3002\u4e00\u65b9\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u4e00\u81f4\u3059\u308b\u3082\u306e\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u4ed6\u65b9\u306e\u5217\u304c null \u3067\u57cb\u3081\u3089\u308c\u307e\u3059\u3002 <code>outer_coalesce</code> \u5de6\u53f3\u4e21\u65b9\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u3059\u3079\u3066\u306e\u884c\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u306f <code>outer</code> \u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u30ad\u30fc\u5217\u304c\u7d50\u5408\u3055\u308c\u307e\u3059\u3002 <code>cross</code> \u5de6\u5074\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u3059\u3079\u3066\u306e\u884c\u3068\u53f3\u5074\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u3059\u3079\u3066\u306e\u884c\u306e\u30ab\u30eb\u30c6\u30b7\u30a2\u30f3\u7a4d\u3092\u8fd4\u3057\u307e\u3059\u3002\u91cd\u8907\u3059\u308b\u884c\u306f\u4fdd\u6301\u3055\u308c\u307e\u3059\u3002<code>A</code> \u3068 <code>B</code> \u3092 cross join \u3057\u305f\u5834\u5408\u306e\u884c\u6570\u306f\u5e38\u306b <code>len(A) \u00d7 len(B)</code> \u306b\u306a\u308a\u307e\u3059\u3002 <code>semi</code> \u5de6\u5074\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30ad\u30fc\u304c\u53f3\u5074\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u3082\u5b58\u5728\u3059\u308b\u884c\u3092\u8fd4\u3057\u307e\u3059\u3002 <code>anti</code> \u5de6\u5074\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30ad\u30fc\u304c\u53f3\u5074\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306b\u5b58\u5728\u3057\u306a\u3044\u884c\u3092\u8fd4\u3057\u307e\u3059\u3002"},{"location":"user-guide/transformations/joins/#_3","title":"\u5185\u90e8\u7d50\u5408","text":"<p><code>inner</code> \u7d50\u5408\u306f\u3001\u7d50\u5408\u30ad\u30fc\u304c\u4e21\u65b9\u306e <code>DataFrame</code> \u306b\u5b58\u5728\u3059\u308b\u884c\u306e\u307f\u3092\u542b\u3080 <code>DataFrame</code> \u3092\u751f\u6210\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u6b21\u306e 2 \u3064\u306e <code>DataFrame</code> \u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046:</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df_customers = pl.DataFrame(\n    {\n        \"customer_id\": [1, 2, 3],\n        \"name\": [\"Alice\", \"Bob\", \"Charlie\"],\n    }\n)\nprint(df_customers)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df_customers = df! (\n\n    \"customer_id\" =&gt; &amp;[1, 2, 3],\n    \"name\" =&gt; &amp;[\"Alice\", \"Bob\", \"Charlie\"],\n)?;\n\nprintln!(\"{}\", &amp;df_customers);\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 customer_id \u2506 name    \u2502\n\u2502 ---         \u2506 ---     \u2502\n\u2502 i64         \u2506 str     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1           \u2506 Alice   \u2502\n\u2502 2           \u2506 Bob     \u2502\n\u2502 3           \u2506 Charlie \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p></p>  Python Rust <p> <code>DataFrame</code> <pre><code>df_orders = pl.DataFrame(\n    {\n        \"order_id\": [\"a\", \"b\", \"c\"],\n        \"customer_id\": [1, 2, 2],\n        \"amount\": [100, 200, 300],\n    }\n)\nprint(df_orders)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df_orders = df!(\n        \"order_id\"=&gt; &amp;[\"a\", \"b\", \"c\"],\n        \"customer_id\"=&gt; &amp;[1, 2, 2],\n        \"amount\"=&gt; &amp;[100, 200, 300],\n)?;\nprintln!(\"{}\", &amp;df_orders);\n</code></pre></p> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 order_id \u2506 customer_id \u2506 amount \u2502\n\u2502 ---      \u2506 ---         \u2506 ---    \u2502\n\u2502 str      \u2506 i64         \u2506 i64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a        \u2506 1           \u2506 100    \u2502\n\u2502 b        \u2506 2           \u2506 200    \u2502\n\u2502 c        \u2506 2           \u2506 300    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u6ce8\u6587\u3068\u95a2\u9023\u3059\u308b\u9867\u5ba2\u3092\u6301\u3064 <code>DataFrame</code> \u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u3001<code>customer_id</code> \u5217\u3067 <code>inner</code> \u7d50\u5408\u3092\u884c\u3044\u307e\u3059:</p>  Python Rust <p> <code>join</code> <pre><code>df_inner_customer_join = df_customers.join(df_orders, on=\"customer_id\", how=\"inner\")\nprint(df_inner_customer_join)\n</code></pre></p> <p> <code>join</code> <pre><code>let df_inner_customer_join = df_customers\n    .clone()\n    .lazy()\n    .join(\n        df_orders.clone().lazy(),\n        [col(\"customer_id\")],\n        [col(\"customer_id\")],\n        JoinArgs::new(JoinType::Inner),\n    )\n    .collect()?;\nprintln!(\"{}\", &amp;df_inner_customer_join);\n</code></pre></p> <pre><code>shape: (3, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 customer_id \u2506 name  \u2506 order_id \u2506 amount \u2502\n\u2502 ---         \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n\u2502 i64         \u2506 str   \u2506 str      \u2506 i64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1           \u2506 Alice \u2506 a        \u2506 100    \u2502\n\u2502 2           \u2506 Bob   \u2506 b        \u2506 200    \u2502\n\u2502 2           \u2506 Bob   \u2506 c        \u2506 300    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/joins/#_4","title":"\u5de6\u7d50\u5408","text":"<p><code>left</code> \u7d50\u5408\u306f\u3001\u5de6\u5074\u306e <code>DataFrame</code> \u306e\u3059\u3079\u3066\u306e\u884c\u3068\u3001\u53f3\u5074\u306e <code>DataFrame</code> \u306e\u7d50\u5408\u30ad\u30fc\u304c\u5de6\u5074\u306e <code>DataFrame</code> \u306b\u5b58\u5728\u3059\u308b\u884c\u306e\u307f\u3092\u542b\u3080 <code>DataFrame</code> \u3092\u751f\u6210\u3057\u307e\u3059\u3002\u4e0a\u8a18\u306e\u4f8b\u3092\u4f7f\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u9867\u5ba2\u3068\u305d\u308c\u3089\u306e\u6ce8\u6587\uff08\u6ce8\u6587\u306e\u6709\u7121\u306b\u95a2\u308f\u3089\u305a\uff09\u3092\u542b\u3080 <code>DataFrame</code> \u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001<code>left</code> \u7d50\u5408\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p>  Python Rust <p> <code>join</code> <pre><code>df_left_join = df_customers.join(df_orders, on=\"customer_id\", how=\"left\")\nprint(df_left_join)\n</code></pre></p> <p> <code>join</code> <pre><code>let df_left_join = df_customers\n    .clone()\n    .lazy()\n    .join(\n        df_orders.clone().lazy(),\n        [col(\"customer_id\")],\n        [col(\"customer_id\")],\n        JoinArgs::new(JoinType::Left),\n    )\n    .collect()?;\nprintln!(\"{}\", &amp;df_left_join);\n</code></pre></p> <pre><code>shape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 customer_id \u2506 name    \u2506 order_id \u2506 amount \u2502\n\u2502 ---         \u2506 ---     \u2506 ---      \u2506 ---    \u2502\n\u2502 i64         \u2506 str     \u2506 str      \u2506 i64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1           \u2506 Alice   \u2506 a        \u2506 100    \u2502\n\u2502 2           \u2506 Bob     \u2506 b        \u2506 200    \u2502\n\u2502 2           \u2506 Bob     \u2506 c        \u2506 300    \u2502\n\u2502 3           \u2506 Charlie \u2506 null     \u2506 null   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>customer_id</code> \u304c <code>3</code> \u306e\u9867\u5ba2\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304c null \u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u9867\u5ba2\u306b\u306f\u6ce8\u6587\u304c\u306a\u3044\u305f\u3081\u3067\u3059\u3002</p>"},{"location":"user-guide/transformations/joins/#_5","title":"\u5916\u90e8\u7d50\u5408","text":"<p><code>outer</code> \u7d50\u5408\u306f\u3001\u4e21\u65b9\u306e <code>DataFrame</code> \u306e\u3059\u3079\u3066\u306e\u884c\u3092\u542b\u3080 <code>DataFrame</code> \u3092\u751f\u6210\u3057\u307e\u3059\u3002\u7d50\u5408\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u5217\u306f null \u306b\u306a\u308a\u307e\u3059\u3002\u4e0a\u8a18\u306e 2 \u3064\u306e <code>DataFrame</code> \u306b\u5bfe\u3057\u3066 <code>outer</code> \u7d50\u5408\u3092\u884c\u3046\u3068\u3001<code>left</code> \u7d50\u5408\u3068\u4f3c\u305f <code>DataFrame</code> \u304c\u751f\u6210\u3055\u308c\u307e\u3059:</p>  Python Rust <p> <code>join</code> <pre><code>df_outer_join = df_customers.join(df_orders, on=\"customer_id\", how=\"outer\")\nprint(df_outer_join)\n</code></pre></p> <p> <code>join</code> <pre><code>let df_outer_join = df_customers\n    .clone()\n    .lazy()\n    .join(\n        df_orders.clone().lazy(),\n        [col(\"customer_id\")],\n        [col(\"customer_id\")],\n        JoinArgs::new(JoinType::Outer),\n    )\n    .collect()?;\nprintln!(\"{}\", &amp;df_outer_join);\n</code></pre></p> <pre><code>shape: (4, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 customer_id \u2506 name    \u2506 order_id \u2506 customer_id_right \u2506 amount \u2502\n\u2502 ---         \u2506 ---     \u2506 ---      \u2506 ---               \u2506 ---    \u2502\n\u2502 i64         \u2506 str     \u2506 str      \u2506 i64               \u2506 i64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1           \u2506 Alice   \u2506 a        \u2506 1                 \u2506 100    \u2502\n\u2502 2           \u2506 Bob     \u2506 b        \u2506 2                 \u2506 200    \u2502\n\u2502 2           \u2506 Bob     \u2506 c        \u2506 2                 \u2506 300    \u2502\n\u2502 3           \u2506 Charlie \u2506 null     \u2506 null              \u2506 null   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/joins/#_6","title":"\u5916\u90e8\u7d50\u5408\u3068\u30b3\u30a2\u30ec\u30b9","text":"<p><code>outer_coalesce</code> \u7d50\u5408\u306f\u3001<code>outer</code> \u7d50\u5408\u306e\u3088\u3046\u306b\u4e21\u65b9\u306e <code>DataFrames</code> \u304b\u3089\u3059\u3079\u3066\u306e\u884c\u3092\u7d50\u5408\u3057\u307e\u3059\u304c\u3001\u7d50\u5408\u30ad\u30fc\u306e\u5024\u3092\u30b3\u30a2\u30ec\u30b9\u3057\u3066\u5358\u4e00\u306e\u5217\u306b\u30de\u30fc\u30b8\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30ad\u30fc\u5217\u306eNULL\u3092\u53ef\u80fd\u306a\u9650\u308a\u907f\u3051\u3066\u3001\u7d50\u5408\u30ad\u30fc\u306e\u7d71\u4e00\u3055\u308c\u305f\u8868\u793a\u3092\u78ba\u4fdd\u3057\u307e\u3059\u3002\u524d\u8ff0\u306e2\u3064\u306e <code>DataFrames</code> \u3092\u4f7f\u3063\u3066\u3001outer \u7d50\u5408\u3068\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046:</p>  Python Rust <p> <code>join</code> <pre><code>df_outer_coalesce_join = df_customers.join(\n    df_orders, on=\"customer_id\", how=\"outer_coalesce\"\n)\nprint(df_outer_coalesce_join)\n</code></pre></p> <p> <code>join</code> <pre><code>let df_outer_join = df_customers\n    .clone()\n    .lazy()\n    .join(\n        df_orders.clone().lazy(),\n        [col(\"customer_id\")],\n        [col(\"customer_id\")],\n        JoinArgs::new(JoinType::Outer),\n    )\n    .collect()?;\nprintln!(\"{}\", &amp;df_outer_join);\n</code></pre></p> <pre><code>shape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 customer_id \u2506 name    \u2506 order_id \u2506 amount \u2502\n\u2502 ---         \u2506 ---     \u2506 ---      \u2506 ---    \u2502\n\u2502 i64         \u2506 str     \u2506 str      \u2506 i64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1           \u2506 Alice   \u2506 a        \u2506 100    \u2502\n\u2502 2           \u2506 Bob     \u2506 b        \u2506 200    \u2502\n\u2502 2           \u2506 Bob     \u2506 c        \u2506 300    \u2502\n\u2502 3           \u2506 Charlie \u2506 null     \u2506 null   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p><code>outer</code> \u7d50\u5408\u3067\u306f <code>customer_id</code> \u3068 <code>customer_id_right</code> \u306e\u5217\u304c\u5225\u3005\u306e\u307e\u307e\u3067\u3059\u304c\u3001<code>outer_coalesce</code> \u7d50\u5408\u3067\u306f \u3053\u308c\u3089\u306e\u5217\u304c\u5358\u4e00\u306e <code>customer_id</code> \u5217\u306b\u30de\u30fc\u30b8\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/joins/#_7","title":"\u30af\u30ed\u30b9\u7d50\u5408","text":"<p><code>\u30af\u30ed\u30b9</code>\u7d50\u5408\u306f\u30012\u3064\u306e<code>DataFrame</code>\u306e\u30ab\u30eb\u30c6\u30b7\u30a2\u30f3\u7a4d\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u5de6\u5074\u306e<code>DataFrame</code>\u306e\u5404\u884c\u304c\u53f3\u5074\u306e<code>DataFrame</code>\u306e\u5404\u884c\u3068\u7d50\u5408\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002<code>\u30af\u30ed\u30b9</code>\u7d50\u5408\u306f\u30012\u3064\u306e<code>DataFrame</code>\u306e\u5217\u306e\u3059\u3079\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u6301\u3064<code>DataFrame</code>\u3092\u4f5c\u6210\u3059\u308b\u306e\u306b\u4fbf\u5229\u3067\u3059\u3002\u4ee5\u4e0b\u306e2\u3064\u306e<code>DataFrame</code>\u3092\u4f8b\u306b\u53d6\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df_colors = pl.DataFrame(\n    {\n        \"color\": [\"red\", \"blue\", \"green\"],\n    }\n)\nprint(df_colors)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df_colors = df!(\n        \"color\"=&gt; &amp;[\"red\", \"blue\", \"green\"],\n)?;\nprintln!(\"{}\", &amp;df_colors);\n</code></pre></p> <pre><code>shape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 color \u2502\n\u2502 ---   \u2502\n\u2502 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 red   \u2502\n\u2502 blue  \u2502\n\u2502 green \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p></p>  Python Rust <p> <code>DataFrame</code> <pre><code>df_sizes = pl.DataFrame(\n    {\n        \"size\": [\"S\", \"M\", \"L\"],\n    }\n)\nprint(df_sizes)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df_sizes = df!(\n        \"size\"=&gt; &amp;[\"S\", \"M\", \"L\"],\n)?;\nprintln!(\"{}\", &amp;df_sizes);\n</code></pre></p> <pre><code>shape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 size \u2502\n\u2502 ---  \u2502\n\u2502 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 S    \u2502\n\u2502 M    \u2502\n\u2502 L    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u308c\u3067\u3001<code>\u30af\u30ed\u30b9</code>\u7d50\u5408\u3092\u4f7f\u3063\u3066\u3001\u8272\u3068\u30b5\u30a4\u30ba\u306e\u3059\u3079\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u542b\u3080<code>DataFrame</code>\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059:</p>  Python Rust <p> <code>join</code> <pre><code>df_cross_join = df_colors.join(df_sizes, how=\"cross\")\nprint(df_cross_join)\n</code></pre></p> <p> <code>join</code> <pre><code>let df_cross_join = df_colors\n    .clone()\n    .lazy()\n    .cross_join(df_sizes.clone().lazy())\n    .collect()?;\nprintln!(\"{}\", &amp;df_cross_join);\n</code></pre></p> <pre><code>shape: (9, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 color \u2506 size \u2502\n\u2502 ---   \u2506 ---  \u2502\n\u2502 str   \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 red   \u2506 S    \u2502\n\u2502 red   \u2506 M    \u2502\n\u2502 red   \u2506 L    \u2502\n\u2502 blue  \u2506 S    \u2502\n\u2502 blue  \u2506 M    \u2502\n\u2502 blue  \u2506 L    \u2502\n\u2502 green \u2506 S    \u2502\n\u2502 green \u2506 M    \u2502\n\u2502 green \u2506 L    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p></p> <p><code>inner</code>\u3001<code>left</code>\u3001<code>outer</code>\u3001<code>cross</code>\u7d50\u5408\u306e\u6226\u7565\u306f\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a19\u6e96\u7684\u306a\u3082\u306e\u3067\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u3042\u307e\u308a\u99b4\u67d3\u307f\u306e\u306a\u3044<code>semi</code>\u3001<code>anti</code>\u3001<code>asof</code>\u7d50\u5408\u306e\u6226\u7565\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/joins/#_8","title":"\u534a\u7d50\u5408","text":"<p><code>semi</code> \u7d50\u5408\u306f\u3001\u7d50\u5408\u30ad\u30fc\u304c\u53f3\u5074\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u3082\u5b58\u5728\u3059\u308b\u5de6\u5074\u306e\u30d5\u30ec\u30fc\u30e0\u306e\u884c\u3092\u3059\u3079\u3066\u8fd4\u3057\u307e\u3059\u3002\u6b21\u306e\u3088\u3046\u306a\u30b7\u30ca\u30ea\u30aa\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u30ab\u30fc\u30ec\u30f3\u30bf\u30eb\u4f1a\u793e\u306b\u306f\u3001\u305d\u308c\u305e\u308c\u306b\u4e00\u610f\u306e <code>id</code> \u3092\u6301\u3064\u8eca\u304c\u767b\u9332\u3055\u308c\u305f <code>DataFrame</code> \u304c\u3042\u308a\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df_cars = pl.DataFrame(\n    {\n        \"id\": [\"a\", \"b\", \"c\"],\n        \"make\": [\"ford\", \"toyota\", \"bmw\"],\n    }\n)\nprint(df_cars)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df_cars = df!(\n        \"id\"=&gt; &amp;[\"a\", \"b\", \"c\"],\n        \"make\"=&gt; &amp;[\"ford\", \"toyota\", \"bmw\"],\n)?;\nprintln!(\"{}\", &amp;df_cars);\n</code></pre></p> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 make   \u2502\n\u2502 --- \u2506 ---    \u2502\n\u2502 str \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 ford   \u2502\n\u2502 b   \u2506 toyota \u2502\n\u2502 c   \u2506 bmw    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u4f1a\u793e\u306b\u306f\u3001\u8eca\u4e21\u306b\u5b9f\u65bd\u3055\u308c\u305f\u4fee\u7406\u30b8\u30e7\u30d6\u3092\u793a\u3059\u5225\u306e <code>DataFrame</code> \u304c\u3042\u308a\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df_repairs = pl.DataFrame(\n    {\n        \"id\": [\"c\", \"c\"],\n        \"cost\": [100, 200],\n    }\n)\nprint(df_repairs)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df_repairs = df!(\n        \"id\"=&gt; &amp;[\"c\", \"c\"],\n        \"cost\"=&gt; &amp;[100, 200],\n)?;\nprintln!(\"{}\", &amp;df_repairs);\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 cost \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 c   \u2506 100  \u2502\n\u2502 c   \u2506 200  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u8cea\u554f\u306b\u7b54\u3048\u305f\u3044\u3067\u3059: \u3069\u306e\u8eca\u304c\u4fee\u7406\u3092\u53d7\u3051\u305f\u306e\u3067\u3057\u3087\u3046\u304b?</p> <p>\u5185\u90e8\u7d50\u5408 (inner join) \u3067\u306f\u3001\u3053\u306e\u8cea\u554f\u306b\u76f4\u63a5\u7b54\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u3001\u8907\u6570\u56de\u306e\u4fee\u7406\u30b8\u30e7\u30d6\u3092\u53d7\u3051\u305f\u8eca\u4e21\u306b\u3064\u3044\u3066\u3001\u8907\u6570\u306e\u884c\u304c\u751f\u6210\u3055\u308c\u308b\u305f\u3081\u3067\u3059:</p>  Python Rust <p> <code>join</code> <pre><code>df_inner_join = df_cars.join(df_repairs, on=\"id\", how=\"inner\")\nprint(df_inner_join)\n</code></pre></p> <p> <code>join</code> <pre><code>let df_inner_join = df_cars\n    .clone()\n    .lazy()\n    .inner_join(df_repairs.clone().lazy(), col(\"id\"), col(\"id\"))\n    .collect()?;\nprintln!(\"{}\", &amp;df_inner_join);\n</code></pre></p> <pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 make \u2506 cost \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2502\n\u2502 str \u2506 str  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 c   \u2506 bmw  \u2506 100  \u2502\n\u2502 c   \u2506 bmw  \u2506 200  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3057\u304b\u3057\u3001\u30bb\u30df\u7d50\u5408 (semi join) \u3092\u4f7f\u3048\u3070\u3001\u4fee\u7406\u30b8\u30e7\u30d6\u3092\u53d7\u3051\u305f\u8eca\u4e21\u306b\u3064\u3044\u3066\u30011\u884c\u305a\u3064\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002</p>  Python Rust <p> <code>join</code> <pre><code>df_semi_join = df_cars.join(df_repairs, on=\"id\", how=\"semi\")\nprint(df_semi_join)\n</code></pre></p> <p> <code>join</code> <pre><code>let df_semi_join = df_cars\n    .clone()\n    .lazy()\n    .join(\n        df_repairs.clone().lazy(),\n        [col(\"id\")],\n        [col(\"id\")],\n        JoinArgs::new(JoinType::Semi),\n    )\n    .collect()?;\nprintln!(\"{}\", &amp;df_semi_join);\n</code></pre></p> <pre><code>shape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 make \u2502\n\u2502 --- \u2506 ---  \u2502\n\u2502 str \u2506 str  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 c   \u2506 bmw  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/joins/#_9","title":"\u9006\u7d50\u5408","text":"<p>\u3053\u306e\u4f8b\u3092\u7d9a\u3051\u308b\u3068\u3001\u5225\u306e\u8cea\u554f\u3068\u3057\u3066\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u8003\u3048\u3089\u308c\u307e\u3059: \u3069\u306e\u8eca\u306b\u3082\u4fee\u7406\u304c\u884c\u308f\u308c\u3066\u3044\u306a\u3044\u306e\u306f\u3069\u308c\u3067\u3059\u304b? \u9006\u7d50\u5408\u3092\u4f7f\u3046\u3068\u3001<code>df_repairs</code> DataFrame \u306b\u5b58\u5728\u3057\u306a\u3044 <code>id</code> \u3092\u6301\u3064 <code>df_cars</code> \u306e\u8eca\u3092\u793a\u3059 DataFrame \u304c\u5f97\u3089\u308c\u307e\u3059\u3002</p>  Python Rust <p> <code>join</code> <pre><code>df_anti_join = df_cars.join(df_repairs, on=\"id\", how=\"anti\")\nprint(df_anti_join)\n</code></pre></p> <p> <code>join</code> <pre><code>let df_anti_join = df_cars\n    .clone()\n    .lazy()\n    .join(\n        df_repairs.clone().lazy(),\n        [col(\"id\")],\n        [col(\"id\")],\n        JoinArgs::new(JoinType::Anti),\n    )\n    .collect()?;\nprintln!(\"{}\", &amp;df_anti_join);\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 make   \u2502\n\u2502 --- \u2506 ---    \u2502\n\u2502 str \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 ford   \u2502\n\u2502 b   \u2506 toyota \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/joins/#_10","title":"\u76f4\u524d\u306e\u5f15\u7528","text":"<p><code>asof</code> \u7d50\u5408\u306f\u5de6\u7d50\u5408\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u304c\u3001\u7b49\u3057\u3044\u30ad\u30fc\u3067\u306f\u306a\u304f\u6700\u3082\u8fd1\u3044\u30ad\u30fc\u3067\u30de\u30c3\u30c1\u3055\u305b\u307e\u3059\u3002 Polars \u3067\u306f <code>join_asof</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066 asof \u7d50\u5408\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u6b21\u306e\u3088\u3046\u306a\u30b7\u30ca\u30ea\u30aa\u3092\u8003\u3048\u307e\u3057\u3087\u3046: \u682a\u5f0f\u4ef2\u4ecb\u696d\u8005\u306b\u306f <code>df_trades</code> \u3068\u3044\u3046\u53d6\u5f15\u8a18\u9332\u306e DataFrame \u304c\u3042\u308a\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df_trades = pl.DataFrame(\n    {\n        \"time\": [\n            datetime(2020, 1, 1, 9, 1, 0),\n            datetime(2020, 1, 1, 9, 1, 0),\n            datetime(2020, 1, 1, 9, 3, 0),\n            datetime(2020, 1, 1, 9, 6, 0),\n        ],\n        \"stock\": [\"A\", \"B\", \"B\", \"C\"],\n        \"trade\": [101, 299, 301, 500],\n    }\n)\nprint(df_trades)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>use chrono::prelude::*;\nlet df_trades = df!(\n    \"time\"=&gt; &amp;[\n    NaiveDate::from_ymd_opt(2020, 1, 1).unwrap().and_hms_opt(9, 1, 0).unwrap(),\n    NaiveDate::from_ymd_opt(2020, 1, 1).unwrap().and_hms_opt(9, 1, 0).unwrap(),\n    NaiveDate::from_ymd_opt(2020, 1, 1).unwrap().and_hms_opt(9, 3, 0).unwrap(),\n    NaiveDate::from_ymd_opt(2020, 1, 1).unwrap().and_hms_opt(9, 6, 0).unwrap(),\n        ],\n        \"stock\"=&gt; &amp;[\"A\", \"B\", \"B\", \"C\"],\n        \"trade\"=&gt; &amp;[101, 299, 301, 500],\n)?;\nprintln!(\"{}\", &amp;df_trades);\n</code></pre></p> <pre><code>shape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time                \u2506 stock \u2506 trade \u2502\n\u2502 ---                 \u2506 ---   \u2506 ---   \u2502\n\u2502 datetime[\u03bcs]        \u2506 str   \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 09:01:00 \u2506 A     \u2506 101   \u2502\n\u2502 2020-01-01 09:01:00 \u2506 B     \u2506 299   \u2502\n\u2502 2020-01-01 09:03:00 \u2506 B     \u2506 301   \u2502\n\u2502 2020-01-01 09:06:00 \u2506 C     \u2506 500   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u4ef2\u4ecb\u696d\u8005\u306b\u306f\u3001\u3053\u308c\u3089\u306e\u682a\u5f0f\u306e\u4fa1\u683c\u60c5\u5831\u3092\u793a\u3059 <code>df_quotes</code> \u3068\u3044\u3046\u5225\u306e DataFrame \u3082\u3042\u308a\u307e\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df_quotes = pl.DataFrame(\n    {\n        \"time\": [\n            datetime(2020, 1, 1, 9, 0, 0),\n            datetime(2020, 1, 1, 9, 2, 0),\n            datetime(2020, 1, 1, 9, 4, 0),\n            datetime(2020, 1, 1, 9, 6, 0),\n        ],\n        \"stock\": [\"A\", \"B\", \"C\", \"A\"],\n        \"quote\": [100, 300, 501, 102],\n    }\n)\n\nprint(df_quotes)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df_quotes = df!(\n        \"time\"=&gt; &amp;[\n    NaiveDate::from_ymd_opt(2020, 1, 1).unwrap().and_hms_opt(9, 0, 0).unwrap(),\n    NaiveDate::from_ymd_opt(2020, 1, 1).unwrap().and_hms_opt(9, 2, 0).unwrap(),\n    NaiveDate::from_ymd_opt(2020, 1, 1).unwrap().and_hms_opt(9, 4, 0).unwrap(),\n    NaiveDate::from_ymd_opt(2020, 1, 1).unwrap().and_hms_opt(9, 6, 0).unwrap(),\n        ],\n        \"stock\"=&gt; &amp;[\"A\", \"B\", \"C\", \"A\"],\n        \"quote\"=&gt; &amp;[100, 300, 501, 102],\n)?;\n\nprintln!(\"{}\", &amp;df_quotes);\n</code></pre></p> <pre><code>shape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time                \u2506 stock \u2506 quote \u2502\n\u2502 ---                 \u2506 ---   \u2506 ---   \u2502\n\u2502 datetime[\u03bcs]        \u2506 str   \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 09:00:00 \u2506 A     \u2506 100   \u2502\n\u2502 2020-01-01 09:02:00 \u2506 B     \u2506 300   \u2502\n\u2502 2020-01-01 09:04:00 \u2506 C     \u2506 501   \u2502\n\u2502 2020-01-01 09:06:00 \u2506 A     \u2506 102   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u5404\u53d6\u5f15\u306b\u3064\u3044\u3066\u3001\u53d6\u5f15\u306e\u76f4\u524d\u306b\u63d0\u793a\u3055\u308c\u305f\u6700\u65b0\u306e\u4fa1\u683c\u60c5\u5831\u3092\u8868\u793a\u3059\u308b DataFrame \u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f <code>join_asof</code> \u3092\u4f7f\u3044\u307e\u3059\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306e <code>strategy = \"backward\"</code> \u3092\u4f7f\u7528\uff09\u3002 \u682a\u5f0f\u3054\u3068\u306b\u53d6\u5f15\u3068\u4fa1\u683c\u60c5\u5831\u304c\u6b63\u3057\u304f\u30de\u30c3\u30c1\u3059\u308b\u3088\u3046\u3001<code>by=\"stock\"</code> \u3092\u6307\u5b9a\u3057\u3066\u4e8b\u524d\u306e\u6b63\u78ba\u306a\u7d50\u5408\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>  Python Rust <p> <code>join_asof</code> <pre><code>df_asof_join = df_trades.join_asof(df_quotes, on=\"time\", by=\"stock\")\nprint(df_asof_join)\n</code></pre></p> <p> <code>join_asof</code> <pre><code>let df_asof_join = df_trades.join_asof_by(\n    &amp;df_quotes,\n    \"time\",\n    \"time\",\n    [\"stock\"],\n    [\"stock\"],\n    AsofStrategy::Backward,\n    None,\n)?;\nprintln!(\"{}\", &amp;df_asof_join);\n</code></pre></p> <pre><code>shape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time                \u2506 stock \u2506 trade \u2506 quote \u2502\n\u2502 ---                 \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n\u2502 datetime[\u03bcs]        \u2506 str   \u2506 i64   \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 09:01:00 \u2506 A     \u2506 101   \u2506 100   \u2502\n\u2502 2020-01-01 09:01:00 \u2506 B     \u2506 299   \u2506 null  \u2502\n\u2502 2020-01-01 09:03:00 \u2506 B     \u2506 301   \u2506 300   \u2502\n\u2502 2020-01-01 09:06:00 \u2506 C     \u2506 500   \u2506 501   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u53d6\u5f15\u3068\u4fa1\u683c\u60c5\u5831\u306e\u9593\u306b\u4e00\u5b9a\u306e\u6642\u9593\u7bc4\u56f2\u3092\u8a2d\u3051\u305f\u3044\u5834\u5408\u306f\u3001<code>tolerance</code> \u5f15\u6570\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u53d6\u5f15\u306e 1 \u5206\u524d\u307e\u3067\u306e\u4fa1\u683c\u60c5\u5831\u3092\u7d50\u5408\u3057\u305f\u3044\u306e\u3067\u3001<code>tolerance = \"1m\"</code> \u3068\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002</p>  Python <pre><code>df_asof_tolerance_join = df_trades.join_asof(\n    df_quotes, on=\"time\", by=\"stock\", tolerance=\"1m\"\n)\nprint(df_asof_tolerance_join)\n</code></pre> <pre><code>shape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time                \u2506 stock \u2506 trade \u2506 quote \u2502\n\u2502 ---                 \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n\u2502 datetime[\u03bcs]        \u2506 str   \u2506 i64   \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 09:01:00 \u2506 A     \u2506 101   \u2506 100   \u2502\n\u2502 2020-01-01 09:01:00 \u2506 B     \u2506 299   \u2506 null  \u2502\n\u2502 2020-01-01 09:03:00 \u2506 B     \u2506 301   \u2506 300   \u2502\n\u2502 2020-01-01 09:06:00 \u2506 C     \u2506 500   \u2506 null  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/melt/","title":"\u30d4\u30dc\u30c3\u30c8\u89e3\u9664(Melts)","text":"<p>\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u6a2a\u5f62\u5f0f\u304b\u3089\u7e26\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b Melt \u64cd\u4f5c</p>"},{"location":"user-guide/transformations/melt/#_1","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","text":"Python Rust <p> <code>DataFrame</code> <pre><code>import polars as pl\n\ndf = pl.DataFrame(\n    {\n        \"A\": [\"a\", \"b\", \"a\"],\n        \"B\": [1, 3, 5],\n        \"C\": [10, 11, 12],\n        \"D\": [2, 4, 6],\n    }\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df = df!(\n        \"A\"=&gt; &amp;[\"a\", \"b\", \"a\"],\n        \"B\"=&gt; &amp;[1, 3, 5],\n        \"C\"=&gt; &amp;[10, 11, 12],\n        \"D\"=&gt; &amp;[2, 4, 6],\n)?;\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (3, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 A   \u2506 B   \u2506 C   \u2506 D   \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1   \u2506 10  \u2506 2   \u2502\n\u2502 b   \u2506 3   \u2506 11  \u2506 4   \u2502\n\u2502 a   \u2506 5   \u2506 12  \u2506 6   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/melt/#eager-lazy","title":"Eager + lazy","text":"<p><code>Eager</code> \u3068 <code>lazy</code> \u306f\u540c\u3058 API \u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002</p>  Python Rust <p> <code>melt</code> <pre><code>out = df.melt(id_vars=[\"A\", \"B\"], value_vars=[\"C\", \"D\"])\nprint(out)\n</code></pre></p> <p> <code>melt</code> <pre><code>let out = df.melt([\"A\", \"B\"], [\"C\", \"D\"])?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (6, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 A   \u2506 B   \u2506 variable \u2506 value \u2502\n\u2502 --- \u2506 --- \u2506 ---      \u2506 ---   \u2502\n\u2502 str \u2506 i64 \u2506 str      \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1   \u2506 C        \u2506 10    \u2502\n\u2502 b   \u2506 3   \u2506 C        \u2506 11    \u2502\n\u2502 a   \u2506 5   \u2506 C        \u2506 12    \u2502\n\u2502 a   \u2506 1   \u2506 D        \u2506 2     \u2502\n\u2502 b   \u2506 3   \u2506 D        \u2506 4     \u2502\n\u2502 a   \u2506 5   \u2506 D        \u2506 6     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/pivot/","title":"\u30d4\u30dc\u30c3\u30c8","text":"<p><code>DataFrame</code> \u306e\u5217\u3092\u30d4\u30dc\u30c3\u30c8\u3057\u3001\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u306e\u96c6\u8a08\u3092\u5b9f\u884c\u3057\u307e\u3059:</p> <ul> <li>first</li> <li>sum</li> <li>min</li> <li>max</li> <li>mean</li> <li>median</li> </ul> <p>\u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\u306f\u30011\u3064\u307e\u305f\u306f\u8907\u6570\u306e\u5217\u306b\u3088\u308b\u30b0\u30eb\u30fc\u30d7\u5316\uff08\u3053\u308c\u3089\u304c\u65b0\u3057\u3044 y \u8ef8\u306b\u306a\u308a\u307e\u3059\uff09\u3001\u30d4\u30dc\u30c3\u30c8\u3055\u308c\u308b\u5217\uff08\u3053\u308c\u304c\u65b0\u3057\u3044 x \u8ef8\u306b\u306a\u308a\u307e\u3059\uff09\u3001\u304a\u3088\u3073\u96c6\u8a08\u304b\u3089\u6210\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/pivot/#_2","title":"\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8","text":"Python Rust <p> <code>DataFrame</code> <pre><code>df = pl.DataFrame(\n    {\n        \"foo\": [\"A\", \"A\", \"B\", \"B\", \"C\"],\n        \"N\": [1, 2, 2, 4, 2],\n        \"bar\": [\"k\", \"l\", \"m\", \"n\", \"o\"],\n    }\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let df = df!(\n        \"foo\"=&gt; [\"A\", \"A\", \"B\", \"B\", \"C\"],\n        \"bar\"=&gt; [\"k\", \"l\", \"m\", \"n\", \"o\"],\n        \"N\"=&gt; [1, 2, 2, 4, 2],\n)?;\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 N   \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A   \u2506 1   \u2506 k   \u2502\n\u2502 A   \u2506 2   \u2506 l   \u2502\n\u2502 B   \u2506 2   \u2506 m   \u2502\n\u2502 B   \u2506 4   \u2506 n   \u2502\n\u2502 C   \u2506 2   \u2506 o   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/pivot/#eager","title":"Eager","text":"Python Rust <p> <code>pivot</code> <pre><code>out = df.pivot(index=\"foo\", columns=\"bar\", values=\"N\", aggregate_function=\"first\")\nprint(out)\n</code></pre></p> <p> <code>pivot</code> <pre><code>let out = pivot(&amp;df, [\"foo\"], [\"bar\"], Some([\"N\"]), false, None, None)?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (3, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 k    \u2506 l    \u2506 m    \u2506 n    \u2506 o    \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2506 i64  \u2506 i64  \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A   \u2506 1    \u2506 2    \u2506 null \u2506 null \u2506 null \u2502\n\u2502 B   \u2506 null \u2506 null \u2506 2    \u2506 4    \u2506 null \u2502\n\u2502 C   \u2506 null \u2506 null \u2506 null \u2506 null \u2506 2    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/pivot/#lazy","title":"Lazy","text":"<p>Polars \u306e <code>LazyFrame</code> \u306f\u3001\u5e38\u306b\u8a08\u7b97\u306e\u30b9\u30ad\u30fc\u30de\u3092\u9759\u7684\u306b\uff08\u30af\u30a8\u30ea\u3092\u53ce\u96c6\u3059\u308b\u524d\u306b\uff09\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30d4\u30dc\u30c3\u30c8\u306e\u51fa\u529b\u30b9\u30ad\u30fc\u30de\u306f\u30c7\u30fc\u30bf\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3001\u30af\u30a8\u30ea\u3092\u5b9f\u884c\u305b\u305a\u306b\u30b9\u30ad\u30fc\u30de\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002</p> <p>Polars \u306f Spark \u306e\u3088\u3046\u306b\u3053\u306e\u4e8b\u5b9f\u3092\u62bd\u8c61\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u304c\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u81ea\u5206\u306e\u8db3\u3092\u6483\u3064\u3053\u3068\u306e\u306a\u3044\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30b9\u30c8\u306f\u660e\u78ba\u306b\u793a\u3055\u308c\u308b\u3079\u304d\u3067\u3059\u3002</p>  Python Rust <p> <code>pivot</code> <pre><code>q = (\n    df.lazy()\n    .collect()\n    .pivot(index=\"foo\", columns=\"bar\", values=\"N\", aggregate_function=\"first\")\n    .lazy()\n)\nout = q.collect()\nprint(out)\n</code></pre></p> <p> <code>pivot</code> <pre><code>let q = df.lazy();\nlet q2 = pivot(\n    &amp;q.collect()?,\n    [\"foo\"],\n    [\"bar\"],\n    Some([\"N\"]),\n    false,\n    None,\n    None,\n)?\n.lazy();\nlet out = q2.collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (3, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 k    \u2506 l    \u2506 m    \u2506 n    \u2506 o    \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---  \u2502\n\u2502 str \u2506 i64  \u2506 i64  \u2506 i64  \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A   \u2506 1    \u2506 2    \u2506 null \u2506 null \u2506 null \u2502\n\u2502 B   \u2506 null \u2506 null \u2506 2    \u2506 4    \u2506 null \u2502\n\u2502 C   \u2506 null \u2506 null \u2506 null \u2506 null \u2506 2    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/filter/","title":"\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u65e5\u4ed8\u5217\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306f\u3001<code>.filter</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u4ed6\u306e\u5217\u30bf\u30a4\u30d7\u3068\u540c\u3058\u3088\u3046\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002</p> <p>Polars \u306f Python \u306e\u6a19\u6e96\u306e <code>datetime</code>\u3001<code>date</code>\u3001<code>timedelta</code> \u3092\u4f7f\u3063\u3066\u3001<code>pl.Datetime</code>\u3001<code>pl.Date</code>\u3001<code>pl.Duration</code> \u30c7\u30fc\u30bf\u578b\u9593\u306e\u7b49\u4fa1\u6bd4\u8f03\u3092\u884c\u3044\u307e\u3059\u3002</p> <p>\u6b21\u306e\u4f8b\u3067\u306f\u3001Apple \u306e\u682a\u4fa1\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002</p>  Python Rust <p> <code>read_csv</code> <pre><code>import polars as pl\nfrom datetime import datetime\n\ndf = pl.read_csv(\"docs/data/apple_stock.csv\", try_parse_dates=True)\nprint(df)\n</code></pre></p> <p> <code>CsvReader</code> \u00b7  Available on feature csv <pre><code>let df = CsvReader::from_path(\"docs/data/apple_stock.csv\")\n    .unwrap()\n    .with_try_parse_dates(true)\n    .finish()\n    .unwrap();\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (100, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Close  \u2502\n\u2502 ---        \u2506 ---    \u2502\n\u2502 date       \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1981-02-23 \u2506 24.62  \u2502\n\u2502 1981-05-06 \u2506 27.38  \u2502\n\u2502 1981-05-18 \u2506 28.0   \u2502\n\u2502 1981-09-25 \u2506 14.25  \u2502\n\u2502 1982-07-08 \u2506 11.0   \u2502\n\u2502 \u2026          \u2506 \u2026      \u2502\n\u2502 2012-05-16 \u2506 546.08 \u2502\n\u2502 2012-12-04 \u2506 575.85 \u2502\n\u2502 2013-07-05 \u2506 417.42 \u2502\n\u2502 2013-11-07 \u2506 512.49 \u2502\n\u2502 2014-02-25 \u2506 522.06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/filter/#_2","title":"\u5358\u4e00\u306e\u65e5\u4ed8\u3067\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u5e0c\u671b\u306e\u65e5\u4ed8\u6587\u5b57\u5217\u3092 <code>Date</code> \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u5358\u4e00\u306e\u65e5\u4ed8\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059:</p>  Python Rust <p> <code>filter</code> <pre><code>filtered_df = df.filter(\n    pl.col(\"Date\") == datetime(1995, 10, 16),\n)\nprint(filtered_df)\n</code></pre></p> <p> <code>filter</code> <pre><code>let filtered_df = df\n    .clone()\n    .lazy()\n    .filter(col(\"Date\").eq(lit(NaiveDate::from_ymd_opt(1995, 10, 16).unwrap())))\n    .collect()?;\nprintln!(\"{}\", &amp;filtered_df);\n</code></pre></p> <pre><code>shape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Close \u2502\n\u2502 ---        \u2506 ---   \u2502\n\u2502 date       \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1995-10-16 \u2506 36.13 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u3053\u3067\u306f\u3001\u5927\u6587\u5b57\u306e <code>Datetime</code> \u30c7\u30fc\u30bf\u578b\u3067\u306f\u306a\u304f\u3001\u5c0f\u6587\u5b57\u306e <code>datetime</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/transformations/time-series/filter/#_3","title":"\u65e5\u4ed8\u7bc4\u56f2\u3067\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u958b\u59cb\u65e5\u3068\u7d42\u4e86\u65e5\u3092\u4f7f\u3063\u3066 <code>is_between</code> \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u65e5\u4ed8\u7bc4\u56f2\u3067\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059:</p>  Python Rust <p> <code>filter</code> \u00b7 <code>is_between</code> <pre><code>filtered_range_df = df.filter(\n    pl.col(\"Date\").is_between(datetime(1995, 7, 1), datetime(1995, 11, 1)),\n)\nprint(filtered_range_df)\n</code></pre></p> <p> <code>filter</code> \u00b7 <code>is_between</code> <pre><code>let filtered_range_df = df\n    .clone()\n    .lazy()\n    .filter(\n        col(\"Date\")\n            .gt(lit(NaiveDate::from_ymd_opt(1995, 7, 1).unwrap()))\n            .and(col(\"Date\").lt(lit(NaiveDate::from_ymd_opt(1995, 11, 1).unwrap()))),\n    )\n    .collect()?;\nprintln!(\"{}\", &amp;filtered_range_df);\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Close \u2502\n\u2502 ---        \u2506 ---   \u2502\n\u2502 date       \u2506 f64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1995-07-06 \u2506 47.0  \u2502\n\u2502 1995-10-16 \u2506 36.13 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/filter/#_4","title":"\u8ca0\u306e\u65e5\u4ed8\u3067\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u8003\u53e4\u5b66\u8005\u3068\u4e00\u7dd2\u306b\u4ed5\u4e8b\u3092\u3057\u3066\u3044\u3066\u3001\u8ca0\u306e\u65e5\u4ed8\u3092\u6271\u3063\u3066\u3044\u308b\u3068\u3057\u307e\u3059\u3002 Polars \u306f\u305d\u308c\u3089\u3092\u554f\u984c\u306a\u304f\u89e3\u6790\u3057\u3066\u4fdd\u5b58\u3067\u304d\u307e\u3059\u304c\u3001Python \u306e <code>datetime</code> \u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\u5bfe\u5fdc\u3067\u304d\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u3001\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306b\u306f <code>.dt</code> \u540d\u524d\u7a7a\u9593\u306e\u5c5e\u6027\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059:</p>  Python Rust <p> <code>str.to_date</code> <pre><code>ts = pl.Series([\"-1300-05-23\", \"-1400-03-02\"]).str.to_date()\n\nnegative_dates_df = pl.DataFrame({\"ts\": ts, \"values\": [3, 4]})\n\nnegative_dates_filtered_df = negative_dates_df.filter(pl.col(\"ts\").dt.year() &lt; -1300)\nprint(negative_dates_filtered_df)\n</code></pre></p> <p> <code>str.replace_all</code> \u00b7  Available on feature dtype-date <pre><code>    let negative_dates_df = df!(\n    \"ts\"=&gt; &amp;[\"-1300-05-23\", \"-1400-03-02\"],\n    \"values\"=&gt; &amp;[3, 4])?\n    .lazy()\n    .with_column(col(\"ts\").str().to_date(StrptimeOptions::default()))\n    .collect()?;\n\n    let negative_dates_filtered_df = negative_dates_df\n        .clone()\n        .lazy()\n        .filter(col(\"ts\").dt().year().lt(-1300))\n        .collect()?;\n    println!(\"{}\", &amp;negative_dates_filtered_df);\n</code></pre></p> <pre><code>shape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ts          \u2506 values \u2502\n\u2502 ---         \u2506 ---    \u2502\n\u2502 date        \u2506 i64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 -1400-03-02 \u2506 4      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/parsing/","title":"\u89e3\u6790","text":"<p>Polars \u306b\u306f\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u89e3\u6790\u3084\u3001\u6642\u9593\u5358\u4f4d\u306e\u30b0\u30eb\u30fc\u30d7\u5316\u3084\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306a\u3069\u306e\u9ad8\u5ea6\u306a\u64cd\u4f5c\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u6a5f\u80fd\u304c\u7d44\u307f\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/time-series/parsing/#_2","title":"\u30c7\u30fc\u30bf\u578b","text":"<p>Polars \u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u65e5\u6642\u30c7\u30fc\u30bf\u578b\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059:</p> <ul> <li><code>Date</code>: \u65e5\u4ed8\u8868\u73fe\u3001\u4f8b: 2014-07-08\u3002\u5185\u90e8\u7684\u306b\u306f UNIX \u30a8\u30dd\u30c3\u30af\u304b\u3089\u306e\u7d4c\u904e\u65e5\u6570\u3092 32 \u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u3067\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002</li> <li><code>Datetime</code>: \u65e5\u6642\u8868\u73fe\u3001\u4f8b: 2014-07-08 07:00:00\u3002\u5185\u90e8\u7684\u306b\u306f UNIX \u30a8\u30dd\u30c3\u30af\u304b\u3089\u306e\u7d4c\u904e\u6642\u9593\u3092 64 \u30d3\u30c3\u30c8\u6574\u6570\u3067\u8868\u73fe\u3057\u3066\u304a\u308a\u3001ns\u3001us\u3001ms \u306a\u3069\u306e\u5358\u4f4d\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</li> <li><code>Duration</code>: <code>Date/Datetime</code> \u306e\u5dee\u5206\u3068\u3057\u3066\u751f\u6210\u3055\u308c\u308b\u6642\u9593\u5dee\u578b\u3002Python \u306e <code>timedelta</code> \u306b\u4f3c\u3066\u3044\u307e\u3059\u3002</li> <li><code>Time</code>: \u6642\u9593\u8868\u73fe\u3001\u5185\u90e8\u7684\u306b\u306f\u5348\u524d 0 \u6642\u304b\u3089\u306e\u7d4c\u904e\u30ca\u30ce\u79d2\u6570\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\u3002</li> </ul>"},{"location":"user-guide/transformations/time-series/parsing/#_3","title":"\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306e\u65e5\u4ed8\u89e3\u6790","text":"<p>CSV \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u969b\u3001<code>try_parse_dates</code> \u30d5\u30e9\u30b0\u3092 <code>True</code> \u306b\u8a2d\u5b9a\u3059\u308b\u3068\u3001Polars \u306f\u65e5\u4ed8\u3068\u6642\u523b\u306e\u89e3\u6790\u3092\u8a66\u307f\u307e\u3059\u3002</p>  Python Rust <p> <code>read_csv</code> <pre><code>df = pl.read_csv(\"docs/data/apple_stock.csv\", try_parse_dates=True)\nprint(df)\n</code></pre></p> <p> <code>CsvReader</code> \u00b7  Available on feature csv <pre><code>let df = CsvReader::from_path(\"docs/data/apple_stock.csv\")\n    .unwrap()\n    .with_try_parse_dates(true)\n    .finish()\n    .unwrap();\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (100, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Close  \u2502\n\u2502 ---        \u2506 ---    \u2502\n\u2502 date       \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1981-02-23 \u2506 24.62  \u2502\n\u2502 1981-05-06 \u2506 27.38  \u2502\n\u2502 1981-05-18 \u2506 28.0   \u2502\n\u2502 1981-09-25 \u2506 14.25  \u2502\n\u2502 1982-07-08 \u2506 11.0   \u2502\n\u2502 \u2026          \u2506 \u2026      \u2502\n\u2502 2012-05-16 \u2506 546.08 \u2502\n\u2502 2012-12-04 \u2506 575.85 \u2502\n\u2502 2013-07-05 \u2506 417.42 \u2502\n\u2502 2013-11-07 \u2506 512.49 \u2502\n\u2502 2014-02-25 \u2506 522.06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u4e00\u65b9\u3001Parquet \u306e\u3088\u3046\u306a\u30d0\u30a4\u30ca\u30ea\u5f62\u5f0f\u306f\u3001Polars \u306b\u3088\u3063\u3066\u5c0a\u91cd\u3055\u308c\u308b\u30b9\u30ad\u30fc\u30de\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/time-series/parsing/#_4","title":"\u6587\u5b57\u5217\u3092\u65e5\u4ed8\u306b\u5909\u63db\u3059\u308b","text":"<p>\u6587\u5b57\u5217\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u65e5\u6642\u306e\u30ab\u30e9\u30e0\u3092\u3001\u65e5\u6642\u578b\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u306b\u306f\u3001\u6587\u5b57\u5217\u306e <code>str.to_date</code> \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u65e5\u4ed8\u6587\u5b57\u5217\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6e21\u3057\u307e\u3059:</p>  Python Rust <p> <code>read_csv</code> \u00b7 <code>str.to_date</code> <pre><code>df = pl.read_csv(\"docs/data/apple_stock.csv\", try_parse_dates=False)\n\ndf = df.with_columns(pl.col(\"Date\").str.to_date(\"%Y-%m-%d\"))\nprint(df)\n</code></pre></p> <p> <code>CsvReader</code> \u00b7 <code>str.replace_all</code> \u00b7  Available on feature csv \u00b7  Available on feature dtype-date <pre><code>let df = CsvReader::from_path(\"docs/data/apple_stock.csv\")\n    .unwrap()\n    .with_try_parse_dates(false)\n    .finish()\n    .unwrap();\nlet df = df\n    .clone()\n    .lazy()\n    .with_columns([col(\"Date\").str().to_date(StrptimeOptions::default())])\n    .collect()?;\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (100, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Close  \u2502\n\u2502 ---        \u2506 ---    \u2502\n\u2502 date       \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1981-02-23 \u2506 24.62  \u2502\n\u2502 1981-05-06 \u2506 27.38  \u2502\n\u2502 1981-05-18 \u2506 28.0   \u2502\n\u2502 1981-09-25 \u2506 14.25  \u2502\n\u2502 1982-07-08 \u2506 11.0   \u2502\n\u2502 \u2026          \u2506 \u2026      \u2502\n\u2502 2012-05-16 \u2506 546.08 \u2502\n\u2502 2012-12-04 \u2506 575.85 \u2502\n\u2502 2013-07-05 \u2506 417.42 \u2502\n\u2502 2013-11-07 \u2506 512.49 \u2502\n\u2502 2014-02-25 \u2506 522.06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217\u306e\u4ed5\u69d8\u306f \u3053\u3061\u3089 \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/time-series/parsing/#_5","title":"\u65e5\u4ed8\u30ab\u30e9\u30e0\u304b\u3089\u65e5\u4ed8\u306e\u7279\u5fb4\u3092\u62bd\u51fa\u3059\u308b","text":"<p>\u65e5\u4ed8\u30ab\u30e9\u30e0\u304b\u3089\u3001\u5e74\u3084\u65e5\u306a\u3069\u306e\u65e5\u4ed8\u306e\u7279\u5fb4\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u306f\u3001\u65e5\u4ed8\u30ab\u30e9\u30e0\u306e <code>.dt</code> \u540d\u524d\u7a7a\u9593\u3092\u4f7f\u3044\u307e\u3059:</p>  Python Rust <p> <code>dt.year</code> <pre><code>df_with_year = df.with_columns(pl.col(\"Date\").dt.year().alias(\"year\"))\nprint(df_with_year)\n</code></pre></p> <p> <code>dt.year</code> <pre><code>let df_with_year = df\n    .clone()\n    .lazy()\n    .with_columns([col(\"Date\").dt().year().alias(\"year\")])\n    .collect()?;\nprintln!(\"{}\", &amp;df_with_year);\n</code></pre></p> <pre><code>shape: (100, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Close  \u2506 year \u2502\n\u2502 ---        \u2506 ---    \u2506 ---  \u2502\n\u2502 date       \u2506 f64    \u2506 i32  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1981-02-23 \u2506 24.62  \u2506 1981 \u2502\n\u2502 1981-05-06 \u2506 27.38  \u2506 1981 \u2502\n\u2502 1981-05-18 \u2506 28.0   \u2506 1981 \u2502\n\u2502 1981-09-25 \u2506 14.25  \u2506 1981 \u2502\n\u2502 1982-07-08 \u2506 11.0   \u2506 1982 \u2502\n\u2502 \u2026          \u2506 \u2026      \u2506 \u2026    \u2502\n\u2502 2012-05-16 \u2506 546.08 \u2506 2012 \u2502\n\u2502 2012-12-04 \u2506 575.85 \u2506 2012 \u2502\n\u2502 2013-07-05 \u2506 417.42 \u2506 2013 \u2502\n\u2502 2013-11-07 \u2506 512.49 \u2506 2013 \u2502\n\u2502 2014-02-25 \u2506 522.06 \u2506 2014 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/parsing/#_6","title":"\u6df7\u5728\u3059\u308b\u30aa\u30d5\u30bb\u30c3\u30c8","text":"<p>\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u6df7\u5728\u3057\u3066\u3044\u308b\u5834\u5408 (\u4f8b\u3048\u3070\u3001\u590f\u6642\u9593\u306e\u5909\u66f4\u306b\u3088\u3063\u3066)\u3001<code>utc=True</code> \u3092\u4f7f\u3044\u3001\u305d\u306e\u5f8c\u81ea\u5206\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p>  Python Rust <p> <code>str.to_datetime</code> \u00b7 <code>dt.convert_time_zone</code> \u00b7  Available on feature timezone <pre><code>data = [\n    \"2021-03-27T00:00:00+0100\",\n    \"2021-03-28T00:00:00+0100\",\n    \"2021-03-29T00:00:00+0200\",\n    \"2021-03-30T00:00:00+0200\",\n]\nmixed_parsed = (\n    pl.Series(data)\n    .str.to_datetime(\"%Y-%m-%dT%H:%M:%S%z\")\n    .dt.convert_time_zone(\"Europe/Brussels\")\n)\nprint(mixed_parsed)\n</code></pre></p> <p> <code>str.replace_all</code> \u00b7 <code>dt.convert_time_zone</code> \u00b7  Available on feature dtype-datetime \u00b7  Available on feature timezones <pre><code>let data = [\n    \"2021-03-27T00:00:00+0100\",\n    \"2021-03-28T00:00:00+0100\",\n    \"2021-03-29T00:00:00+0200\",\n    \"2021-03-30T00:00:00+0200\",\n];\nlet q = col(\"date\")\n    .str()\n    .to_datetime(\n        Some(TimeUnit::Microseconds),\n        None,\n        StrptimeOptions {\n            format: Some(\"%Y-%m-%dT%H:%M:%S%z\".to_string()),\n            ..Default::default()\n        },\n        lit(\"raise\"),\n    )\n    .dt()\n    .convert_time_zone(\"Europe/Brussels\".to_string());\nlet mixed_parsed = df!(\"date\" =&gt; &amp;data)?.lazy().select([q]).collect()?;\n\nprintln!(\"{}\", &amp;mixed_parsed);\n</code></pre></p> <pre><code>shape: (4,)\nSeries: '' [datetime[\u03bcs, Europe/Brussels]]\n[\n    2021-03-27 00:00:00 CET\n    2021-03-28 00:00:00 CET\n    2021-03-29 00:00:00 CEST\n    2021-03-30 00:00:00 CEST\n]\n</code></pre>"},{"location":"user-guide/transformations/time-series/resampling/","title":"\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0","text":"<p>\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u306e\u65b9\u6cd5\u3067\u30ea\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059:</p> <ul> <li>\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\uff08\u30c7\u30fc\u30bf\u3092\u9ad8\u983b\u5ea6\u306b\u3059\u308b\uff09</li> <li>\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\uff08\u30c7\u30fc\u30bf\u3092\u4f4e\u983b\u5ea6\u306b\u3059\u308b\uff09</li> <li>\u3053\u308c\u3089\u306e\u7d44\u307f\u5408\u308f\u305b\u3001\u4f8b\u3048\u3070\u307e\u305a\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u304b\u3089\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b</li> </ul>"},{"location":"user-guide/transformations/time-series/resampling/#_2","title":"\u4f4e\u983b\u5ea6\u3078\u306e\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0","text":"<p>Polars \u3067\u306f\u3001\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092 <code>group_by</code> \u64cd\u4f5c\u306e\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u3068\u3057\u3066\u6271\u3063\u3066\u304a\u308a\u3001<code>group_by_dynamic</code> \u3084 <code>group_by_rolling</code> \u3092\u4f7f\u3063\u3066\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059 - \u6642\u7cfb\u5217 group by \u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"user-guide/transformations/time-series/resampling/#_3","title":"\u9ad8\u983b\u5ea6\u3078\u306e\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0","text":"<p>30 \u5206\u9593\u9694\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046:</p>  Python Rust <p> <code>DataFrame</code> \u00b7 <code>date_range</code> <pre><code>df = pl.DataFrame(\n    {\n        \"time\": pl.datetime_range(\n            start=datetime(2021, 12, 16),\n            end=datetime(2021, 12, 16, 3),\n            interval=\"30m\",\n            eager=True,\n        ),\n        \"groups\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\"],\n        \"values\": [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0],\n    }\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> \u00b7 <code>date_range</code> \u00b7  Available on feature range \u00b7  Available on feature dtype-date <pre><code>let time = polars::time::date_range(\n    \"time\",\n    NaiveDate::from_ymd_opt(2021, 12, 16)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    NaiveDate::from_ymd_opt(2021, 12, 16)\n        .unwrap()\n        .and_hms_opt(3, 0, 0)\n        .unwrap(),\n    Duration::parse(\"30m\"),\n    ClosedWindow::Both,\n    TimeUnit::Milliseconds,\n    None,\n)?;\nlet df = df!(\n    \"time\" =&gt; time,\n    \"groups\" =&gt; &amp;[\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\"],\n    \"values\" =&gt; &amp;[1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0],\n)?;\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (7, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time                \u2506 groups \u2506 values \u2502\n\u2502 ---                 \u2506 ---    \u2506 ---    \u2502\n\u2502 datetime[\u03bcs]        \u2506 str    \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2021-12-16 00:00:00 \u2506 a      \u2506 1.0    \u2502\n\u2502 2021-12-16 00:30:00 \u2506 a      \u2506 2.0    \u2502\n\u2502 2021-12-16 01:00:00 \u2506 a      \u2506 3.0    \u2502\n\u2502 2021-12-16 01:30:00 \u2506 b      \u2506 4.0    \u2502\n\u2502 2021-12-16 02:00:00 \u2506 b      \u2506 5.0    \u2502\n\u2502 2021-12-16 02:30:00 \u2506 a      \u2506 6.0    \u2502\n\u2502 2021-12-16 03:00:00 \u2506 a      \u2506 7.0    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306f\u3001\u65b0\u3057\u3044\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u9593\u9694\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u3088\u308a\u3001\u30c7\u30fc\u30bf\u304c\u306a\u3044\u884c\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3060\u3051\u3067\u306f null \u5024\u304c\u542b\u307e\u308c\u308b DataFrame \u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u3089\u306e null \u5024\u306f\u3001\u57cb\u3081\u8fbc\u307f\u6226\u7565\u3084\u88dc\u9593\u3092\u4f7f\u3063\u3066\u57cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/time-series/resampling/#_4","title":"\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u6226\u7565","text":"<p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u5143\u306e 30 \u5206\u304b\u3089 15 \u5206\u306b\u30a2\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3001\u305d\u306e\u5f8c <code>forward</code> \u6226\u7565\u3092\u4f7f\u3063\u3066 null \u5024\u3092\u524d\u306e\u975e null \u5024\u3067\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059:</p>  Python Rust <p> <code>upsample</code> <pre><code>out1 = df.upsample(time_column=\"time\", every=\"15m\").fill_null(strategy=\"forward\")\nprint(out1)\n</code></pre></p> <p> <code>upsample</code> <pre><code>let out1 = df\n    .clone()\n    .upsample::&lt;[String; 0]&gt;([], \"time\", Duration::parse(\"15m\"), Duration::parse(\"0\"))?\n    .fill_null(FillNullStrategy::Forward(None))?;\nprintln!(\"{}\", &amp;out1);\n</code></pre></p> <pre><code>shape: (13, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time                \u2506 groups \u2506 values \u2502\n\u2502 ---                 \u2506 ---    \u2506 ---    \u2502\n\u2502 datetime[\u03bcs]        \u2506 str    \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2021-12-16 00:00:00 \u2506 a      \u2506 1.0    \u2502\n\u2502 2021-12-16 00:15:00 \u2506 a      \u2506 1.0    \u2502\n\u2502 2021-12-16 00:30:00 \u2506 a      \u2506 2.0    \u2502\n\u2502 2021-12-16 00:45:00 \u2506 a      \u2506 2.0    \u2502\n\u2502 2021-12-16 01:00:00 \u2506 a      \u2506 3.0    \u2502\n\u2502 \u2026                   \u2506 \u2026      \u2506 \u2026      \u2502\n\u2502 2021-12-16 02:00:00 \u2506 b      \u2506 5.0    \u2502\n\u2502 2021-12-16 02:15:00 \u2506 b      \u2506 5.0    \u2502\n\u2502 2021-12-16 02:30:00 \u2506 a      \u2506 6.0    \u2502\n\u2502 2021-12-16 02:45:00 \u2506 a      \u2506 6.0    \u2502\n\u2502 2021-12-16 03:00:00 \u2506 a      \u2506 7.0    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>\u3053\u306e\u4f8b\u3067\u306f\u3001\u4ee3\u308f\u308a\u306b null \u5024\u3092\u7dda\u5f62\u88dc\u9593\u3067\u57cb\u3081\u3066\u3044\u307e\u3059:</p>  Python Rust <p> <code>upsample</code> \u00b7 <code>interpolate</code> \u00b7 <code>fill_null</code> <pre><code>out2 = (\n    df.upsample(time_column=\"time\", every=\"15m\")\n    .interpolate()\n    .fill_null(strategy=\"forward\")\n)\nprint(out2)\n</code></pre></p> <p> <code>upsample</code> \u00b7 <code>interpolate</code> \u00b7 <code>fill_null</code> <pre><code>let out2 = df\n    .clone()\n    .upsample::&lt;[String; 0]&gt;([], \"time\", Duration::parse(\"15m\"), Duration::parse(\"0\"))?\n    .lazy()\n    .with_columns([col(\"values\").interpolate(InterpolationMethod::Linear)])\n    .collect()?\n    .fill_null(FillNullStrategy::Forward(None))?;\nprintln!(\"{}\", &amp;out2);\n</code></pre></p> <pre><code>shape: (13, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time                \u2506 groups \u2506 values \u2502\n\u2502 ---                 \u2506 ---    \u2506 ---    \u2502\n\u2502 datetime[\u03bcs]        \u2506 str    \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2021-12-16 00:00:00 \u2506 a      \u2506 1.0    \u2502\n\u2502 2021-12-16 00:15:00 \u2506 a      \u2506 1.5    \u2502\n\u2502 2021-12-16 00:30:00 \u2506 a      \u2506 2.0    \u2502\n\u2502 2021-12-16 00:45:00 \u2506 a      \u2506 2.5    \u2502\n\u2502 2021-12-16 01:00:00 \u2506 a      \u2506 3.0    \u2502\n\u2502 \u2026                   \u2506 \u2026      \u2506 \u2026      \u2502\n\u2502 2021-12-16 02:00:00 \u2506 b      \u2506 5.0    \u2502\n\u2502 2021-12-16 02:15:00 \u2506 b      \u2506 5.5    \u2502\n\u2502 2021-12-16 02:30:00 \u2506 a      \u2506 6.0    \u2502\n\u2502 2021-12-16 02:45:00 \u2506 a      \u2506 6.5    \u2502\n\u2502 2021-12-16 03:00:00 \u2506 a      \u2506 7.0    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/rolling/","title":"\u30b0\u30eb\u30fc\u30d7\u5316","text":""},{"location":"user-guide/transformations/time-series/rolling/#_2","title":"\u56fa\u5b9a\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u3088\u308b\u30b0\u30eb\u30fc\u30d7\u5316","text":"<p><code>group_by_dynamic</code> \u3092\u4f7f\u3063\u3066\u3001\u65e5/\u6708/\u5e74\u306a\u3069\u306e\u30c6\u30f3\u30dd\u30e9\u30eb\u7d71\u8a08\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/time-series/rolling/#_3","title":"\u5e74\u9593\u5e73\u5747\u306e\u4f8b","text":"<p>\u4ee5\u4e0b\u306e\u7c21\u5358\u306a\u4f8b\u3067\u306f\u3001Apple \u306e\u682a\u4fa1\u306e\u5e74\u9593\u5e73\u5747\u7d42\u5024\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\u307e\u305a\u306fCSV\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059:</p>  Python Rust <p> <code>upsample</code> <pre><code>df = pl.read_csv(\"docs/data/apple_stock.csv\", try_parse_dates=True)\ndf = df.sort(\"Date\")\nprint(df)\n</code></pre></p> <p> <code>upsample</code> <pre><code>let df = CsvReader::from_path(\"docs/data/apple_stock.csv\")\n    .unwrap()\n    .with_try_parse_dates(true)\n    .finish()\n    .unwrap()\n    .sort(\n        [\"Date\"],\n        SortMultipleOptions::default().with_maintain_order(true),\n    )?;\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (100, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Close  \u2502\n\u2502 ---        \u2506 ---    \u2502\n\u2502 date       \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1981-02-23 \u2506 24.62  \u2502\n\u2502 1981-05-06 \u2506 27.38  \u2502\n\u2502 1981-05-18 \u2506 28.0   \u2502\n\u2502 1981-09-25 \u2506 14.25  \u2502\n\u2502 1982-07-08 \u2506 11.0   \u2502\n\u2502 \u2026          \u2506 \u2026      \u2502\n\u2502 2012-05-16 \u2506 546.08 \u2502\n\u2502 2012-12-04 \u2506 575.85 \u2502\n\u2502 2013-07-05 \u2506 417.42 \u2502\n\u2502 2013-11-07 \u2506 512.49 \u2502\n\u2502 2014-02-25 \u2506 522.06 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Info</p> <p>\u65e5\u4ed8\u306f\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059 - \u305d\u3046\u3067\u306a\u3044\u5834\u5408\u3001<code>group_by_dynamic</code> \u306e\u51fa\u529b\u306f\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093!</p> <p>\u5e74\u9593\u5e73\u5747\u7d42\u5024\u3092\u5f97\u308b\u306b\u306f\u3001<code>group_by_dynamic</code> \u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059:</p> <ul> <li><code>Date</code> \u5217\u3067\u5e74\u5358\u4f4d(<code>1y</code>)\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b</li> <li><code>Close</code> \u5217\u306e\u5e73\u5747\u5024\u3092\u5404\u5e74\u306b\u3064\u3044\u3066\u53d6\u308b</li> </ul>  Python Rust <p> <code>group_by_dynamic</code> <pre><code>annual_average_df = df.group_by_dynamic(\"Date\", every=\"1y\").agg(pl.col(\"Close\").mean())\n\ndf_with_year = annual_average_df.with_columns(pl.col(\"Date\").dt.year().alias(\"year\"))\nprint(df_with_year)\n</code></pre></p> <p> <code>group_by_dynamic</code> \u00b7  Available on feature dynamic_group_by <pre><code>let annual_average_df = df\n    .clone()\n    .lazy()\n    .group_by_dynamic(\n        col(\"Date\"),\n        [],\n        DynamicGroupOptions {\n            every: Duration::parse(\"1y\"),\n            period: Duration::parse(\"1y\"),\n            offset: Duration::parse(\"0\"),\n            ..Default::default()\n        },\n    )\n    .agg([col(\"Close\").mean()])\n    .collect()?;\n\nlet df_with_year = annual_average_df\n    .lazy()\n    .with_columns([col(\"Date\").dt().year().alias(\"year\")])\n    .collect()?;\nprintln!(\"{}\", &amp;df_with_year);\n</code></pre></p> <p>\u5e74\u9593\u5e73\u5747\u7d42\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059:</p> <pre><code>shape: (34, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Date       \u2506 Close     \u2506 year \u2502\n\u2502 ---        \u2506 ---       \u2506 ---  \u2502\n\u2502 date       \u2506 f64       \u2506 i32  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1981-01-01 \u2506 23.5625   \u2506 1981 \u2502\n\u2502 1982-01-01 \u2506 11.0      \u2506 1982 \u2502\n\u2502 1983-01-01 \u2506 30.543333 \u2506 1983 \u2502\n\u2502 1984-01-01 \u2506 27.583333 \u2506 1984 \u2502\n\u2502 1985-01-01 \u2506 18.166667 \u2506 1985 \u2502\n\u2502 \u2026          \u2506 \u2026         \u2506 \u2026    \u2502\n\u2502 2010-01-01 \u2506 278.265   \u2506 2010 \u2502\n\u2502 2011-01-01 \u2506 368.225   \u2506 2011 \u2502\n\u2502 2012-01-01 \u2506 560.965   \u2506 2012 \u2502\n\u2502 2013-01-01 \u2506 464.955   \u2506 2013 \u2502\n\u2502 2014-01-01 \u2506 522.06    \u2506 2014 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/rolling/#group_by_dynamic","title":"<code>group_by_dynamic</code>\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc","text":"<p>\u52d5\u7684\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059:</p> <ul> <li>every: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9593\u9694\u3092\u793a\u3057\u307e\u3059</li> <li>period: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u671f\u9593\u3092\u793a\u3057\u307e\u3059</li> <li>offset: \u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u958b\u59cb\u3092\u30aa\u30d5\u30bb\u30c3\u30c8\u3059\u308b\u306e\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059</li> </ul> <p><code>every</code>\u306e\u5024\u306f\u3001\u30b0\u30eb\u30fc\u30d7\u306e\u958b\u59cb\u983b\u5ea6\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\u6642\u9593\u671f\u9593\u306e\u5024\u306f\u67d4\u8edf\u3067\u3059 - \u4f8b\u3048\u3070\u3001<code>1y</code>\u3092<code>2y</code>\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u30012\u5e74\u9593\u9694\u306e\u5e73\u5747\u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001<code>1y</code>\u3092<code>1y6mo</code>\u306b\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u300118\u30f6\u6708\u9593\u9694\u306e\u5e73\u5747\u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p><code>period</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u4f7f\u3063\u3066\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u6642\u9593\u671f\u9593\u306e\u9577\u3055\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001<code>every</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092<code>1y</code>\u306b\u3001<code>period</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092<code>2y</code>\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u30011\u5e74\u9593\u9694\u3067\u305d\u308c\u305e\u308c2\u5e74\u9593\u306e\u30b0\u30eb\u30fc\u30d7\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002</p> <p><code>period</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3001<code>every</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3068\u540c\u3058\u5024\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001<code>every</code>\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c<code>1y</code>\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5404\u30b0\u30eb\u30fc\u30d7\u3082<code>1y</code>\u306e\u30b9\u30d1\u30f3\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>every_\u3068period_\u304c\u7b49\u3057\u304f\u306a\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u975e\u5e38\u306b\u67d4\u8edf\u306a\u65b9\u6cd5\u3067\u305f\u304f\u3055\u3093\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u30b0\u30eb\u30fc\u30d7\u304c\u91cd\u8907\u3057\u305f\u308a\u3001\u5883\u754c\u7dda\u304c\u7a7a\u3044\u305f\u308a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3044\u304f\u3064\u304b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u7d44\u307f\u5408\u308f\u305b\u3067\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u69d8\u5b50\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u9000\u5c48\u306a\u4f8b\u304b\u3089\u59cb\u3081\u307e\u3057\u3087\u3046\u3002\ud83e\udd71</p> <ul> <li>every: 1 day -&gt; <code>\"1d\"</code></li> <li>period: 1 day -&gt; <code>\"1d\"</code></li> </ul> <pre><code>\u3053\u306e\u64cd\u4f5c\u306f\u540c\u3058\u30b5\u30a4\u30ba\u306e\u96a3\u63a5\u3059\u308b\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u307e\u3059\n|--|\n   |--|\n      |--|\n</code></pre> <ul> <li>every: 1 day -&gt; <code>\"1d\"</code></li> <li>period: 2 days -&gt; <code>\"2d\"</code></li> </ul> <pre><code>\u3053\u308c\u3089\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u306f 1 \u65e5\u306e\u91cd\u8907\u304c\u3042\u308a\u307e\u3059\n|----|\n   |----|\n      |----|\n</code></pre> <ul> <li>every: 2 days -&gt; <code>\"2d\"</code></li> <li>period: 1 day -&gt; <code>\"1d\"</code></li> </ul> <pre><code>\u3053\u308c\u3067\u306f\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u9593\u306b\u9699\u9593\u304c\u3067\u304d\u307e\u3059\n\u3053\u308c\u3089\u306e\u9699\u9593\u306e\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u306f\u3001\u3069\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u3082\u5c5e\u3057\u307e\u305b\u3093\n|--|\n       |--|\n              |--|\n</code></pre>"},{"location":"user-guide/transformations/time-series/rolling/#truncate","title":"<code>truncate</code>","text":"<p><code>truncate</code> \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306f\u3001\u51fa\u529b\u306e\u5404\u30b0\u30eb\u30fc\u30d7\u306b\u95a2\u9023\u4ed8\u3051\u3089\u308c\u308b datetime \u5024\u3092\u6c7a\u5b9a\u3059\u308b Boolean \u5909\u6570\u3067\u3059\u3002\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u6700\u521d\u306e\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u304c 1981 \u5e74 2 \u6708 23 \u65e5\u3067\u3059\u3002<code>truncate = True</code>\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\u306e\u5834\u5408\u3001\u5e74\u9593\u5e73\u5747\u306e\u6700\u521d\u306e\u5e74\u306e\u65e5\u4ed8\u306f 1981 \u5e74 1 \u6708 1 \u65e5\u306b\u306a\u308a\u307e\u3059\u3002\u4e00\u65b9\u3001<code>truncate = False</code> \u306e\u5834\u5408\u3001\u5e74\u9593\u5e73\u5747\u306e\u6700\u521d\u306e\u5e74\u306e\u65e5\u4ed8\u306f 1981 \u5e74 2 \u6708 23 \u65e5\u306e\u6700\u521d\u306e\u30c7\u30fc\u30bf\u30dd\u30a4\u30f3\u30c8\u306e\u65e5\u4ed8\u306b\u306a\u308a\u307e\u3059\u3002<code>truncate</code> \u306f <code>Date</code> \u5217\u306b\u8868\u793a\u3055\u308c\u308b\u5185\u5bb9\u306b\u306e\u307f\u5f71\u97ff\u3057\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5883\u754c\u306b\u306f\u5f71\u97ff\u3057\u307e\u305b\u3093\u3002</p>"},{"location":"user-guide/transformations/time-series/rolling/#group_by_dynamic_1","title":"<code>group_by_dynamic</code> \u3067\u306e\u5f0f\u306e\u4f7f\u7528","text":"<p>\u30b0\u30eb\u30fc\u30d7\u5316\u64cd\u4f5c\u3067\u306f\u3001<code>mean</code> \u306e\u3088\u3046\u306a\u5358\u7d14\u306a\u96c6\u8a08\u3060\u3051\u3067\u306a\u304f\u3001Polars \u3067\u5229\u7528\u53ef\u80fd\u306a\u5168\u3066\u306e\u5f0f\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f\u30012021 \u5e74\u306e \u6bce\u65e5 (<code>\"1d\"</code>) \u306e <code>date range</code> \u3092\u4f5c\u6210\u3057\u3001\u3053\u308c\u3092 <code>DataFrame</code> \u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u305d\u306e\u5f8c\u3001<code>group_by_dynamic</code> \u3067 \u6bce\u6708 (<code>\"1mo\"</code>) \u59cb\u307e\u308b\u52d5\u7684\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u4f5c\u6210\u3057\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u9577\u3092 <code>1</code> \u304b\u6708\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u52d5\u7684\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u4e00\u81f4\u3059\u308b\u5024\u306f\u3001\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3001\u5f37\u529b\u306a\u5f0f API \u3092\u4f7f\u3063\u3066\u96c6\u8a08\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u3001<code>group_by_dynamic</code> \u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059:</p> <ul> <li>\u6708\u672b\u307e\u3067\u306e\u6b8b\u308a\u65e5\u6570</li> <li>\u6708\u306e\u65e5\u6570</li> </ul>  Python Rust <p> <code>group_by_dynamic</code> \u00b7 <code>DataFrame.explode</code> \u00b7 <code>date_range</code> <pre><code>df = (\n    pl.date_range(\n        start=date(2021, 1, 1),\n        end=date(2021, 12, 31),\n        interval=\"1d\",\n        eager=True,\n    )\n    .alias(\"time\")\n    .to_frame()\n)\n\nout = df.group_by_dynamic(\"time\", every=\"1mo\", period=\"1mo\", closed=\"left\").agg(\n    pl.col(\"time\").cum_count().reverse().head(3).alias(\"day/eom\"),\n    ((pl.col(\"time\") - pl.col(\"time\").first()).last().dt.total_days() + 1).alias(\n        \"days_in_month\"\n    ),\n)\nprint(out)\n</code></pre></p> <p> <code>group_by_dynamic</code> \u00b7 <code>DataFrame.explode</code> \u00b7 <code>date_range</code> \u00b7  Available on feature dynamic_group_by \u00b7  Available on feature dtype-date \u00b7  Available on feature range <pre><code>let time = polars::time::date_range(\n    \"time\",\n    NaiveDate::from_ymd_opt(2021, 1, 1)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    NaiveDate::from_ymd_opt(2021, 12, 31)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    Duration::parse(\"1d\"),\n    ClosedWindow::Both,\n    TimeUnit::Milliseconds,\n    None,\n)?\n.cast(&amp;DataType::Date)?;\n\nlet df = df!(\n    \"time\" =&gt; time,\n)?;\n\nlet out = df\n    .clone()\n    .lazy()\n    .group_by_dynamic(\n        col(\"time\"),\n        [],\n        DynamicGroupOptions {\n            every: Duration::parse(\"1mo\"),\n            period: Duration::parse(\"1mo\"),\n            offset: Duration::parse(\"0\"),\n            closed_window: ClosedWindow::Left,\n            ..Default::default()\n        },\n    )\n    .agg([\n        col(\"time\")\n            .cum_count(true) // python example has false\n            .reverse()\n            .head(Some(3))\n            .alias(\"day/eom\"),\n        ((col(\"time\").last() - col(\"time\").first()).map(\n            // had to use map as .duration().days() is not available\n            |s| {\n                Ok(Some(\n                    s.duration()?\n                        .into_iter()\n                        .map(|d| d.map(|v| v / 1000 / 24 / 60 / 60))\n                        .collect::&lt;Int64Chunked&gt;()\n                        .into_series(),\n                ))\n            },\n            GetOutput::from_type(DataType::Int64),\n        ) + lit(1))\n        .alias(\"days_in_month\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (12, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time       \u2506 day/eom      \u2506 days_in_month \u2502\n\u2502 ---        \u2506 ---          \u2506 ---           \u2502\n\u2502 date       \u2506 list[u32]    \u2506 i64           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2021-01-01 \u2506 [31, 30, 29] \u2506 31            \u2502\n\u2502 2021-02-01 \u2506 [28, 27, 26] \u2506 28            \u2502\n\u2502 2021-03-01 \u2506 [31, 30, 29] \u2506 31            \u2502\n\u2502 2021-04-01 \u2506 [30, 29, 28] \u2506 30            \u2502\n\u2502 2021-05-01 \u2506 [31, 30, 29] \u2506 31            \u2502\n\u2502 \u2026          \u2506 \u2026            \u2506 \u2026             \u2502\n\u2502 2021-08-01 \u2506 [31, 30, 29] \u2506 31            \u2502\n\u2502 2021-09-01 \u2506 [30, 29, 28] \u2506 30            \u2502\n\u2502 2021-10-01 \u2506 [31, 30, 29] \u2506 31            \u2502\n\u2502 2021-11-01 \u2506 [30, 29, 28] \u2506 30            \u2502\n\u2502 2021-12-01 \u2506 [31, 30, 29] \u2506 31            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/rolling/#_4","title":"\u30ed\u30fc\u30ea\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u3088\u308b\u30b0\u30eb\u30fc\u30d7\u5316","text":"<p>\u30ed\u30fc\u30ea\u30f3\u30b0\u64cd\u4f5c <code>rolling</code> \u306f\u3001<code>group_by</code>/<code>agg</code> \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u5225\u306e\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u3067\u3059\u3002\u3057\u304b\u3057\u3001<code>group_by_dynamic</code> \u3068\u306f\u7570\u306a\u308a\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306f <code>every</code> \u3068 <code>period</code> \u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u56fa\u5b9a\u3055\u308c\u308b\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002<code>rolling</code> \u3067\u306f\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u5168\u304f\u56fa\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093! <code>index_column</code> \u306e\u5024\u306b\u3088\u3063\u3066\u6c7a\u307e\u308a\u307e\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u6642\u9593\u5217\u306b <code>{2021-01-06, 2021-01-10}</code> \u306e\u5024\u304c\u3042\u308a\u3001<code>period=\"5d\"</code> \u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059:</p> <pre><code>2021-01-01   2021-01-06\n    |----------|\n\n       2021-01-05   2021-01-10\n             |----------|\n</code></pre> <p>\u30ed\u30fc\u30ea\u30f3\u30b0\u30b0\u30eb\u30fc\u30d7\u5316\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306f\u5e38\u306b <code>DataFrame</code> \u5217\u306e\u5024\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u305f\u3081\u3001\u30b0\u30eb\u30fc\u30d7\u306e\u6570\u306f\u5e38\u306b\u5143\u306e <code>DataFrame</code> \u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002</p>"},{"location":"user-guide/transformations/time-series/rolling/#_5","title":"\u30b0\u30eb\u30fc\u30d7\u5316\u64cd\u4f5c\u306e\u7d44\u307f\u5408\u308f\u305b","text":"<p>\u30ed\u30fc\u30ea\u30f3\u30b0\u304a\u3088\u3073\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u306a\u30b0\u30eb\u30fc\u30d7\u5316\u64cd\u4f5c\u306f\u3001\u901a\u5e38\u306e\u30b0\u30eb\u30fc\u30d7\u5316\u64cd\u4f5c\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u4ee5\u4e0b\u306f\u3001\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u306a\u30b0\u30eb\u30fc\u30d7\u5316\u3092\u4f7f\u3063\u305f\u4f8b\u3067\u3059\u3002</p>  Python Rust <p> <code>DataFrame</code> <pre><code>df = pl.DataFrame(\n    {\n        \"time\": pl.datetime_range(\n            start=datetime(2021, 12, 16),\n            end=datetime(2021, 12, 16, 3),\n            interval=\"30m\",\n            eager=True,\n        ),\n        \"groups\": [\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\"],\n    }\n)\nprint(df)\n</code></pre></p> <p> <code>DataFrame</code> <pre><code>let time = polars::time::date_range(\n    \"time\",\n    NaiveDate::from_ymd_opt(2021, 12, 16)\n        .unwrap()\n        .and_hms_opt(0, 0, 0)\n        .unwrap(),\n    NaiveDate::from_ymd_opt(2021, 12, 16)\n        .unwrap()\n        .and_hms_opt(3, 0, 0)\n        .unwrap(),\n    Duration::parse(\"30m\"),\n    ClosedWindow::Both,\n    TimeUnit::Milliseconds,\n    None,\n)?;\nlet df = df!(\n    \"time\" =&gt; time,\n    \"groups\"=&gt; [\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"a\"],\n)?;\nprintln!(\"{}\", &amp;df);\n</code></pre></p> <pre><code>shape: (7, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 time                \u2506 groups \u2502\n\u2502 ---                 \u2506 ---    \u2502\n\u2502 datetime[\u03bcs]        \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2021-12-16 00:00:00 \u2506 a      \u2502\n\u2502 2021-12-16 00:30:00 \u2506 a      \u2502\n\u2502 2021-12-16 01:00:00 \u2506 a      \u2502\n\u2502 2021-12-16 01:30:00 \u2506 b      \u2502\n\u2502 2021-12-16 02:00:00 \u2506 b      \u2502\n\u2502 2021-12-16 02:30:00 \u2506 a      \u2502\n\u2502 2021-12-16 03:00:00 \u2506 a      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>  Python Rust <p> <code>group_by_dynamic</code> <pre><code>out = df.group_by_dynamic(\n    \"time\",\n    every=\"1h\",\n    closed=\"both\",\n    group_by=\"groups\",\n    include_boundaries=True,\n).agg(pl.len())\nprint(out)\n</code></pre></p> <p> <code>group_by_dynamic</code> \u00b7  Available on feature dynamic_group_by <pre><code>let out = df\n    .clone()\n    .lazy()\n    .group_by_dynamic(\n        col(\"time\"),\n        [col(\"groups\")],\n        DynamicGroupOptions {\n            every: Duration::parse(\"1h\"),\n            period: Duration::parse(\"1h\"),\n            offset: Duration::parse(\"0\"),\n            include_boundaries: true,\n            closed_window: ClosedWindow::Both,\n            ..Default::default()\n        },\n    )\n    .agg([len()])\n    .collect()?;\nprintln!(\"{}\", &amp;out);\n</code></pre></p> <pre><code>shape: (7, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 groups \u2506 _lower_boundary     \u2506 _upper_boundary     \u2506 time                \u2506 len \u2502\n\u2502 ---    \u2506 ---                 \u2506 ---                 \u2506 ---                 \u2506 --- \u2502\n\u2502 str    \u2506 datetime[\u03bcs]        \u2506 datetime[\u03bcs]        \u2506 datetime[\u03bcs]        \u2506 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a      \u2506 2021-12-15 23:00:00 \u2506 2021-12-16 00:00:00 \u2506 2021-12-15 23:00:00 \u2506 1   \u2502\n\u2502 a      \u2506 2021-12-16 00:00:00 \u2506 2021-12-16 01:00:00 \u2506 2021-12-16 00:00:00 \u2506 3   \u2502\n\u2502 a      \u2506 2021-12-16 01:00:00 \u2506 2021-12-16 02:00:00 \u2506 2021-12-16 01:00:00 \u2506 1   \u2502\n\u2502 a      \u2506 2021-12-16 02:00:00 \u2506 2021-12-16 03:00:00 \u2506 2021-12-16 02:00:00 \u2506 2   \u2502\n\u2502 a      \u2506 2021-12-16 03:00:00 \u2506 2021-12-16 04:00:00 \u2506 2021-12-16 03:00:00 \u2506 1   \u2502\n\u2502 b      \u2506 2021-12-16 01:00:00 \u2506 2021-12-16 02:00:00 \u2506 2021-12-16 01:00:00 \u2506 2   \u2502\n\u2502 b      \u2506 2021-12-16 02:00:00 \u2506 2021-12-16 03:00:00 \u2506 2021-12-16 02:00:00 \u2506 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/transformations/time-series/timezones/","title":"\u30bf\u30a4\u30e0\u30be\u30fc\u30f3","text":"<p>Tom Scott</p> <p>\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u6271\u3046\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3067\u304d\u308b\u9650\u308a\u907f\u3051\u307e\u3057\u3087\u3046\u3002</p> <p><code>Datetime</code> \u30c7\u30fc\u30bf\u578b\u306b\u306f\u3001\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u95a2\u9023\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6709\u52b9\u306a\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059:</p> <ul> <li><code>None</code>: \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306a\u3057\u3001\u300c\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u7121\u610f\u8b58\u300d\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002</li> <li><code>UTC</code>: \u5354\u5b9a\u4e16\u754c\u6642 (Coordinated Universal Time)\u3002</li> <li><code>Asia/Kathmandu</code>: \u300c\u30a8\u30ea\u30a2/\u5834\u6240\u300d\u5f62\u5f0f\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3002   \u5229\u7528\u53ef\u80fd\u306a\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306b\u3064\u3044\u3066\u306f\u3001tz database time zones \u306e\u30ea\u30b9\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002</li> </ul> <p>\u6ce8\u610f: +02:00 \u306e\u3088\u3046\u306a\u56fa\u5b9a\u30aa\u30d5\u30bb\u30c3\u30c8\u306f\u3001\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u51e6\u7406\u306b\u306f\u9069\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u4e0a\u8a18\u306e\u300c\u30a8\u30ea\u30a2/\u5834\u6240\u300d\u5f62\u5f0f\u3092\u4f7f\u3046\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u3088\u308a\u52b9\u679c\u7684\u306b\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002</p> <p><code>Datetime</code> \u306b\u306f\u5358\u4e00\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3057\u304b\u8a2d\u5b9a\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u8907\u6570\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u6301\u3064\u5217\u3092\u4f5c\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u8907\u6570\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u89e3\u6790\u3059\u308b\u5834\u5408\u306f\u3001<code>utc=True</code> \u3092\u6e21\u3057\u3066\u3001\u3059\u3079\u3066\u3092\u5171\u901a\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3 (UTC) \u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\u8a73\u3057\u304f\u306f \u65e5\u4ed8\u3068\u6642\u523b\u306e\u89e3\u6790 \u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002</p> <p>\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u8a2d\u5b9a\u3068\u5909\u63db\u306e\u4e3b\u306a\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059:</p> <ul> <li><code>dt.convert_time_zone</code>: 1 \u3064\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u304b\u3089\u5225\u306e\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306b\u5909\u63db\u3057\u307e\u3059\u3002</li> <li><code>dt.replace_time_zone</code>: \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u3092\u8a2d\u5b9a/\u89e3\u9664/\u5909\u66f4\u3057\u307e\u3059\u3002</li> </ul> <p>\u4e00\u822c\u7684\u306a\u64cd\u4f5c\u306e\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046:</p>  Python Rust <p> <code>str.to_datetime</code> \u00b7 <code>dt.replace_time_zone</code> \u00b7  Available on feature timezone <pre><code>ts = [\"2021-03-27 03:00\", \"2021-03-28 03:00\"]\ntz_naive = pl.Series(\"tz_naive\", ts).str.to_datetime()\ntz_aware = tz_naive.dt.replace_time_zone(\"UTC\").rename(\"tz_aware\")\ntime_zones_df = pl.DataFrame([tz_naive, tz_aware])\nprint(time_zones_df)\n</code></pre></p> <p> <code>str.replace_all</code> \u00b7 <code>dt.replace_time_zone</code> \u00b7  Available on feature dtype-datetime \u00b7  Available on feature timezones <pre><code>let ts = [\"2021-03-27 03:00\", \"2021-03-28 03:00\"];\nlet tz_naive = Series::new(\"tz_naive\", &amp;ts);\nlet time_zones_df = DataFrame::new(vec![tz_naive])?\n    .lazy()\n    .select([col(\"tz_naive\").str().to_datetime(\n        Some(TimeUnit::Milliseconds),\n        None,\n        StrptimeOptions::default(),\n        lit(\"raise\"),\n    )])\n    .with_columns([col(\"tz_naive\")\n        .dt()\n        .replace_time_zone(Some(\"UTC\".to_string()), lit(\"raise\"), NonExistent::Raise)\n        .alias(\"tz_aware\")])\n    .collect()?;\n\nprintln!(\"{}\", &amp;time_zones_df);\n</code></pre></p> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 tz_naive            \u2506 tz_aware                \u2502\n\u2502 ---                 \u2506 ---                     \u2502\n\u2502 datetime[\u03bcs]        \u2506 datetime[\u03bcs, UTC]       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2021-03-27 03:00:00 \u2506 2021-03-27 03:00:00 UTC \u2502\n\u2502 2021-03-28 03:00:00 \u2506 2021-03-28 03:00:00 UTC \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>  Python Rust <p> <code>dt.convert_time_zone</code> \u00b7 <code>dt.replace_time_zone</code> \u00b7  Available on feature timezone <pre><code>time_zones_operations = time_zones_df.select(\n    [\n        pl.col(\"tz_aware\")\n        .dt.replace_time_zone(\"Europe/Brussels\")\n        .alias(\"replace time zone\"),\n        pl.col(\"tz_aware\")\n        .dt.convert_time_zone(\"Asia/Kathmandu\")\n        .alias(\"convert time zone\"),\n        pl.col(\"tz_aware\").dt.replace_time_zone(None).alias(\"unset time zone\"),\n    ]\n)\nprint(time_zones_operations)\n</code></pre></p> <p> <code>dt.convert_time_zone</code> \u00b7 <code>dt.replace_time_zone</code> \u00b7  Available on feature timezones <pre><code>let time_zones_operations = time_zones_df\n    .lazy()\n    .select([\n        col(\"tz_aware\")\n            .dt()\n            .replace_time_zone(\n                Some(\"Europe/Brussels\".to_string()),\n                lit(\"raise\"),\n                NonExistent::Raise,\n            )\n            .alias(\"replace time zone\"),\n        col(\"tz_aware\")\n            .dt()\n            .convert_time_zone(\"Asia/Kathmandu\".to_string())\n            .alias(\"convert time zone\"),\n        col(\"tz_aware\")\n            .dt()\n            .replace_time_zone(None, lit(\"raise\"), NonExistent::Raise)\n            .alias(\"unset time zone\"),\n    ])\n    .collect()?;\nprintln!(\"{}\", &amp;time_zones_operations);\n</code></pre></p> <pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 replace time zone             \u2506 convert time zone            \u2506 unset time zone     \u2502\n\u2502 ---                           \u2506 ---                          \u2506 ---                 \u2502\n\u2502 datetime[\u03bcs, Europe/Brussels] \u2506 datetime[\u03bcs, Asia/Kathmandu] \u2506 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2021-03-27 03:00:00 CET       \u2506 2021-03-27 08:45:00 +0545    \u2506 2021-03-27 03:00:00 \u2502\n\u2502 2021-03-28 03:00:00 CEST      \u2506 2021-03-28 08:45:00 +0545    \u2506 2021-03-28 03:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"}]}